{"version":3,"file":"graphology-library.min.js","sources":["../../utils/is-graph.js","../../utils/is-graph-constructor.js","../../assertions/index.js","../../../node_modules/fast-deep-equal/es6/index.js","../assertions.js","../../utils/defaults.js","../../utils/infer-type.js","../../../node_modules/obliterator/iterator.js","../../../node_modules/mnemonist/utils/typed-arrays.js","../../../node_modules/mnemonist/sparse-map.js","../../../node_modules/mnemonist/sparse-queue-set.js","../../../node_modules/pandemonium/random-index.js","../../utils/getters.js","../../indices/louvain.js","../../communities-louvain/index.js","../communities-louvain.js","../../utils/add-node.js","../../indices/dfs-stack.js","../../utils/add-edge.js","../../components/index.js","../components.js","../../generators/classic/complete.js","../../generators/classic/empty.js","../../generators/classic/ladder.js","../../generators/classic/path.js","../../generators/classic/index.js","../../generators/community/caveman.js","../../generators/community/connected-caveman.js","../../generators/random/clusters.js","../../metrics/graph/simple-size.js","../../metrics/graph/density.js","../../generators/random/erdos-renyi.js","../../generators/random/girvan-newman.js","../../generators/random/index.js","../../utils/merge-star.js","../../generators/small/krackhardt-kite.js","../../generators/social/florentine-families.js","../../generators/social/karate-club.js","../../generators/index.js","../generators.js","../../layout/node_modules/pandemonium/random.js","../../layout/node_modules/pandemonium/shuffle-in-place.js","../../layout/circlepack.js","../../layout/circular.js","../../layout/random.js","../../layout/rotation.js","../../layout/index.js","../layout.js","../layout-force.js","../../layout-forceatlas2/iterate.js","../../layout-forceatlas2/helpers.js","../../layout-forceatlas2/defaults.js","../../layout-forceatlas2/index.js","../layout-forceatlas2.js","../../layout-noverlap/iterate.js","../../layout-noverlap/helpers.js","../../layout-noverlap/defaults.js","../../layout-noverlap/index.js","../layout-noverlap.js","../node_modules/graphology-metrics/centrality/degree.js","../../../node_modules/obliterator/support.js","../../../node_modules/obliterator/foreach.js","../../../node_modules/mnemonist/utils/iterables.js","../../../node_modules/mnemonist/fixed-deque.js","../../../node_modules/mnemonist/fixed-stack.js","../../../node_modules/mnemonist/utils/comparators.js","../../../node_modules/mnemonist/heap.js","../../indices/neighborhood.js","../../shortest-path/indexed-brandes.js","../node_modules/graphology-metrics/centrality/betweenness.js","../../../node_modules/mnemonist/sparse-set.js","../node_modules/graphology-metrics/centrality/closeness.js","../node_modules/graphology-metrics/centrality/eigenvector.js","../node_modules/graphology-metrics/centrality/hits.js","../node_modules/graphology-metrics/centrality/pagerank.js","../node_modules/graphology-metrics/centrality/index.js","../../../node_modules/mnemonist/set.js","../node_modules/graphology-metrics/edge/simmelian-strength.js","../node_modules/graphology-metrics/edge/index.js","../node_modules/graphology-metrics/graph/simple-size.js","../node_modules/graphology-metrics/graph/density.js","../node_modules/graphology-metrics/graph/extent.js","../../../node_modules/mnemonist/queue.js","../../shortest-path/unweighted.js","../../../node_modules/@yomguithereal/helpers/extend.js","../node_modules/graphology-metrics/node/eccentricity.js","../node_modules/graphology-metrics/graph/diameter.js","../node_modules/graphology-metrics/graph/modularity.js","../node_modules/graphology-metrics/graph/weighted-size.js","../node_modules/graphology-metrics/graph/index.js","../node_modules/graphology-metrics/layout-quality/edge-uniformity.js","../../../node_modules/mnemonist/fixed-reverse-heap.js","../../../node_modules/mnemonist/sort/quick.js","../../../node_modules/mnemonist/kd-tree.js","../node_modules/graphology-metrics/layout-quality/neighborhood-preservation.js","../node_modules/graphology-metrics/layout-quality/stress.js","../node_modules/graphology-metrics/node/weighted-degree.js","../node_modules/graphology-metrics/node/index.js","../node_modules/graphology-metrics/index.js","../metrics.js","../../operators/disjoint-union.js","../../operators/reverse.js","../../operators/subgraph.js","../../operators/to-directed.js","../../operators/to-mixed.js","../../operators/to-multi.js","../../operators/to-simple.js","../../operators/to-undirected.js","../../operators/union.js","../../operators/index.js","../operators.js","../../shortest-path/utils.js","../../shortest-path/dijkstra.js","../../shortest-path/index.js","../shortest-path.js","../../simple-path/index.js","../../simple-path/node_modules/graphology-utils/is-graph.js","../simple-path.js","../../indices/bfs-queue.js","../../traversal/utils.js","../../traversal/bfs.js","../../traversal/dfs.js","../../traversal/index.js","../traversal.js","../../utils/infer-multi.js","../../utils/rename-graph-keys.js","../../utils/update-graph-keys.js","../../utils/index.js","../../utils/merge-clique.js","../../utils/merge-cycle.js","../../utils/merge-path.js","../utils.js","../../layout-force/iterate.js","../../layout-force/helpers.js","../../layout-force/worker.js","../../layout-force/defaults.js","../../layout-forceatlas2/worker.js","../../layout-forceatlas2/webworker.js","../../layout-noverlap/worker.js","../../layout-noverlap/webworker.js","../../gexf/common/helpers.js","../../gexf/common/parser.js","../../gexf/browser/parser.js","../../../node_modules/xml-writer/lib/xml-writer.js","../../gexf/common/writer.js","../../gexf/browser/index.js","../../graphml/common/defaults.js","../../graphml/common/parser.js","../../graphml/browser/parser.js","../../graphml/browser/index.js","../browser.js"],"sourcesContent":["/**\n * Graphology isGraph\n * ===================\n *\n * Very simple function aiming at ensuring the given variable is a\n * graphology instance.\n */\n\n/**\n * Checking the value is a graphology instance.\n *\n * @param  {any}     value - Target value.\n * @return {boolean}\n */\nmodule.exports = function isGraph(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.dropNode === 'function' &&\n    typeof value.multi === 'boolean'\n  );\n};\n","/**\n * Graphology isGraphConstructor\n * ==============================\n *\n * Very simple function aiming at ensuring the given variable is a\n * graphology constructor.\n */\n\n/**\n * Checking the value is a graphology constructor.\n *\n * @param  {any}     value - Target value.\n * @return {boolean}\n */\nmodule.exports = function isGraphConstructor(value) {\n  return (\n    value !== null &&\n    typeof value === 'function' &&\n    typeof value.prototype === 'object' &&\n    typeof value.prototype.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.prototype.dropNode === 'function'\n  );\n};\n","/**\n * Graphology Assertions\n * ======================\n *\n * Various assertions concerning graphs.\n */\nvar deepEqual = require('fast-deep-equal/es6');\n\n/**\n * Constants.\n */\nvar SIZE = Symbol('size');\n\n/**\n * Helpers.\n */\nfunction areUnorderedCollectionsOfAttributesIdentical(a1, a2) {\n  var l1 = a1.length;\n  var l2 = a2.length;\n\n  if (l1 !== l2) return false;\n\n  var o1, o2;\n  var i, j;\n  var matches = new Set();\n\n  outside: for (i = 0; i < l1; i++) {\n    o1 = a1[i];\n\n    for (j = 0; j < l2; j++) {\n      if (matches.has(j)) continue;\n\n      o2 = a2[j];\n\n      if (deepEqual(o1, o2)) {\n        matches.add(j);\n        continue outside;\n      }\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction compareNeighborEntries(entries1, entries2) {\n  if (entries1[SIZE] !== entries2[SIZE]) return false;\n\n  for (var k in entries1) {\n    if (!areUnorderedCollectionsOfAttributesIdentical(entries1[k], entries2[k]))\n      return false;\n  }\n\n  return true;\n}\n\nfunction countOutEdges(graph, node) {\n  var counts = {};\n  var c;\n\n  graph.forEachOutEdge(node, function (_e, _ea, _s, target) {\n    c = counts[target] || 0;\n    c++;\n\n    counts[target] = c;\n  });\n\n  return counts;\n}\n\nfunction countAssymetricUndirectedEdges(graph, node) {\n  var counts = {};\n  var c;\n\n  graph.forEachUndirectedEdge(node, function (_e, _ea, source, target) {\n    target = node === source ? target : source;\n\n    if (node > target) return;\n\n    c = counts[target] || 0;\n    c++;\n\n    counts[target] = c;\n  });\n\n  return counts;\n}\n\nfunction collectOutEdges(graph, node) {\n  var entries = {};\n  entries[SIZE] = 0;\n  var c;\n\n  graph.forEachOutEdge(node, function (_e, attr, _s, target) {\n    c = entries[target];\n\n    if (!c) {\n      c = [];\n      entries[SIZE] += 1;\n      entries[target] = c;\n    }\n\n    c.push(attr);\n  });\n\n  return entries;\n}\n\nfunction collectAssymetricUndirectedEdges(graph, node) {\n  var entries = {};\n  entries[SIZE] = 0;\n  var c;\n\n  graph.forEachUndirectedEdge(node, function (_e, attr, source, target) {\n    target = node === source ? target : source;\n\n    if (node > target) return;\n\n    c = entries[target];\n\n    if (!c) {\n      c = [];\n      entries[SIZE] += 1;\n      entries[target] = c;\n    }\n\n    c.push(attr);\n  });\n\n  return entries;\n}\n\n/**\n * Function returning whether the given graphs have the same nodes.\n *\n * @param  {boolean} deep - Whether to perform deep comparisons.\n * @param  {Graph}   G    - First graph.\n * @param  {Graph}   H    - Second graph.\n * @return {boolean}\n */\nfunction abstractHaveSameNodes(deep, G, H) {\n  if (G === H) return true;\n\n  if (G.order !== H.order) return false;\n\n  return G.everyNode(function (node, attr) {\n    if (!H.hasNode(node)) return false;\n\n    if (!deep) return true;\n\n    return deepEqual(attr, H.getNodeAttributes(node));\n  });\n}\n\n/**\n * Function returning whether the given graphs are identical.\n *\n * @param  {boolean} deep    - Whether to perform deep comparison.\n * @param  {boolean} relaxed - Whether to allow graph options to differ.\n * @param  {Graph}   G       - First graph.\n * @param  {Graph}   H       - Second graph.\n * @return {boolean}\n */\nfunction abstractAreSameGraphs(deep, relaxed, G, H) {\n  if (G === H) return true;\n\n  // If two graphs have incompatible settings they cannot be identical\n  if (relaxed) {\n    if (\n      (G.type === 'directed' && H.type === 'undirected') ||\n      (G.type === 'undirected' && H.type === 'directed')\n    )\n      return false;\n  }\n\n  // If two graphs don't have the same settings they cannot be identical\n  else {\n    if (\n      G.type !== H.type ||\n      G.allowSelfLoops !== H.allowSelfLoops ||\n      G.multi !== H.multi\n    )\n      return false;\n  }\n\n  // If two graphs don't have the same number of typed edges, they cannot be identical\n  if (\n    G.directedSize !== H.directedSize ||\n    G.undirectedSize !== H.undirectedSize\n  )\n    return false;\n\n  // If two graphs don't have the same nodes they cannot be identical\n  if (!abstractHaveSameNodes(deep, G, H)) return false;\n\n  var sameDirectedEdges = false;\n  var sameUndirectedEdges = false;\n\n  // In the simple case we don't need refining\n  if (!G.multi && !H.multi) {\n    sameDirectedEdges = G.everyDirectedEdge(function (_e, _ea, source, target) {\n      if (!H.hasDirectedEdge(source, target)) return false;\n\n      if (!deep) return true;\n\n      return deepEqual(\n        G.getDirectedEdgeAttributes(source, target),\n        H.getDirectedEdgeAttributes(source, target)\n      );\n    });\n\n    if (!sameDirectedEdges) return false;\n\n    sameUndirectedEdges = G.everyUndirectedEdge(function (\n      _e,\n      _ea,\n      source,\n      target\n    ) {\n      if (!H.hasUndirectedEdge(source, target)) return false;\n\n      if (!deep) return true;\n\n      return deepEqual(\n        G.getUndirectedEdgeAttributes(source, target),\n        H.getUndirectedEdgeAttributes(source, target)\n      );\n    });\n\n    if (!sameUndirectedEdges) return false;\n  }\n\n  // In the multi case, things are a bit more complex\n  else {\n    var aggregationFunction = deep ? collectOutEdges : countOutEdges;\n    var comparisonFunction = deep ? compareNeighborEntries : deepEqual;\n\n    sameDirectedEdges = G.everyNode(function (node) {\n      var gCounts = aggregationFunction(G, node);\n      var hCounts = aggregationFunction(H, node);\n\n      return comparisonFunction(gCounts, hCounts);\n    });\n\n    if (!sameDirectedEdges) return false;\n\n    aggregationFunction = deep\n      ? collectAssymetricUndirectedEdges\n      : countAssymetricUndirectedEdges;\n\n    sameUndirectedEdges = G.everyNode(function (node) {\n      var gCounts = aggregationFunction(G, node);\n      var hCounts = aggregationFunction(H, node);\n\n      return comparisonFunction(gCounts, hCounts);\n    });\n\n    if (!sameUndirectedEdges) return false;\n  }\n\n  return true;\n}\n\n/**\n * Exporting.\n */\nexports.isGraph = require('graphology-utils/is-graph');\nexports.isGraphConstructor = require('graphology-utils/is-graph-constructor');\nexports.haveSameNodes = abstractHaveSameNodes.bind(null, false);\nexports.haveSameNodesDeep = abstractHaveSameNodes.bind(null, true);\nexports.areSameGraphs = abstractAreSameGraphs.bind(null, false, false);\nexports.areSameGraphsDeep = abstractAreSameGraphs.bind(null, true, false);\nexports.haveSameEdges = abstractAreSameGraphs.bind(null, false, true);\nexports.haveSameEdgesDeep = abstractAreSameGraphs.bind(null, true, true);\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n  var envHasBigInt64Array = typeof BigInt64Array !== 'undefined';\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","module.exports = require('graphology-assertions');\n","/**\n * Graphology Defaults\n * ====================\n *\n * Helper function used throughout the standard lib to resolve defaults.\n */\nfunction isLeaf(o) {\n  return (\n    !o ||\n    typeof o !== 'object' ||\n    typeof o === 'function' ||\n    Array.isArray(o) ||\n    o instanceof Set ||\n    o instanceof Map ||\n    o instanceof RegExp ||\n    o instanceof Date\n  );\n}\n\nfunction resolveDefaults(target, defaults) {\n  target = target || {};\n\n  var output = {};\n\n  for (var k in defaults) {\n    var existing = target[k];\n    var def = defaults[k];\n\n    // Recursion\n    if (!isLeaf(def)) {\n      output[k] = resolveDefaults(existing, def);\n\n      continue;\n    }\n\n    // Leaf\n    if (existing === undefined) {\n      output[k] = def;\n    } else {\n      output[k] = existing;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = resolveDefaults;\n","/**\n * Graphology inferType\n * =====================\n *\n * Useful function used to \"guess\" the real type of the given Graph using\n * introspection.\n */\nvar isGraph = require('./is-graph.js');\n\n/**\n * Returning the inferred type of the given graph.\n *\n * @param  {Graph}   graph - Target graph.\n * @return {boolean}\n */\nmodule.exports = function inferType(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-utils/infer-type: expecting a valid graphology instance.'\n    );\n\n  var declaredType = graph.type;\n\n  if (declaredType !== 'mixed') return declaredType;\n\n  if (\n    (graph.directedSize === 0 && graph.undirectedSize === 0) ||\n    (graph.directedSize > 0 && graph.undirectedSize > 0)\n  )\n    return 'mixed';\n\n  if (graph.directedSize > 0) return 'directed';\n\n  return 'undirected';\n};\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","/**\n * Mnemonist Typed Array Helpers\n * ==============================\n *\n * Miscellaneous helpers related to typed arrays.\n */\n\n/**\n * When using an unsigned integer array to store pointers, one might want to\n * choose the optimal word size in regards to the actual numbers of pointers\n * to store.\n *\n * This helpers does just that.\n *\n * @param  {number} size - Expected size of the array to map.\n * @return {TypedArray}\n */\nvar MAX_8BIT_INTEGER = Math.pow(2, 8) - 1,\n    MAX_16BIT_INTEGER = Math.pow(2, 16) - 1,\n    MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;\n\nvar MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1,\n    MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1,\n    MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;\n\nexports.getPointerArray = function(size) {\n  var maxIndex = size - 1;\n\n  if (maxIndex <= MAX_8BIT_INTEGER)\n    return Uint8Array;\n\n  if (maxIndex <= MAX_16BIT_INTEGER)\n    return Uint16Array;\n\n  if (maxIndex <= MAX_32BIT_INTEGER)\n    return Uint32Array;\n\n  throw new Error('mnemonist: Pointer Array of size > 4294967295 is not supported.');\n};\n\nexports.getSignedPointerArray = function(size) {\n  var maxIndex = size - 1;\n\n  if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)\n    return Int8Array;\n\n  if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)\n    return Int16Array;\n\n  if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)\n    return Int32Array;\n\n  return Float64Array;\n};\n\n/**\n * Function returning the minimal type able to represent the given number.\n *\n * @param  {number} value - Value to test.\n * @return {TypedArrayClass}\n */\nexports.getNumberType = function(value) {\n\n  // <= 32 bits itnteger?\n  if (value === (value | 0)) {\n\n    // Negative\n    if (Math.sign(value) === -1) {\n      if (value <= 127 && value >= -128)\n        return Int8Array;\n\n      if (value <= 32767 && value >= -32768)\n        return Int16Array;\n\n      return Int32Array;\n    }\n    else {\n\n      if (value <= 255)\n        return Uint8Array;\n\n      if (value <= 65535)\n        return Uint16Array;\n\n      return Uint32Array;\n    }\n  }\n\n  // 53 bits integer & floats\n  // NOTE: it's kinda hard to tell whether we could use 32bits or not...\n  return Float64Array;\n};\n\n/**\n * Function returning the minimal type able to represent the given array\n * of JavaScript numbers.\n *\n * @param  {array}    array  - Array to represent.\n * @param  {function} getter - Optional getter.\n * @return {TypedArrayClass}\n */\nvar TYPE_PRIORITY = {\n  Uint8Array: 1,\n  Int8Array: 2,\n  Uint16Array: 3,\n  Int16Array: 4,\n  Uint32Array: 5,\n  Int32Array: 6,\n  Float32Array: 7,\n  Float64Array: 8\n};\n\n// TODO: make this a one-shot for one value\nexports.getMinimalRepresentation = function(array, getter) {\n  var maxType = null,\n      maxPriority = 0,\n      p,\n      t,\n      v,\n      i,\n      l;\n\n  for (i = 0, l = array.length; i < l; i++) {\n    v = getter ? getter(array[i]) : array[i];\n    t = exports.getNumberType(v);\n    p = TYPE_PRIORITY[t.name];\n\n    if (p > maxPriority) {\n      maxPriority = p;\n      maxType = t;\n    }\n  }\n\n  return maxType;\n};\n\n/**\n * Function returning whether the given value is a typed array.\n *\n * @param  {any} value - Value to test.\n * @return {boolean}\n */\nexports.isTypedArray = function(value) {\n  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(value);\n};\n\n/**\n * Function used to concat byte arrays.\n *\n * @param  {...ByteArray}\n * @return {ByteArray}\n */\nexports.concat = function() {\n  var length = 0,\n      i,\n      o,\n      l;\n\n  for (i = 0, l = arguments.length; i < l; i++)\n    length += arguments[i].length;\n\n  var array = new (arguments[0].constructor)(length);\n\n  for (i = 0, o = 0; i < l; i++) {\n    array.set(arguments[i], o);\n    o += arguments[i].length;\n  }\n\n  return array;\n};\n\n/**\n * Function used to initialize a byte array of indices.\n *\n * @param  {number}    length - Length of target.\n * @return {ByteArray}\n */\nexports.indices = function(length) {\n  var PointerArray = exports.getPointerArray(length);\n\n  var array = new PointerArray(length);\n\n  for (var i = 0; i < length; i++)\n    array[i] = i;\n\n  return array;\n};\n","/**\n * Mnemonist SparseMap\n * ====================\n *\n * JavaScript sparse map implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseMap.\n *\n * @constructor\n */\nfunction SparseMap(Values, length) {\n  if (arguments.length < 2) {\n    length = Values;\n    Values = Array;\n  }\n\n  var ByteArray = getPointerArray(length);\n\n  // Properties\n  this.size = 0;\n  this.length = length;\n  this.dense = new ByteArray(length);\n  this.sparse = new ByteArray(length);\n  this.vals = new Values(length);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseMap.prototype.clear = function() {\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {SparseMap}\n */\nSparseMap.prototype.has = function(member) {\n  var index = this.sparse[member];\n\n  return (\n    index < this.size &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to get the value associated to a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {any}\n */\nSparseMap.prototype.get = function(member) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member)\n    return this.vals[index];\n\n  return;\n};\n\n/**\n * Method used to set a value into the map.\n *\n * @param  {number} member - Member to set.\n * @param  {any}    value  - Associated value.\n * @return {SparseMap}\n */\nSparseMap.prototype.set = function(member, value) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member) {\n    this.vals[index] = value;\n    return this;\n  }\n\n  this.dense[this.size] = member;\n  this.sparse[member] = this.size;\n  this.vals[this.size] = value;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove a member from the set.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseMap.prototype.delete = function(member) {\n  var index = this.sparse[member];\n\n  if (index >= this.size || this.dense[index] !== member)\n    return false;\n\n  index = this.dense[this.size - 1];\n  this.dense[this.sparse[member]] = index;\n  this.sparse[index] = this.sparse[member];\n  this.size--;\n\n  return true;\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0; i < this.size; i++)\n    callback.call(scope, this.vals[i], this.dense[i]);\n};\n\n/**\n * Method used to create an iterator over a set's members.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.keys = function() {\n  var size = this.size,\n      dense = this.dense,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = dense[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.values = function() {\n  var size = this.size,\n      values = this.vals,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = values[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.entries = function() {\n  var size = this.size,\n      dense = this.dense,\n      values = this.vals,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = [dense[i], values[i]];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseMap.prototype[Symbol.iterator] = SparseMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nSparseMap.prototype.inspect = function() {\n  var proxy = new Map();\n\n  for (var i = 0; i < this.size; i++)\n    proxy.set(this.dense[i], this.vals[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseMap,\n    enumerable: false\n  });\n\n  proxy.length = this.length;\n\n  if (this.vals.constructor !== Array)\n    proxy.type = this.vals.constructor.name;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseMap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseMap;\n","/**\n * Mnemonist SparseQueueSet\n * =========================\n *\n * JavaScript sparse queue set implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseQueueSet.\n *\n * @constructor\n */\nfunction SparseQueueSet(capacity) {\n\n  var ByteArray = getPointerArray(capacity);\n\n  // Properties\n  this.start = 0;\n  this.size = 0;\n  this.capacity = capacity;\n  this.dense = new ByteArray(capacity);\n  this.sparse = new ByteArray(capacity);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseQueueSet.prototype.clear = function() {\n  this.start = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the queue.\n *\n * @param  {number} member - Member to test.\n * @return {SparseQueueSet}\n */\nSparseQueueSet.prototype.has = function(member) {\n  if (this.size === 0)\n    return false;\n\n  var index = this.sparse[member];\n\n  var inBounds = (\n    index < this.capacity &&\n    (\n      index >= this.start &&\n      index < this.start + this.size\n    ) ||\n    (\n      index < ((this.start + this.size) % this.capacity)\n    )\n  );\n\n  return (\n    inBounds &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to add a member to the queue.\n *\n * @param  {number} member - Member to add.\n * @return {SparseQueueSet}\n */\nSparseQueueSet.prototype.enqueue = function(member) {\n  var index = this.sparse[member];\n\n  if (this.size !== 0) {\n    var inBounds = (\n      index < this.capacity &&\n      (\n        index >= this.start &&\n        index < this.start + this.size\n      ) ||\n      (\n        index < ((this.start + this.size) % this.capacity)\n      )\n    );\n\n    if (inBounds && this.dense[index] === member)\n      return this;\n  }\n\n  index = (this.start + this.size) % this.capacity;\n\n  this.dense[index] = member;\n  this.sparse[member] = index;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove the next member from the queue.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseQueueSet.prototype.dequeue = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start;\n\n  this.size--;\n  this.start++;\n\n  if (this.start === this.capacity)\n    this.start = 0;\n\n  var member = this.dense[index];\n\n  this.sparse[member] = this.capacity;\n\n  return member;\n};\n\n/**\n * Method used to iterate over the queue's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseQueueSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    callback.call(scope, this.dense[i], j, this);\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseQueueSet.prototype.values = function() {\n  var dense = this.dense,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = dense[i];\n\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseQueueSet.prototype[Symbol.iterator] = SparseQueueSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nSparseQueueSet.prototype.inspect = function() {\n  var proxy = [];\n\n  this.forEach(function(member) {\n    proxy.push(member);\n  });\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseQueueSet,\n    enumerable: false\n  });\n\n  proxy.capacity = this.capacity;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseQueueSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseQueueSet.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseQueueSet;\n","/**\n * Pandemonium Random Index\n * =========================\n *\n * Random index function.\n */\n\n/**\n * Creating a function returning a random index from the given array.\n *\n * @param  {function} rng - RNG function returning uniform random.\n * @return {function}     - The created function.\n */\nfunction createRandomIndex(rng) {\n  /**\n   * Random function.\n   *\n   * @param  {array|number}  array - Target array or length of the array.\n   * @return {number}\n   */\n  return function (length) {\n    if (typeof length !== 'number') length = length.length;\n\n    return Math.floor(rng() * length);\n  };\n}\n\n/**\n * Default random index using `Math.random`.\n */\nvar randomIndex = createRandomIndex(Math.random);\n\n/**\n * Exporting.\n */\nrandomIndex.createRandomIndex = createRandomIndex;\nmodule.exports = randomIndex;\n","/**\n * Graphology Weight Getter\n * =========================\n *\n * Function creating weight getters.\n */\nfunction coerceWeight(value) {\n  // Ensuring target value is a correct number\n  if (typeof value !== 'number' || isNaN(value)) return 1;\n\n  return value;\n}\n\nfunction createNodeValueGetter(nameOrFunction, defaultValue) {\n  var getter = {};\n\n  var coerceToDefault = function (v) {\n    if (typeof v === 'undefined') return defaultValue;\n\n    return v;\n  };\n\n  if (typeof defaultValue === 'function') coerceToDefault = defaultValue;\n\n  var get = function (attributes) {\n    return coerceToDefault(attributes[nameOrFunction]);\n  };\n\n  var returnDefault = function () {\n    return coerceToDefault(undefined);\n  };\n\n  if (typeof nameOrFunction === 'string') {\n    getter.fromAttributes = get;\n    getter.fromGraph = function (graph, node) {\n      return get(graph.getNodeAttributes(node));\n    };\n    getter.fromEntry = function (node, attributes) {\n      return get(attributes);\n    };\n  } else if (typeof nameOrFunction === 'function') {\n    getter.fromAttributes = function () {\n      throw new Error(\n        'graphology-utils/getters/createNodeValueGetter: irrelevant usage.'\n      );\n    };\n    getter.fromGraph = function (graph, node) {\n      return coerceToDefault(\n        nameOrFunction(node, graph.getNodeAttributes(node))\n      );\n    };\n    getter.fromEntry = function (node, attributes) {\n      return coerceToDefault(nameOrFunction(node, attributes));\n    };\n  } else {\n    getter.fromAttributes = returnDefault;\n    getter.fromGraph = returnDefault;\n    getter.fromEntry = returnDefault;\n  }\n\n  return getter;\n}\n\nfunction createEdgeValueGetter(nameOrFunction, defaultValue) {\n  var getter = {};\n\n  var coerceToDefault = function (v) {\n    if (typeof v === 'undefined') return defaultValue;\n\n    return v;\n  };\n\n  if (typeof defaultValue === 'function') coerceToDefault = defaultValue;\n\n  var get = function (attributes) {\n    return coerceToDefault(attributes[nameOrFunction]);\n  };\n\n  var returnDefault = function () {\n    return coerceToDefault(undefined);\n  };\n\n  if (typeof nameOrFunction === 'string') {\n    getter.fromAttributes = get;\n    getter.fromGraph = function (graph, edge) {\n      return get(graph.getEdgeAttributes(edge));\n    };\n    getter.fromEntry = function (edge, attributes) {\n      return get(attributes);\n    };\n    getter.fromPartialEntry = getter.fromEntry;\n    getter.fromMinimalEntry = getter.fromEntry;\n  } else if (typeof nameOrFunction === 'function') {\n    getter.fromAttributes = function () {\n      throw new Error(\n        'graphology-utils/getters/createEdgeValueGetter: irrelevant usage.'\n      );\n    };\n    getter.fromGraph = function (graph, edge) {\n      // TODO: we can do better, check #310\n      var extremities = graph.extremities(edge);\n      return coerceToDefault(\n        nameOrFunction(\n          edge,\n          graph.getEdgeAttributes(edge),\n          extremities[0],\n          extremities[1],\n          graph.getNodeAttributes(extremities[0]),\n          graph.getNodeAttributes(extremities[1]),\n          graph.isUndirected(edge)\n        )\n      );\n    };\n    getter.fromEntry = function (e, a, s, t, sa, ta, u) {\n      return coerceToDefault(nameOrFunction(e, a, s, t, sa, ta, u));\n    };\n    getter.fromPartialEntry = function (e, a, s, t) {\n      return coerceToDefault(nameOrFunction(e, a, s, t));\n    };\n    getter.fromMinimalEntry = function (e, a) {\n      return coerceToDefault(nameOrFunction(e, a));\n    };\n  } else {\n    getter.fromAttributes = returnDefault;\n    getter.fromGraph = returnDefault;\n    getter.fromEntry = returnDefault;\n    getter.fromMinimalEntry = returnDefault;\n  }\n\n  return getter;\n}\n\nexports.createNodeValueGetter = createNodeValueGetter;\nexports.createEdgeValueGetter = createEdgeValueGetter;\nexports.createEdgeWeightGetter = function (name) {\n  return createEdgeValueGetter(name, coerceWeight);\n};\n","/**\n * Graphology Louvain Indices\n * ===========================\n *\n * Undirected & Directed Louvain Index structures used to compute the famous\n * Louvain community detection algorithm.\n *\n * Most of the rationale is explained in `graphology-metrics`.\n *\n * Note that this index shares a lot with the classic Union-Find data\n * structure. It also relies on a unused id stack to make sure we can\n * increase again the number of communites when isolating nodes.\n *\n * [Articles]\n * M. E. J. Newman, « Modularity and community structure in networks »,\n * Proc. Natl. Acad. Sci. USA, vol. 103, no 23, 2006, p. 8577–8582\n * https://dx.doi.org/10.1073%2Fpnas.0601602103\n *\n * Newman, M. E. J. « Community detection in networks: Modularity optimization\n * and maximum likelihood are equivalent ». Physical Review E, vol. 94, no 5,\n * novembre 2016, p. 052315. arXiv.org, doi:10.1103/PhysRevE.94.052315.\n * https://arxiv.org/pdf/1606.02319.pdf\n *\n * Blondel, Vincent D., et al. « Fast unfolding of communities in large\n * networks ». Journal of Statistical Mechanics: Theory and Experiment,\n * vol. 2008, no 10, octobre 2008, p. P10008. DOI.org (Crossref),\n * doi:10.1088/1742-5468/2008/10/P10008.\n * https://arxiv.org/pdf/0803.0476.pdf\n *\n * Nicolas Dugué, Anthony Perez. Directed Louvain: maximizing modularity in\n * directed networks. [Research Report] Université d’Orléans. 2015. hal-01231784\n * https://hal.archives-ouvertes.fr/hal-01231784\n *\n * R. Lambiotte, J.-C. Delvenne and M. Barahona. Laplacian Dynamics and\n * Multiscale Modular Structure in Networks,\n * doi:10.1109/TNSE.2015.2391998.\n * https://arxiv.org/abs/0812.1770\n *\n * [Latex]:\n *\n * Undirected Case:\n * ----------------\n *\n * \\Delta Q=\\bigg{[}\\frac{\\sum^{c}_{in}-(2d_{c}+l)}{2m}-\\bigg{(}\\frac{\\sum^{c}_{tot}-(d+l)}{2m}\\bigg{)}^{2}+\\frac{\\sum^{t}_{in}+(2d_{t}+l)}{2m}-\\bigg{(}\\frac{\\sum^{t}_{tot}+(d+l)}{2m}\\bigg{)}^{2}\\bigg{]}-\\bigg{[}\\frac{\\sum^{c}_{in}}{2m}-\\bigg{(}\\frac{\\sum^{c}_{tot}}{2m}\\bigg{)}^{2}+\\frac{\\sum^{t}_{in}}{2m}-\\bigg{(}\\frac{\\sum^{t}_{tot}}{2m}\\bigg{)}^{2}\\bigg{]}\n * \\Delta Q=\\frac{d_{t}-d_{c}}{m}+\\frac{l\\sum^{c}_{tot}+d\\sum^{c}_{tot}-d^{2}-l^{2}-2dl-l\\sum^{t}_{tot}-d\\sum^{t}_{tot}}{2m^{2}}\n * \\Delta Q=\\frac{d_{t}-d_{c}}{m}+\\frac{(l+d)\\sum^{c}_{tot}-d^{2}-l^{2}-2dl-(l+d)\\sum^{t}_{tot}}{2m^{2}}\n *\n * Directed Case:\n * --------------\n * \\Delta Q_d=\\bigg{[}\\frac{\\sum^{c}_{in}-(d_{c.in}+d_{c.out}+l)}{m}-\\frac{(\\sum^{c}_{tot.in}-(d_{in}+l))(\\sum^{c}_{tot.out}-(d_{out}+l))}{m^{2}}+\\frac{\\sum^{t}_{in}+(d_{t.in}+d_{t.out}+l)}{m}-\\frac{(\\sum^{t}_{tot.in}+(d_{in}+l))(\\sum^{t}_{tot.out}+(d_{out}+l))}{m^{2}}\\bigg{]}-\\bigg{[}\\frac{\\sum^{c}_{in}}{m}-\\frac{\\sum^{c}_{tot.in}\\sum^{c}_{tot.out}}{m^{2}}+\\frac{\\sum^{t}_{in}}{m}-\\frac{\\sum^{t}_{tot.in}\\sum^{t}_{tot.out}}{m^{2}}\\bigg{]}\n *\n * [Notes]:\n * Louvain is a bit unclear on this but delta computation are not derived from\n * Q1 - Q2 but rather between Q when considered node is isolated in its own\n * community versus Q with this node in target community. This is in fact\n * an optimization because the subtract part is constant in the formulae and\n * does not affect delta comparisons.\n */\nvar typed = require('mnemonist/utils/typed-arrays');\nvar resolveDefaults = require('graphology-utils/defaults');\nvar createEdgeWeightGetter =\n  require('graphology-utils/getters').createEdgeWeightGetter;\n\nvar INSPECT = Symbol.for('nodejs.util.inspect.custom');\n\nvar DEFAULTS = {\n  getEdgeWeight: 'weight',\n  keepDendrogram: false,\n  resolution: 1\n};\n\nfunction UndirectedLouvainIndex(graph, options) {\n  // Solving options\n  options = resolveDefaults(options, DEFAULTS);\n\n  var resolution = options.resolution;\n\n  // Weight getters\n  var getEdgeWeight = createEdgeWeightGetter(options.getEdgeWeight).fromEntry;\n\n  // Building the index\n  var size = (graph.size - graph.selfLoopCount) * 2;\n\n  var NeighborhoodPointerArray = typed.getPointerArray(size);\n  var NodesPointerArray = typed.getPointerArray(graph.order + 1);\n\n  // NOTE: this memory optimization can yield overflow deopt when computing deltas\n  var WeightsArray = options.getEdgeWeight\n    ? Float64Array\n    : typed.getPointerArray(graph.size * 2);\n\n  // Properties\n  this.C = graph.order;\n  this.M = 0;\n  this.E = size;\n  this.U = 0;\n  this.resolution = resolution;\n  this.level = 0;\n  this.graph = graph;\n  this.nodes = new Array(graph.order);\n  this.keepDendrogram = options.keepDendrogram;\n\n  // Edge-level\n  this.neighborhood = new NodesPointerArray(size);\n  this.weights = new WeightsArray(size);\n\n  // Node-level\n  this.loops = new WeightsArray(graph.order);\n  this.starts = new NeighborhoodPointerArray(graph.order + 1);\n  this.belongings = new NodesPointerArray(graph.order);\n  this.dendrogram = [];\n  this.mapping = null;\n\n  // Community-level\n  this.counts = new NodesPointerArray(graph.order);\n  this.unused = new NodesPointerArray(graph.order);\n  this.totalWeights = new WeightsArray(graph.order);\n\n  var ids = {};\n\n  var weight;\n\n  var i = 0,\n    n = 0;\n\n  var self = this;\n\n  graph.forEachNode(function (node) {\n    self.nodes[i] = node;\n\n    // Node map to index\n    ids[node] = i;\n\n    // Initializing starts\n    n += graph.undirectedDegreeWithoutSelfLoops(node);\n    self.starts[i] = n;\n\n    // Belongings\n    self.belongings[i] = i;\n    self.counts[i] = 1;\n    i++;\n  });\n\n  // Single sweep over the edges\n  graph.forEachEdge(function (edge, attr, source, target, sa, ta, u) {\n    weight = getEdgeWeight(edge, attr, source, target, sa, ta, u);\n\n    source = ids[source];\n    target = ids[target];\n\n    self.M += weight;\n\n    // Self loop?\n    if (source === target) {\n      self.totalWeights[source] += weight * 2;\n      self.loops[source] = weight * 2;\n    } else {\n      self.totalWeights[source] += weight;\n      self.totalWeights[target] += weight;\n\n      var startSource = --self.starts[source],\n        startTarget = --self.starts[target];\n\n      self.neighborhood[startSource] = target;\n      self.neighborhood[startTarget] = source;\n\n      self.weights[startSource] = weight;\n      self.weights[startTarget] = weight;\n    }\n  });\n\n  this.starts[i] = this.E;\n\n  if (this.keepDendrogram) this.dendrogram.push(this.belongings.slice());\n  else this.mapping = this.belongings.slice();\n}\n\nUndirectedLouvainIndex.prototype.isolate = function (i, degree) {\n  var currentCommunity = this.belongings[i];\n\n  // The node is already isolated\n  if (this.counts[currentCommunity] === 1) return currentCommunity;\n\n  var newCommunity = this.unused[--this.U];\n\n  var loops = this.loops[i];\n\n  this.totalWeights[currentCommunity] -= degree + loops;\n  this.totalWeights[newCommunity] += degree + loops;\n\n  this.belongings[i] = newCommunity;\n\n  this.counts[currentCommunity]--;\n  this.counts[newCommunity]++;\n\n  return newCommunity;\n};\n\nUndirectedLouvainIndex.prototype.move = function (i, degree, targetCommunity) {\n  var currentCommunity = this.belongings[i],\n    loops = this.loops[i];\n\n  this.totalWeights[currentCommunity] -= degree + loops;\n  this.totalWeights[targetCommunity] += degree + loops;\n\n  this.belongings[i] = targetCommunity;\n\n  var nowEmpty = this.counts[currentCommunity]-- === 1;\n  this.counts[targetCommunity]++;\n\n  if (nowEmpty) this.unused[this.U++] = currentCommunity;\n};\n\nUndirectedLouvainIndex.prototype.computeNodeDegree = function (i) {\n  var o, l, weight;\n\n  var degree = 0;\n\n  for (o = this.starts[i], l = this.starts[i + 1]; o < l; o++) {\n    weight = this.weights[o];\n\n    degree += weight;\n  }\n\n  return degree;\n};\n\nUndirectedLouvainIndex.prototype.expensiveIsolate = function (i) {\n  var degree = this.computeNodeDegree(i);\n  return this.isolate(i, degree);\n};\n\nUndirectedLouvainIndex.prototype.expensiveMove = function (i, ci) {\n  var degree = this.computeNodeDegree(i);\n  this.move(i, degree, ci);\n};\n\nUndirectedLouvainIndex.prototype.zoomOut = function () {\n  var inducedGraph = new Array(this.C - this.U),\n    newLabels = {};\n\n  var N = this.nodes.length;\n\n  var C = 0,\n    E = 0;\n\n  var i, j, l, m, n, ci, cj, data, adj;\n\n  // Renumbering communities\n  for (i = 0, l = this.C; i < l; i++) {\n    ci = this.belongings[i];\n\n    if (!(ci in newLabels)) {\n      newLabels[ci] = C;\n      inducedGraph[C] = {\n        adj: {},\n        totalWeights: this.totalWeights[ci],\n        internalWeights: 0\n      };\n      C++;\n    }\n\n    // We do this to otpimize the number of lookups in next loop\n    this.belongings[i] = newLabels[ci];\n  }\n\n  // Actualizing dendrogram\n  var currentLevel, nextLevel;\n\n  if (this.keepDendrogram) {\n    currentLevel = this.dendrogram[this.level];\n    nextLevel = new (typed.getPointerArray(C))(N);\n\n    for (i = 0; i < N; i++) nextLevel[i] = this.belongings[currentLevel[i]];\n\n    this.dendrogram.push(nextLevel);\n  } else {\n    for (i = 0; i < N; i++) this.mapping[i] = this.belongings[this.mapping[i]];\n  }\n\n  // Building induced graph matrix\n  for (i = 0, l = this.C; i < l; i++) {\n    ci = this.belongings[i];\n\n    data = inducedGraph[ci];\n    adj = data.adj;\n    data.internalWeights += this.loops[i];\n\n    for (j = this.starts[i], m = this.starts[i + 1]; j < m; j++) {\n      n = this.neighborhood[j];\n      cj = this.belongings[n];\n\n      if (ci === cj) {\n        data.internalWeights += this.weights[j];\n        continue;\n      }\n\n      if (!(cj in adj)) adj[cj] = 0;\n\n      adj[cj] += this.weights[j];\n    }\n  }\n\n  // Rewriting neighborhood\n  this.C = C;\n\n  n = 0;\n\n  for (ci = 0; ci < C; ci++) {\n    data = inducedGraph[ci];\n    adj = data.adj;\n\n    ci = +ci;\n\n    this.totalWeights[ci] = data.totalWeights;\n    this.loops[ci] = data.internalWeights;\n    this.counts[ci] = 1;\n\n    this.starts[ci] = n;\n    this.belongings[ci] = ci;\n\n    for (cj in adj) {\n      this.neighborhood[n] = +cj;\n      this.weights[n] = adj[cj];\n\n      E++;\n      n++;\n    }\n  }\n\n  this.starts[C] = E;\n\n  this.E = E;\n  this.U = 0;\n  this.level++;\n\n  return newLabels;\n};\n\nUndirectedLouvainIndex.prototype.modularity = function () {\n  var ci, cj, i, j, m;\n\n  var Q = 0;\n  var M2 = this.M * 2;\n  var internalWeights = new Float64Array(this.C);\n\n  for (i = 0; i < this.C; i++) {\n    ci = this.belongings[i];\n    internalWeights[ci] += this.loops[i];\n\n    for (j = this.starts[i], m = this.starts[i + 1]; j < m; j++) {\n      cj = this.belongings[this.neighborhood[j]];\n\n      if (ci !== cj) continue;\n\n      internalWeights[ci] += this.weights[j];\n    }\n  }\n\n  for (i = 0; i < this.C; i++) {\n    Q +=\n      internalWeights[i] / M2 -\n      Math.pow(this.totalWeights[i] / M2, 2) * this.resolution;\n  }\n\n  return Q;\n};\n\nUndirectedLouvainIndex.prototype.delta = function (\n  i,\n  degree,\n  targetCommunityDegree,\n  targetCommunity\n) {\n  var M = this.M;\n\n  var targetCommunityTotalWeight = this.totalWeights[targetCommunity];\n\n  degree += this.loops[i];\n\n  return (\n    targetCommunityDegree / M - // NOTE: formula is a bit different here because targetCommunityDegree is passed without * 2\n    (targetCommunityTotalWeight * degree * this.resolution) / (2 * M * M)\n  );\n};\n\nUndirectedLouvainIndex.prototype.deltaWithOwnCommunity = function (\n  i,\n  degree,\n  targetCommunityDegree,\n  targetCommunity\n) {\n  var M = this.M;\n\n  var targetCommunityTotalWeight = this.totalWeights[targetCommunity];\n\n  degree += this.loops[i];\n\n  return (\n    targetCommunityDegree / M - // NOTE: formula is a bit different here because targetCommunityDegree is passed without * 2\n    ((targetCommunityTotalWeight - degree) * degree * this.resolution) /\n      (2 * M * M)\n  );\n};\n\n// NOTE: this is just a faster but equivalent version of #.delta\n// It is just off by a constant factor and is just faster to compute\nUndirectedLouvainIndex.prototype.fastDelta = function (\n  i,\n  degree,\n  targetCommunityDegree,\n  targetCommunity\n) {\n  var M = this.M;\n\n  var targetCommunityTotalWeight = this.totalWeights[targetCommunity];\n\n  degree += this.loops[i];\n\n  return (\n    targetCommunityDegree -\n    (degree * targetCommunityTotalWeight * this.resolution) / (2 * M)\n  );\n};\n\nUndirectedLouvainIndex.prototype.fastDeltaWithOwnCommunity = function (\n  i,\n  degree,\n  targetCommunityDegree,\n  targetCommunity\n) {\n  var M = this.M;\n\n  var targetCommunityTotalWeight = this.totalWeights[targetCommunity];\n\n  degree += this.loops[i];\n\n  return (\n    targetCommunityDegree -\n    (degree * (targetCommunityTotalWeight - degree) * this.resolution) / (2 * M)\n  );\n};\n\nUndirectedLouvainIndex.prototype.bounds = function (i) {\n  return [this.starts[i], this.starts[i + 1]];\n};\n\nUndirectedLouvainIndex.prototype.project = function () {\n  var self = this;\n\n  var projection = {};\n\n  self.nodes.slice(0, this.C).forEach(function (node, i) {\n    projection[node] = Array.from(\n      self.neighborhood.slice(self.starts[i], self.starts[i + 1])\n    ).map(function (j) {\n      return self.nodes[j];\n    });\n  });\n\n  return projection;\n};\n\nUndirectedLouvainIndex.prototype.collect = function (level) {\n  if (arguments.length < 1) level = this.level;\n\n  var o = {};\n\n  var mapping = this.keepDendrogram ? this.dendrogram[level] : this.mapping;\n\n  var i, l;\n\n  for (i = 0, l = mapping.length; i < l; i++) o[this.nodes[i]] = mapping[i];\n\n  return o;\n};\n\nUndirectedLouvainIndex.prototype.assign = function (prop, level) {\n  if (arguments.length < 2) level = this.level;\n\n  var mapping = this.keepDendrogram ? this.dendrogram[level] : this.mapping;\n\n  var i, l;\n\n  for (i = 0, l = mapping.length; i < l; i++)\n    this.graph.setNodeAttribute(this.nodes[i], prop, mapping[i]);\n};\n\nUndirectedLouvainIndex.prototype[INSPECT] = function () {\n  var proxy = {};\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: UndirectedLouvainIndex,\n    enumerable: false\n  });\n\n  proxy.C = this.C;\n  proxy.M = this.M;\n  proxy.E = this.E;\n  proxy.U = this.U;\n  proxy.resolution = this.resolution;\n  proxy.level = this.level;\n  proxy.nodes = this.nodes;\n  proxy.starts = this.starts.slice(0, proxy.C + 1);\n\n  var eTruncated = ['neighborhood', 'weights'];\n  var cTruncated = ['counts', 'loops', 'belongings', 'totalWeights'];\n\n  var self = this;\n\n  eTruncated.forEach(function (key) {\n    proxy[key] = self[key].slice(0, proxy.E);\n  });\n\n  cTruncated.forEach(function (key) {\n    proxy[key] = self[key].slice(0, proxy.C);\n  });\n\n  proxy.unused = this.unused.slice(0, this.U);\n\n  if (this.keepDendrogram) proxy.dendrogram = this.dendrogram;\n  else proxy.mapping = this.mapping;\n\n  return proxy;\n};\n\nfunction DirectedLouvainIndex(graph, options) {\n  // Solving options\n  options = resolveDefaults(options, DEFAULTS);\n\n  var resolution = options.resolution;\n\n  // Weight getters\n  var getEdgeWeight = createEdgeWeightGetter(options.getEdgeWeight).fromEntry;\n\n  // Building the index\n  var size = (graph.size - graph.selfLoopCount) * 2;\n\n  var NeighborhoodPointerArray = typed.getPointerArray(size);\n  var NodesPointerArray = typed.getPointerArray(graph.order + 1);\n\n  // NOTE: this memory optimization can yield overflow deopt when computing deltas\n  var WeightsArray = options.getEdgeWeight\n    ? Float64Array\n    : typed.getPointerArray(graph.size * 2);\n\n  // Properties\n  this.C = graph.order;\n  this.M = 0;\n  this.E = size;\n  this.U = 0;\n  this.resolution = resolution;\n  this.level = 0;\n  this.graph = graph;\n  this.nodes = new Array(graph.order);\n  this.keepDendrogram = options.keepDendrogram;\n\n  // Edge-level\n  // NOTE: edges are stored out then in, in this order\n  this.neighborhood = new NodesPointerArray(size);\n  this.weights = new WeightsArray(size);\n\n  // Node-level\n  this.loops = new WeightsArray(graph.order);\n  this.starts = new NeighborhoodPointerArray(graph.order + 1);\n  this.offsets = new NeighborhoodPointerArray(graph.order);\n  this.belongings = new NodesPointerArray(graph.order);\n  this.dendrogram = [];\n\n  // Community-level\n  this.counts = new NodesPointerArray(graph.order);\n  this.unused = new NodesPointerArray(graph.order);\n  this.totalInWeights = new WeightsArray(graph.order);\n  this.totalOutWeights = new WeightsArray(graph.order);\n\n  var ids = {};\n\n  var weight;\n\n  var i = 0,\n    n = 0;\n\n  var self = this;\n\n  graph.forEachNode(function (node) {\n    self.nodes[i] = node;\n\n    // Node map to index\n    ids[node] = i;\n\n    // Initializing starts & offsets\n    n += graph.outDegreeWithoutSelfLoops(node);\n    self.starts[i] = n;\n\n    n += graph.inDegreeWithoutSelfLoops(node);\n    self.offsets[i] = n;\n\n    // Belongings\n    self.belongings[i] = i;\n    self.counts[i] = 1;\n    i++;\n  });\n\n  // Single sweep over the edges\n  graph.forEachEdge(function (edge, attr, source, target, sa, ta, u) {\n    weight = getEdgeWeight(edge, attr, source, target, sa, ta, u);\n\n    source = ids[source];\n    target = ids[target];\n\n    self.M += weight;\n\n    // Self loop?\n    if (source === target) {\n      self.loops[source] += weight;\n      self.totalInWeights[source] += weight;\n      self.totalOutWeights[source] += weight;\n    } else {\n      self.totalOutWeights[source] += weight;\n      self.totalInWeights[target] += weight;\n\n      var startSource = --self.starts[source],\n        startTarget = --self.offsets[target];\n\n      self.neighborhood[startSource] = target;\n      self.neighborhood[startTarget] = source;\n\n      self.weights[startSource] = weight;\n      self.weights[startTarget] = weight;\n    }\n  });\n\n  this.starts[i] = this.E;\n\n  if (this.keepDendrogram) this.dendrogram.push(this.belongings.slice());\n  else this.mapping = this.belongings.slice();\n}\n\nDirectedLouvainIndex.prototype.bounds = UndirectedLouvainIndex.prototype.bounds;\n\nDirectedLouvainIndex.prototype.inBounds = function (i) {\n  return [this.offsets[i], this.starts[i + 1]];\n};\n\nDirectedLouvainIndex.prototype.outBounds = function (i) {\n  return [this.starts[i], this.offsets[i]];\n};\n\nDirectedLouvainIndex.prototype.project =\n  UndirectedLouvainIndex.prototype.project;\n\nDirectedLouvainIndex.prototype.projectIn = function () {\n  var self = this;\n\n  var projection = {};\n\n  self.nodes.slice(0, this.C).forEach(function (node, i) {\n    projection[node] = Array.from(\n      self.neighborhood.slice(self.offsets[i], self.starts[i + 1])\n    ).map(function (j) {\n      return self.nodes[j];\n    });\n  });\n\n  return projection;\n};\n\nDirectedLouvainIndex.prototype.projectOut = function () {\n  var self = this;\n\n  var projection = {};\n\n  self.nodes.slice(0, this.C).forEach(function (node, i) {\n    projection[node] = Array.from(\n      self.neighborhood.slice(self.starts[i], self.offsets[i])\n    ).map(function (j) {\n      return self.nodes[j];\n    });\n  });\n\n  return projection;\n};\n\nDirectedLouvainIndex.prototype.isolate = function (i, inDegree, outDegree) {\n  var currentCommunity = this.belongings[i];\n\n  // The node is already isolated\n  if (this.counts[currentCommunity] === 1) return currentCommunity;\n\n  var newCommunity = this.unused[--this.U];\n\n  var loops = this.loops[i];\n\n  this.totalInWeights[currentCommunity] -= inDegree + loops;\n  this.totalInWeights[newCommunity] += inDegree + loops;\n\n  this.totalOutWeights[currentCommunity] -= outDegree + loops;\n  this.totalOutWeights[newCommunity] += outDegree + loops;\n\n  this.belongings[i] = newCommunity;\n\n  this.counts[currentCommunity]--;\n  this.counts[newCommunity]++;\n\n  return newCommunity;\n};\n\nDirectedLouvainIndex.prototype.move = function (\n  i,\n  inDegree,\n  outDegree,\n  targetCommunity\n) {\n  var currentCommunity = this.belongings[i],\n    loops = this.loops[i];\n\n  this.totalInWeights[currentCommunity] -= inDegree + loops;\n  this.totalInWeights[targetCommunity] += inDegree + loops;\n\n  this.totalOutWeights[currentCommunity] -= outDegree + loops;\n  this.totalOutWeights[targetCommunity] += outDegree + loops;\n\n  this.belongings[i] = targetCommunity;\n\n  var nowEmpty = this.counts[currentCommunity]-- === 1;\n  this.counts[targetCommunity]++;\n\n  if (nowEmpty) this.unused[this.U++] = currentCommunity;\n};\n\nDirectedLouvainIndex.prototype.computeNodeInDegree = function (i) {\n  var o, l, weight;\n\n  var inDegree = 0;\n\n  for (o = this.offsets[i], l = this.starts[i + 1]; o < l; o++) {\n    weight = this.weights[o];\n\n    inDegree += weight;\n  }\n\n  return inDegree;\n};\n\nDirectedLouvainIndex.prototype.computeNodeOutDegree = function (i) {\n  var o, l, weight;\n\n  var outDegree = 0;\n\n  for (o = this.starts[i], l = this.offsets[i]; o < l; o++) {\n    weight = this.weights[o];\n\n    outDegree += weight;\n  }\n\n  return outDegree;\n};\n\nDirectedLouvainIndex.prototype.expensiveMove = function (i, ci) {\n  var inDegree = this.computeNodeInDegree(i),\n    outDegree = this.computeNodeOutDegree(i);\n\n  this.move(i, inDegree, outDegree, ci);\n};\n\nDirectedLouvainIndex.prototype.zoomOut = function () {\n  var inducedGraph = new Array(this.C - this.U),\n    newLabels = {};\n\n  var N = this.nodes.length;\n\n  var C = 0,\n    E = 0;\n\n  var i, j, l, m, n, ci, cj, data, offset, out, adj, inAdj, outAdj;\n\n  // Renumbering communities\n  for (i = 0, l = this.C; i < l; i++) {\n    ci = this.belongings[i];\n\n    if (!(ci in newLabels)) {\n      newLabels[ci] = C;\n      inducedGraph[C] = {\n        inAdj: {},\n        outAdj: {},\n        totalInWeights: this.totalInWeights[ci],\n        totalOutWeights: this.totalOutWeights[ci],\n        internalWeights: 0\n      };\n      C++;\n    }\n\n    // We do this to otpimize the number of lookups in next loop\n    this.belongings[i] = newLabels[ci];\n  }\n\n  // Actualizing dendrogram\n  var currentLevel, nextLevel;\n\n  if (this.keepDendrogram) {\n    currentLevel = this.dendrogram[this.level];\n    nextLevel = new (typed.getPointerArray(C))(N);\n\n    for (i = 0; i < N; i++) nextLevel[i] = this.belongings[currentLevel[i]];\n\n    this.dendrogram.push(nextLevel);\n  } else {\n    for (i = 0; i < N; i++) this.mapping[i] = this.belongings[this.mapping[i]];\n  }\n\n  // Building induced graph matrix\n  for (i = 0, l = this.C; i < l; i++) {\n    ci = this.belongings[i];\n    offset = this.offsets[i];\n\n    data = inducedGraph[ci];\n    inAdj = data.inAdj;\n    outAdj = data.outAdj;\n    data.internalWeights += this.loops[i];\n\n    for (j = this.starts[i], m = this.starts[i + 1]; j < m; j++) {\n      n = this.neighborhood[j];\n      cj = this.belongings[n];\n      out = j < offset;\n\n      adj = out ? outAdj : inAdj;\n\n      if (ci === cj) {\n        if (out) data.internalWeights += this.weights[j];\n\n        continue;\n      }\n\n      if (!(cj in adj)) adj[cj] = 0;\n\n      adj[cj] += this.weights[j];\n    }\n  }\n\n  // Rewriting neighborhood\n  this.C = C;\n\n  n = 0;\n\n  for (ci = 0; ci < C; ci++) {\n    data = inducedGraph[ci];\n    inAdj = data.inAdj;\n    outAdj = data.outAdj;\n\n    ci = +ci;\n\n    this.totalInWeights[ci] = data.totalInWeights;\n    this.totalOutWeights[ci] = data.totalOutWeights;\n    this.loops[ci] = data.internalWeights;\n    this.counts[ci] = 1;\n\n    this.starts[ci] = n;\n    this.belongings[ci] = ci;\n\n    for (cj in outAdj) {\n      this.neighborhood[n] = +cj;\n      this.weights[n] = outAdj[cj];\n\n      E++;\n      n++;\n    }\n\n    this.offsets[ci] = n;\n\n    for (cj in inAdj) {\n      this.neighborhood[n] = +cj;\n      this.weights[n] = inAdj[cj];\n\n      E++;\n      n++;\n    }\n  }\n\n  this.starts[C] = E;\n\n  this.E = E;\n  this.U = 0;\n  this.level++;\n\n  return newLabels;\n};\n\nDirectedLouvainIndex.prototype.modularity = function () {\n  var ci, cj, i, j, m;\n\n  var Q = 0;\n  var M = this.M;\n  var internalWeights = new Float64Array(this.C);\n\n  for (i = 0; i < this.C; i++) {\n    ci = this.belongings[i];\n    internalWeights[ci] += this.loops[i];\n\n    for (j = this.starts[i], m = this.offsets[i]; j < m; j++) {\n      cj = this.belongings[this.neighborhood[j]];\n\n      if (ci !== cj) continue;\n\n      internalWeights[ci] += this.weights[j];\n    }\n  }\n\n  for (i = 0; i < this.C; i++)\n    Q +=\n      internalWeights[i] / M -\n      ((this.totalInWeights[i] * this.totalOutWeights[i]) / Math.pow(M, 2)) *\n        this.resolution;\n\n  return Q;\n};\n\nDirectedLouvainIndex.prototype.delta = function (\n  i,\n  inDegree,\n  outDegree,\n  targetCommunityDegree,\n  targetCommunity\n) {\n  var M = this.M;\n\n  var targetCommunityTotalInWeight = this.totalInWeights[targetCommunity],\n    targetCommunityTotalOutWeight = this.totalOutWeights[targetCommunity];\n\n  var loops = this.loops[i];\n\n  inDegree += loops;\n  outDegree += loops;\n\n  return (\n    targetCommunityDegree / M -\n    ((outDegree * targetCommunityTotalInWeight +\n      inDegree * targetCommunityTotalOutWeight) *\n      this.resolution) /\n      (M * M)\n  );\n};\n\nDirectedLouvainIndex.prototype.deltaWithOwnCommunity = function (\n  i,\n  inDegree,\n  outDegree,\n  targetCommunityDegree,\n  targetCommunity\n) {\n  var M = this.M;\n\n  var targetCommunityTotalInWeight = this.totalInWeights[targetCommunity],\n    targetCommunityTotalOutWeight = this.totalOutWeights[targetCommunity];\n\n  var loops = this.loops[i];\n\n  inDegree += loops;\n  outDegree += loops;\n\n  return (\n    targetCommunityDegree / M -\n    ((outDegree * (targetCommunityTotalInWeight - inDegree) +\n      inDegree * (targetCommunityTotalOutWeight - outDegree)) *\n      this.resolution) /\n      (M * M)\n  );\n};\n\nDirectedLouvainIndex.prototype.collect =\n  UndirectedLouvainIndex.prototype.collect;\nDirectedLouvainIndex.prototype.assign = UndirectedLouvainIndex.prototype.assign;\n\nDirectedLouvainIndex.prototype[INSPECT] = function () {\n  var proxy = {};\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: DirectedLouvainIndex,\n    enumerable: false\n  });\n\n  proxy.C = this.C;\n  proxy.M = this.M;\n  proxy.E = this.E;\n  proxy.U = this.U;\n  proxy.resolution = this.resolution;\n  proxy.level = this.level;\n  proxy.nodes = this.nodes;\n  proxy.starts = this.starts.slice(0, proxy.C + 1);\n\n  var eTruncated = ['neighborhood', 'weights'];\n  var cTruncated = [\n    'counts',\n    'offsets',\n    'loops',\n    'belongings',\n    'totalInWeights',\n    'totalOutWeights'\n  ];\n\n  var self = this;\n\n  eTruncated.forEach(function (key) {\n    proxy[key] = self[key].slice(0, proxy.E);\n  });\n\n  cTruncated.forEach(function (key) {\n    proxy[key] = self[key].slice(0, proxy.C);\n  });\n\n  proxy.unused = this.unused.slice(0, this.U);\n\n  if (this.keepDendrogram) proxy.dendrogram = this.dendrogram;\n  else proxy.mapping = this.mapping;\n\n  return proxy;\n};\n\nexports.UndirectedLouvainIndex = UndirectedLouvainIndex;\nexports.DirectedLouvainIndex = DirectedLouvainIndex;\n","/**\n * Graphology Louvain Algorithm\n * =============================\n *\n * JavaScript implementation of the famous Louvain community detection\n * algorithm for graphology.\n *\n * [Articles]\n * M. E. J. Newman, « Modularity and community structure in networks »,\n * Proc. Natl. Acad. Sci. USA, vol. 103, no 23, 2006, p. 8577–8582\n * https://dx.doi.org/10.1073%2Fpnas.0601602103\n *\n * Newman, M. E. J. « Community detection in networks: Modularity optimization\n * and maximum likelihood are equivalent ». Physical Review E, vol. 94, no 5,\n * novembre 2016, p. 052315. arXiv.org, doi:10.1103/PhysRevE.94.052315.\n * https://arxiv.org/pdf/1606.02319.pdf\n *\n * Blondel, Vincent D., et al. « Fast unfolding of communities in large\n * networks ». Journal of Statistical Mechanics: Theory and Experiment,\n * vol. 2008, no 10, octobre 2008, p. P10008. DOI.org (Crossref),\n * doi:10.1088/1742-5468/2008/10/P10008.\n * https://arxiv.org/pdf/0803.0476.pdf\n *\n * Nicolas Dugué, Anthony Perez. Directed Louvain: maximizing modularity in\n * directed networks. [Research Report] Université d’Orléans. 2015. hal-01231784\n * https://hal.archives-ouvertes.fr/hal-01231784\n *\n * R. Lambiotte, J.-C. Delvenne and M. Barahona. Laplacian Dynamics and\n * Multiscale Modular Structure in Networks,\n * doi:10.1109/TNSE.2015.2391998.\n * https://arxiv.org/abs/0812.1770\n *\n * Traag, V. A., et al. « From Louvain to Leiden: Guaranteeing Well-Connected\n * Communities ». Scientific Reports, vol. 9, no 1, décembre 2019, p. 5233.\n * DOI.org (Crossref), doi:10.1038/s41598-019-41695-z.\n * https://arxiv.org/abs/1810.08473\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\nvar inferType = require('graphology-utils/infer-type');\nvar SparseMap = require('mnemonist/sparse-map');\nvar SparseQueueSet = require('mnemonist/sparse-queue-set');\nvar createRandomIndex = require('pandemonium/random-index').createRandomIndex;\n\nvar indices = require('graphology-indices/louvain');\n\nvar UndirectedLouvainIndex = indices.UndirectedLouvainIndex;\nvar DirectedLouvainIndex = indices.DirectedLouvainIndex;\n\nvar DEFAULTS = {\n  nodeCommunityAttribute: 'community',\n  getEdgeWeight: 'weight',\n  fastLocalMoves: true,\n  randomWalk: true,\n  resolution: 1,\n  rng: Math.random\n};\n\nfunction addWeightToCommunity(map, community, weight) {\n  var currentWeight = map.get(community);\n\n  if (typeof currentWeight === 'undefined') currentWeight = 0;\n\n  currentWeight += weight;\n\n  map.set(community, currentWeight);\n}\n\nvar EPSILON = 1e-10;\n\nfunction tieBreaker(\n  bestCommunity,\n  currentCommunity,\n  targetCommunity,\n  delta,\n  bestDelta\n) {\n  if (Math.abs(delta - bestDelta) < EPSILON) {\n    if (bestCommunity === currentCommunity) {\n      return false;\n    } else {\n      return targetCommunity > bestCommunity;\n    }\n  } else if (delta > bestDelta) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction undirectedLouvain(detailed, graph, options) {\n  var index = new UndirectedLouvainIndex(graph, {\n    getEdgeWeight: options.getEdgeWeight,\n    keepDendrogram: detailed,\n    resolution: options.resolution\n  });\n\n  var randomIndex = createRandomIndex(options.rng);\n\n  // State variables\n  var moveWasMade = true,\n    localMoveWasMade = true;\n\n  // Communities\n  var currentCommunity, targetCommunity;\n  var communities = new SparseMap(Float64Array, index.C);\n\n  // Traversal\n  var queue, start, end, weight, ci, ri, s, i, j, l;\n\n  // Metrics\n  var degree, targetCommunityDegree;\n\n  // Moves\n  var bestCommunity, bestDelta, deltaIsBetter, delta;\n\n  // Details\n  var deltaComputations = 0,\n    nodesVisited = 0,\n    moves = [],\n    localMoves,\n    currentMoves;\n\n  if (options.fastLocalMoves) queue = new SparseQueueSet(index.C);\n\n  while (moveWasMade) {\n    l = index.C;\n\n    moveWasMade = false;\n    localMoveWasMade = true;\n\n    if (options.fastLocalMoves) {\n      currentMoves = 0;\n\n      // Traversal of the graph\n      ri = options.randomWalk ? randomIndex(l) : 0;\n\n      for (s = 0; s < l; s++, ri++) {\n        i = ri % l;\n        queue.enqueue(i);\n      }\n\n      while (queue.size !== 0) {\n        i = queue.dequeue();\n        nodesVisited++;\n\n        degree = 0;\n        communities.clear();\n\n        currentCommunity = index.belongings[i];\n\n        start = index.starts[i];\n        end = index.starts[i + 1];\n\n        // Traversing neighbors\n        for (; start < end; start++) {\n          j = index.neighborhood[start];\n          weight = index.weights[start];\n\n          targetCommunity = index.belongings[j];\n\n          // Incrementing metrics\n          degree += weight;\n          addWeightToCommunity(communities, targetCommunity, weight);\n        }\n\n        // Finding best community to move to\n        bestDelta = index.fastDeltaWithOwnCommunity(\n          i,\n          degree,\n          communities.get(currentCommunity) || 0,\n          currentCommunity\n        );\n        bestCommunity = currentCommunity;\n\n        for (ci = 0; ci < communities.size; ci++) {\n          targetCommunity = communities.dense[ci];\n\n          if (targetCommunity === currentCommunity) continue;\n\n          targetCommunityDegree = communities.vals[ci];\n\n          deltaComputations++;\n\n          delta = index.fastDelta(\n            i,\n            degree,\n            targetCommunityDegree,\n            targetCommunity\n          );\n\n          deltaIsBetter = tieBreaker(\n            bestCommunity,\n            currentCommunity,\n            targetCommunity,\n            delta,\n            bestDelta\n          );\n\n          if (deltaIsBetter) {\n            bestDelta = delta;\n            bestCommunity = targetCommunity;\n          }\n        }\n\n        // Should we move the node?\n        if (bestDelta < 0) {\n          // NOTE: this is to allow nodes to move back to their own singleton\n          // This code however only deals with modularity (e.g. the condition\n          // about bestDelta < 0, which is the delta for moving back to\n          // singleton wrt. modularity). Indeed, rarely, the Louvain\n          // algorithm can produce such cases when a node would be better in\n          // a singleton that in its own community when considering self loops\n          // or a resolution != 1. In this case, delta with your own community\n          // is indeed less than 0. To handle different metrics, one should\n          // consider computing the delta for going back to singleton because\n          // it might not be 0.\n          bestCommunity = index.isolate(i, degree);\n\n          // If the node was already in a singleton community, we don't consider\n          // a move was made\n          if (bestCommunity === currentCommunity) continue;\n        } else {\n          // If no move was made, we continue to next node\n          if (bestCommunity === currentCommunity) {\n            continue;\n          } else {\n            // Actually moving the node to a new community\n            index.move(i, degree, bestCommunity);\n          }\n        }\n\n        moveWasMade = true;\n        currentMoves++;\n\n        // Adding neighbors from other communities to the queue\n        start = index.starts[i];\n        end = index.starts[i + 1];\n\n        for (; start < end; start++) {\n          j = index.neighborhood[start];\n          targetCommunity = index.belongings[j];\n\n          if (targetCommunity !== bestCommunity) queue.enqueue(j);\n        }\n      }\n\n      moves.push(currentMoves);\n    } else {\n      localMoves = [];\n      moves.push(localMoves);\n\n      // Traditional Louvain iterative traversal of the graph\n      while (localMoveWasMade) {\n        localMoveWasMade = false;\n        currentMoves = 0;\n\n        ri = options.randomWalk ? randomIndex(l) : 0;\n\n        for (s = 0; s < l; s++, ri++) {\n          i = ri % l;\n\n          nodesVisited++;\n\n          degree = 0;\n          communities.clear();\n\n          currentCommunity = index.belongings[i];\n\n          start = index.starts[i];\n          end = index.starts[i + 1];\n\n          // Traversing neighbors\n          for (; start < end; start++) {\n            j = index.neighborhood[start];\n            weight = index.weights[start];\n\n            targetCommunity = index.belongings[j];\n\n            // Incrementing metrics\n            degree += weight;\n            addWeightToCommunity(communities, targetCommunity, weight);\n          }\n\n          // Finding best community to move to\n          bestDelta = index.fastDeltaWithOwnCommunity(\n            i,\n            degree,\n            communities.get(currentCommunity) || 0,\n            currentCommunity\n          );\n          bestCommunity = currentCommunity;\n\n          for (ci = 0; ci < communities.size; ci++) {\n            targetCommunity = communities.dense[ci];\n\n            if (targetCommunity === currentCommunity) continue;\n\n            targetCommunityDegree = communities.vals[ci];\n\n            deltaComputations++;\n\n            delta = index.fastDelta(\n              i,\n              degree,\n              targetCommunityDegree,\n              targetCommunity\n            );\n\n            deltaIsBetter = tieBreaker(\n              bestCommunity,\n              currentCommunity,\n              targetCommunity,\n              delta,\n              bestDelta\n            );\n\n            if (deltaIsBetter) {\n              bestDelta = delta;\n              bestCommunity = targetCommunity;\n            }\n          }\n\n          // Should we move the node?\n          if (bestDelta < 0) {\n            // NOTE: this is to allow nodes to move back to their own singleton\n            // This code however only deals with modularity (e.g. the condition\n            // about bestDelta < 0, which is the delta for moving back to\n            // singleton wrt. modularity). Indeed, rarely, the Louvain\n            // algorithm can produce such cases when a node would be better in\n            // a singleton that in its own community when considering self loops\n            // or a resolution != 1. In this case, delta with your own community\n            // is indeed less than 0. To handle different metrics, one should\n            // consider computing the delta for going back to singleton because\n            // it might not be 0.\n            bestCommunity = index.isolate(i, degree);\n\n            // If the node was already in a singleton community, we don't consider\n            // a move was made\n            if (bestCommunity === currentCommunity) continue;\n          } else {\n            // If no move was made, we continue to next node\n            if (bestCommunity === currentCommunity) {\n              continue;\n            } else {\n              // Actually moving the node to a new community\n              index.move(i, degree, bestCommunity);\n            }\n          }\n\n          localMoveWasMade = true;\n          currentMoves++;\n        }\n\n        localMoves.push(currentMoves);\n\n        moveWasMade = localMoveWasMade || moveWasMade;\n      }\n    }\n\n    // We continue working on the induced graph\n    if (moveWasMade) index.zoomOut();\n  }\n\n  var results = {\n    index: index,\n    deltaComputations: deltaComputations,\n    nodesVisited: nodesVisited,\n    moves: moves\n  };\n\n  return results;\n}\n\nfunction directedLouvain(detailed, graph, options) {\n  var index = new DirectedLouvainIndex(graph, {\n    getEdgeWeight: options.getEdgeWeight,\n    keepDendrogram: detailed,\n    resolution: options.resolution\n  });\n\n  var randomIndex = createRandomIndex(options.rng);\n\n  // State variables\n  var moveWasMade = true,\n    localMoveWasMade = true;\n\n  // Communities\n  var currentCommunity, targetCommunity;\n  var communities = new SparseMap(Float64Array, index.C);\n\n  // Traversal\n  var queue, start, end, offset, out, weight, ci, ri, s, i, j, l;\n\n  // Metrics\n  var inDegree, outDegree, targetCommunityDegree;\n\n  // Moves\n  var bestCommunity, bestDelta, deltaIsBetter, delta;\n\n  // Details\n  var deltaComputations = 0,\n    nodesVisited = 0,\n    moves = [],\n    localMoves,\n    currentMoves;\n\n  if (options.fastLocalMoves) queue = new SparseQueueSet(index.C);\n\n  while (moveWasMade) {\n    l = index.C;\n\n    moveWasMade = false;\n    localMoveWasMade = true;\n\n    if (options.fastLocalMoves) {\n      currentMoves = 0;\n\n      // Traversal of the graph\n      ri = options.randomWalk ? randomIndex(l) : 0;\n\n      for (s = 0; s < l; s++, ri++) {\n        i = ri % l;\n        queue.enqueue(i);\n      }\n\n      while (queue.size !== 0) {\n        i = queue.dequeue();\n        nodesVisited++;\n\n        inDegree = 0;\n        outDegree = 0;\n        communities.clear();\n\n        currentCommunity = index.belongings[i];\n\n        start = index.starts[i];\n        end = index.starts[i + 1];\n        offset = index.offsets[i];\n\n        // Traversing neighbors\n        for (; start < end; start++) {\n          out = start < offset;\n          j = index.neighborhood[start];\n          weight = index.weights[start];\n\n          targetCommunity = index.belongings[j];\n\n          // Incrementing metrics\n          if (out) outDegree += weight;\n          else inDegree += weight;\n\n          addWeightToCommunity(communities, targetCommunity, weight);\n        }\n\n        // Finding best community to move to\n        bestDelta = index.deltaWithOwnCommunity(\n          i,\n          inDegree,\n          outDegree,\n          communities.get(currentCommunity) || 0,\n          currentCommunity\n        );\n        bestCommunity = currentCommunity;\n\n        for (ci = 0; ci < communities.size; ci++) {\n          targetCommunity = communities.dense[ci];\n\n          if (targetCommunity === currentCommunity) continue;\n\n          targetCommunityDegree = communities.vals[ci];\n\n          deltaComputations++;\n\n          delta = index.delta(\n            i,\n            inDegree,\n            outDegree,\n            targetCommunityDegree,\n            targetCommunity\n          );\n\n          deltaIsBetter = tieBreaker(\n            bestCommunity,\n            currentCommunity,\n            targetCommunity,\n            delta,\n            bestDelta\n          );\n\n          if (deltaIsBetter) {\n            bestDelta = delta;\n            bestCommunity = targetCommunity;\n          }\n        }\n\n        // Should we move the node?\n        if (bestDelta < 0) {\n          // NOTE: this is to allow nodes to move back to their own singleton\n          // This code however only deals with modularity (e.g. the condition\n          // about bestDelta < 0, which is the delta for moving back to\n          // singleton wrt. modularity). Indeed, rarely, the Louvain\n          // algorithm can produce such cases when a node would be better in\n          // a singleton that in its own community when considering self loops\n          // or a resolution != 1. In this case, delta with your own community\n          // is indeed less than 0. To handle different metrics, one should\n          // consider computing the delta for going back to singleton because\n          // it might not be 0.\n          bestCommunity = index.isolate(i, inDegree, outDegree);\n\n          // If the node was already in a singleton community, we don't consider\n          // a move was made\n          if (bestCommunity === currentCommunity) continue;\n        } else {\n          // If no move was made, we continue to next node\n          if (bestCommunity === currentCommunity) {\n            continue;\n          } else {\n            // Actually moving the node to a new community\n            index.move(i, inDegree, outDegree, bestCommunity);\n          }\n        }\n\n        moveWasMade = true;\n        currentMoves++;\n\n        // Adding neighbors from other communities to the queue\n        start = index.starts[i];\n        end = index.starts[i + 1];\n\n        for (; start < end; start++) {\n          j = index.neighborhood[start];\n          targetCommunity = index.belongings[j];\n\n          if (targetCommunity !== bestCommunity) queue.enqueue(j);\n        }\n      }\n\n      moves.push(currentMoves);\n    } else {\n      localMoves = [];\n      moves.push(localMoves);\n\n      // Traditional Louvain iterative traversal of the graph\n      while (localMoveWasMade) {\n        localMoveWasMade = false;\n        currentMoves = 0;\n\n        ri = options.randomWalk ? randomIndex(l) : 0;\n\n        for (s = 0; s < l; s++, ri++) {\n          i = ri % l;\n\n          nodesVisited++;\n\n          inDegree = 0;\n          outDegree = 0;\n          communities.clear();\n\n          currentCommunity = index.belongings[i];\n\n          start = index.starts[i];\n          end = index.starts[i + 1];\n          offset = index.offsets[i];\n\n          // Traversing neighbors\n          for (; start < end; start++) {\n            out = start < offset;\n            j = index.neighborhood[start];\n            weight = index.weights[start];\n\n            targetCommunity = index.belongings[j];\n\n            // Incrementing metrics\n            if (out) outDegree += weight;\n            else inDegree += weight;\n\n            addWeightToCommunity(communities, targetCommunity, weight);\n          }\n\n          // Finding best community to move to\n          bestDelta = index.deltaWithOwnCommunity(\n            i,\n            inDegree,\n            outDegree,\n            communities.get(currentCommunity) || 0,\n            currentCommunity\n          );\n          bestCommunity = currentCommunity;\n\n          for (ci = 0; ci < communities.size; ci++) {\n            targetCommunity = communities.dense[ci];\n\n            if (targetCommunity === currentCommunity) continue;\n\n            targetCommunityDegree = communities.vals[ci];\n\n            deltaComputations++;\n\n            delta = index.delta(\n              i,\n              inDegree,\n              outDegree,\n              targetCommunityDegree,\n              targetCommunity\n            );\n\n            deltaIsBetter = tieBreaker(\n              bestCommunity,\n              currentCommunity,\n              targetCommunity,\n              delta,\n              bestDelta\n            );\n\n            if (deltaIsBetter) {\n              bestDelta = delta;\n              bestCommunity = targetCommunity;\n            }\n          }\n\n          // Should we move the node?\n          if (bestDelta < 0) {\n            // NOTE: this is to allow nodes to move back to their own singleton\n            // This code however only deals with modularity (e.g. the condition\n            // about bestDelta < 0, which is the delta for moving back to\n            // singleton wrt. modularity). Indeed, rarely, the Louvain\n            // algorithm can produce such cases when a node would be better in\n            // a singleton that in its own community when considering self loops\n            // or a resolution != 1. In this case, delta with your own community\n            // is indeed less than 0. To handle different metrics, one should\n            // consider computing the delta for going back to singleton because\n            // it might not be 0.\n            bestCommunity = index.isolate(i, inDegree, outDegree);\n\n            // If the node was already in a singleton community, we don't consider\n            // a move was made\n            if (bestCommunity === currentCommunity) continue;\n          } else {\n            // If no move was made, we continue to next node\n            if (bestCommunity === currentCommunity) {\n              continue;\n            } else {\n              // Actually moving the node to a new community\n              index.move(i, inDegree, outDegree, bestCommunity);\n            }\n          }\n\n          localMoveWasMade = true;\n          currentMoves++;\n        }\n\n        localMoves.push(currentMoves);\n\n        moveWasMade = localMoveWasMade || moveWasMade;\n      }\n    }\n\n    // We continue working on the induced graph\n    if (moveWasMade) index.zoomOut();\n  }\n\n  var results = {\n    index: index,\n    deltaComputations: deltaComputations,\n    nodesVisited: nodesVisited,\n    moves: moves\n  };\n\n  return results;\n}\n\n/**\n * Function returning the communities mapping of the graph.\n *\n * @param  {boolean} assign             - Assign communities to nodes attributes?\n * @param  {boolean} detailed           - Whether to return detailed information.\n * @param  {Graph}   graph              - Target graph.\n * @param  {object}  options            - Options:\n * @param  {string}    nodeCommunityAttribute - Community node attribute name.\n * @param  {string}    getEdgeWeight          - Weight edge attribute name or getter function.\n * @param  {string}    deltaComputation       - Method to use to compute delta computations.\n * @param  {boolean}   fastLocalMoves         - Whether to use the fast local move optimization.\n * @param  {boolean}   randomWalk             - Whether to traverse the graph in random order.\n * @param  {number}    resolution             - Resolution parameter.\n * @param  {function}  rng                    - RNG function to use.\n * @return {object}\n */\nfunction louvain(assign, detailed, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-communities-louvain: the given graph is not a valid graphology instance.'\n    );\n\n  var type = inferType(graph);\n\n  if (type === 'mixed')\n    throw new Error(\n      'graphology-communities-louvain: cannot run the algorithm on a true mixed graph.'\n    );\n\n  // Attributes name\n  options = resolveDefaults(options, DEFAULTS);\n\n  // Empty graph case\n  var c = 0;\n\n  if (graph.size === 0) {\n    if (assign) {\n      graph.forEachNode(function (node) {\n        graph.setNodeAttribute(node, options.nodeCommunityAttribute, c++);\n      });\n\n      return;\n    }\n\n    var communities = {};\n\n    graph.forEachNode(function (node) {\n      communities[node] = c++;\n    });\n\n    if (!detailed) return communities;\n\n    return {\n      communities: communities,\n      count: graph.order,\n      deltaComputations: 0,\n      dendrogram: null,\n      level: 0,\n      modularity: NaN,\n      moves: null,\n      nodesVisited: 0,\n      resolution: options.resolution\n    };\n  }\n\n  var fn = type === 'undirected' ? undirectedLouvain : directedLouvain;\n\n  var results = fn(detailed, graph, options);\n\n  var index = results.index;\n\n  // Standard output\n  if (!detailed) {\n    if (assign) {\n      index.assign(options.nodeCommunityAttribute);\n      return;\n    }\n\n    return index.collect();\n  }\n\n  // Detailed output\n  var output = {\n    count: index.C,\n    deltaComputations: results.deltaComputations,\n    dendrogram: index.dendrogram,\n    level: index.level,\n    modularity: index.modularity(),\n    moves: results.moves,\n    nodesVisited: results.nodesVisited,\n    resolution: options.resolution\n  };\n\n  if (assign) {\n    index.assign(options.nodeCommunityAttribute);\n    return output;\n  }\n\n  output.communities = index.collect();\n\n  return output;\n}\n\n/**\n * Exporting.\n */\nvar fn = louvain.bind(null, false, false);\nfn.assign = louvain.bind(null, true, false);\nfn.detailed = louvain.bind(null, false, true);\nfn.defaults = DEFAULTS;\n\nmodule.exports = fn;\n","module.exports = require('graphology-communities-louvain');\n","/**\n * Graphology Node Adders\n * =======================\n *\n * Generic node addition functions that can be used to avoid nasty repetitive\n * conditions.\n */\nexports.copyNode = function (graph, key, attributes) {\n  attributes = Object.assign({}, attributes);\n  return graph.addNode(key, attributes);\n};\n","/**\n * Graphology DFS Stack\n * =====================\n *\n * An experiment to speed up DFS in graphs and connected component detection.\n *\n * It should mostly save memory and not improve theoretical runtime.\n */\nfunction DFSStack(order) {\n  this.stack = new Array(order);\n  this.seen = new Set();\n  this.size = 0;\n}\n\nDFSStack.prototype.has = function (node) {\n  return this.seen.has(node);\n};\n\nDFSStack.prototype.push = function (node) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.stack[this.size++] = node;\n\n  return true;\n};\n\nDFSStack.prototype.pushWith = function (node, item) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.stack[this.size++] = item;\n\n  return true;\n};\n\nDFSStack.prototype.pop = function () {\n  if (this.size === 0) return;\n\n  return this.stack[--this.size];\n};\n\nmodule.exports = DFSStack;\n","/**\n * Graphology Edge Adders\n * =======================\n *\n * Generic edge addition functions that can be used to avoid nasty repetitive\n * conditions.\n */\nexports.addEdge = function addEdge(\n  graph,\n  undirected,\n  key,\n  source,\n  target,\n  attributes\n) {\n  if (undirected) {\n    if (key === null || key === undefined)\n      return graph.addUndirectedEdge(source, target, attributes);\n    else return graph.addUndirectedEdgeWithKey(key, source, target, attributes);\n  } else {\n    if (key === null || key === undefined)\n      return graph.addDirectedEdge(source, target, attributes);\n    else return graph.addDirectedEdgeWithKey(key, source, target, attributes);\n  }\n};\n\nexports.copyEdge = function copyEdge(\n  graph,\n  undirected,\n  key,\n  source,\n  target,\n  attributes\n) {\n  attributes = Object.assign({}, attributes);\n\n  if (undirected) {\n    if (key === null || key === undefined)\n      return graph.addUndirectedEdge(source, target, attributes);\n    else return graph.addUndirectedEdgeWithKey(key, source, target, attributes);\n  } else {\n    if (key === null || key === undefined)\n      return graph.addDirectedEdge(source, target, attributes);\n    else return graph.addDirectedEdgeWithKey(key, source, target, attributes);\n  }\n};\n\nexports.mergeEdge = function mergeEdge(\n  graph,\n  undirected,\n  key,\n  source,\n  target,\n  attributes\n) {\n  if (undirected) {\n    if (key === null || key === undefined)\n      return graph.mergeUndirectedEdge(source, target, attributes);\n    else\n      return graph.mergeUndirectedEdgeWithKey(key, source, target, attributes);\n  } else {\n    if (key === null || key === undefined)\n      return graph.mergeDirectedEdge(source, target, attributes);\n    else return graph.mergeDirectedEdgeWithKey(key, source, target, attributes);\n  }\n};\n\nexports.updateEdge = function updateEdge(\n  graph,\n  undirected,\n  key,\n  source,\n  target,\n  updater\n) {\n  if (undirected) {\n    if (key === null || key === undefined)\n      return graph.updateUndirectedEdge(source, target, updater);\n    else return graph.updateUndirectedEdgeWithKey(key, source, target, updater);\n  } else {\n    if (key === null || key === undefined)\n      return graph.updateDirectedEdge(source, target, updater);\n    else return graph.updateDirectedEdgeWithKey(key, source, target, updater);\n  }\n};\n","/**\n * Graphology Components\n * ======================\n *\n * Basic connected components-related functions.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyNode = require('graphology-utils/add-node').copyNode;\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\nvar DFSStack = require('graphology-indices/dfs-stack');\n\n/**\n * Function iterating over a graph's connected component using a callback.\n *\n * @param {Graph}    graph    - Target graph.\n * @param {function} callback - Iteration callback.\n */\nfunction forEachConnectedComponent(graph, callback) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-components: the given graph is not a valid graphology instance.'\n    );\n\n  // A null graph has no connected components by definition\n  if (!graph.order) return;\n\n  var stack = new DFSStack(graph.order);\n  var push = stack.push.bind(stack);\n\n  graph.forEachNode(function (node) {\n    if (stack.has(node)) return;\n\n    var component = [];\n\n    stack.push(node);\n\n    var source;\n\n    while (stack.size !== 0) {\n      source = stack.pop();\n\n      component.push(source);\n\n      graph.forEachNeighbor(source, push);\n    }\n\n    callback(component);\n  });\n}\n\nfunction forEachConnectedComponentOrder(graph, callback) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-components: the given graph is not a valid graphology instance.'\n    );\n\n  // A null graph has no connected components by definition\n  if (!graph.order) return;\n\n  var stack = new DFSStack(graph.order);\n  var push = stack.push.bind(stack);\n\n  graph.forEachNode(function (node) {\n    if (stack.has(node)) return;\n\n    var order = 0;\n\n    stack.push(node);\n\n    var source;\n\n    while (stack.size !== 0) {\n      source = stack.pop();\n\n      order++;\n\n      graph.forEachNeighbor(source, push);\n    }\n\n    callback(order);\n  });\n}\n\nfunction forEachConnectedComponentOrderWithEdgeFilter(\n  graph,\n  edgeFilter,\n  callback\n) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-components: the given graph is not a valid graphology instance.'\n    );\n\n  // A null graph has no connected components by definition\n  if (!graph.order) return;\n\n  var stack = new DFSStack(graph.order);\n\n  var source;\n\n  function push(e, a, s, t, sa, ta, u) {\n    if (source === t) t = s;\n\n    if (!edgeFilter(e, a, s, t, sa, ta, u)) return;\n\n    stack.push(t);\n  }\n\n  graph.forEachNode(function (node) {\n    if (stack.has(node)) return;\n\n    var order = 0;\n\n    stack.push(node);\n\n    while (stack.size !== 0) {\n      source = stack.pop();\n\n      order++;\n\n      graph.forEachEdge(source, push);\n    }\n\n    callback(order);\n  });\n}\n\nfunction countConnectedComponents(graph) {\n  var n = 0;\n\n  forEachConnectedComponentOrder(graph, function () {\n    n++;\n  });\n\n  return n;\n}\n\n/**\n * Function returning a list of a graph's connected components as arrays\n * of node keys.\n *\n * @param  {Graph} graph - Target graph.\n * @return {array}\n */\nfunction connectedComponents(graph) {\n  var components = [];\n\n  forEachConnectedComponent(graph, function (component) {\n    components.push(component);\n  });\n\n  return components;\n}\n\n/**\n * Function returning the largest component of the given graph.\n *\n * @param  {Graph} graph - Target graph.\n * @return {array}\n */\nfunction largestConnectedComponent(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-components: the given graph is not a valid graphology instance.'\n    );\n\n  if (!graph.order) return [];\n\n  var order = graph.order;\n  var remaining;\n\n  var stack = new DFSStack(graph.order);\n  var push = stack.push.bind(stack);\n\n  var largestComponent = [];\n  var component;\n\n  graph.someNode(function (node) {\n    if (stack.has(node)) return;\n\n    component = [];\n\n    stack.push(node);\n\n    var source;\n\n    while (stack.size !== 0) {\n      source = stack.pop();\n\n      component.push(source);\n\n      graph.forEachNeighbor(source, push);\n    }\n\n    if (component.length > largestComponent.length)\n      largestComponent = component;\n\n    // Early exit condition:\n    // If current largest component's size is larger than the number of\n    // remaining nodes to visit, we can safely assert we found the\n    // overall largest component already.\n    remaining = order - stack.seen.size;\n    if (largestComponent.length > remaining) return true;\n\n    return false;\n  });\n\n  return largestComponent;\n}\n\n/**\n * Function returning a subgraph composed of the largest component of the given graph.\n *\n * @param  {Graph} graph - Target graph.\n * @return {Graph}\n */\nfunction largestConnectedComponentSubgraph(graph) {\n  var component = largestConnectedComponent(graph);\n\n  var S = graph.nullCopy();\n\n  component.forEach(function (key) {\n    copyNode(S, key, graph.getNodeAttributes(key));\n  });\n\n  graph.forEachEdge(function (\n    key,\n    attr,\n    source,\n    target,\n    sourceAttr,\n    targetAttr,\n    undirected\n  ) {\n    if (S.hasNode(source)) {\n      copyEdge(S, undirected, key, source, target, attr);\n    }\n  });\n\n  return S;\n}\n\n/**\n * Function mutating a graph in order to drop every node and edge that does\n * not belong to its largest connected component.\n *\n * @param  {Graph} graph - Target graph.\n */\nfunction cropToLargestConnectedComponent(graph) {\n  var component = new Set(largestConnectedComponent(graph));\n\n  graph.forEachNode(function (key) {\n    if (!component.has(key)) {\n      graph.dropNode(key);\n    }\n  });\n}\n\n/**\n * Function returning a list of strongly connected components.\n *\n * @param  {Graph} graph - Target directed graph.\n * @return {array}\n */\nfunction stronglyConnectedComponents(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-components: the given graph is not a valid graphology instance.'\n    );\n\n  if (!graph.order) return [];\n\n  if (graph.type === 'undirected')\n    throw new Error('graphology-components: the given graph is undirected');\n\n  var nodes = graph.nodes(),\n    components = [],\n    i,\n    l;\n\n  if (!graph.size) {\n    for (i = 0, l = nodes.length; i < l; i++) components.push([nodes[i]]);\n    return components;\n  }\n\n  var count = 1,\n    P = [],\n    S = [],\n    preorder = new Map(),\n    assigned = new Set(),\n    component,\n    pop,\n    vertex;\n\n  var DFS = function (node) {\n    var neighbor;\n    var neighbors = graph.outboundNeighbors(node);\n    var neighborOrder;\n\n    preorder.set(node, count++);\n    P.push(node);\n    S.push(node);\n\n    for (var k = 0, n = neighbors.length; k < n; k++) {\n      neighbor = neighbors[k];\n\n      if (preorder.has(neighbor)) {\n        neighborOrder = preorder.get(neighbor);\n        if (!assigned.has(neighbor))\n          while (preorder.get(P[P.length - 1]) > neighborOrder) P.pop();\n      } else {\n        DFS(neighbor);\n      }\n    }\n\n    if (preorder.get(P[P.length - 1]) === preorder.get(node)) {\n      component = [];\n      do {\n        pop = S.pop();\n        component.push(pop);\n        assigned.add(pop);\n      } while (pop !== node);\n      components.push(component);\n      P.pop();\n    }\n  };\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    vertex = nodes[i];\n    if (!assigned.has(vertex)) DFS(vertex);\n  }\n\n  return components;\n}\n\n/**\n * Exporting.\n */\nexports.forEachConnectedComponent = forEachConnectedComponent;\nexports.forEachConnectedComponentOrder = forEachConnectedComponentOrder;\nexports.forEachConnectedComponentOrderWithEdgeFilter =\n  forEachConnectedComponentOrderWithEdgeFilter;\nexports.countConnectedComponents = countConnectedComponents;\nexports.connectedComponents = connectedComponents;\nexports.largestConnectedComponent = largestConnectedComponent;\nexports.largestConnectedComponentSubgraph = largestConnectedComponentSubgraph;\nexports.cropToLargestConnectedComponent = cropToLargestConnectedComponent;\nexports.stronglyConnectedComponents = stronglyConnectedComponents;\n","module.exports = require('graphology-components');\n","/**\n * Graphology Complete Graph Generator\n * ====================================\n *\n * Function generating complete graphs.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\n\n/**\n * Generates a complete graph with n nodes.\n *\n * @param  {Class}  GraphClass - The Graph Class to instantiate.\n * @param  {number} order      - Number of nodes of the graph.\n * @return {Graph}\n */\nmodule.exports = function complete(GraphClass, order) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/classic/complete: invalid Graph constructor.'\n    );\n\n  var graph = new GraphClass();\n\n  var i, j;\n\n  for (i = 0; i < order; i++) graph.addNode(i);\n\n  for (i = 0; i < order; i++) {\n    for (j = i + 1; j < order; j++) {\n      if (graph.type !== 'directed') graph.addUndirectedEdge(i, j);\n\n      if (graph.type !== 'undirected') {\n        graph.addDirectedEdge(i, j);\n        graph.addDirectedEdge(j, i);\n      }\n    }\n  }\n\n  return graph;\n};\n","/**\n * Graphology Empty Graph Generator\n * =================================\n *\n * Function generating empty graphs.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\n\n/**\n * Generates an empty graph with n nodes and 0 edges.\n *\n * @param  {Class}  GraphClass - The Graph Class to instantiate.\n * @param  {number} order      - Number of nodes of the graph.\n * @return {Graph}\n */\nmodule.exports = function empty(GraphClass, order) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/classic/empty: invalid Graph constructor.'\n    );\n\n  var graph = new GraphClass();\n\n  var i;\n\n  for (i = 0; i < order; i++) graph.addNode(i);\n\n  return graph;\n};\n","/**\n * Graphology Ladder Graph Generator\n * ==================================\n *\n * Function generating ladder graphs.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\n\n/**\n * Generates a ladder graph of length n (order will therefore be 2 * n).\n *\n * @param  {Class}  GraphClass - The Graph Class to instantiate.\n * @param  {number} length     - Length of the ladder.\n * @return {Graph}\n */\nmodule.exports = function ladder(GraphClass, length) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/classic/ladder: invalid Graph constructor.'\n    );\n\n  var graph = new GraphClass();\n\n  var i;\n\n  for (i = 0; i < length - 1; i++) graph.mergeEdge(i, i + 1);\n  for (i = length; i < length * 2 - 1; i++) graph.mergeEdge(i, i + 1);\n  for (i = 0; i < length; i++) graph.addEdge(i, i + length);\n\n  return graph;\n};\n","/**\n * Graphology Path Graph Generator\n * ================================\n *\n * Function generating path graphs.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\n\n/**\n * Generates a path graph with n nodes.\n *\n * @param  {Class}  GraphClass - The Graph Class to instantiate.\n * @param  {number} order      - Number of nodes of the graph.\n * @return {Graph}\n */\nmodule.exports = function path(GraphClass, order) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/classic/path: invalid Graph constructor.'\n    );\n\n  var graph = new GraphClass();\n\n  for (var i = 0; i < order - 1; i++) graph.mergeEdge(i, i + 1);\n\n  return graph;\n};\n","/**\n * Graphology Classic Graph Generators\n * ====================================\n *\n * Classic graph generators endpoint.\n */\nexports.complete = require('./complete.js');\nexports.empty = require('./empty.js');\nexports.ladder = require('./ladder.js');\nexports.path = require('./path.js');\n","/**\n * Graphology Caveman Graph Generator\n * ===================================\n *\n * Function generating caveman graphs.\n *\n * [Article]:\n * Watts, D. J. 'Networks, Dynamics, and the Small-World Phenomenon.'\n * Amer. J. Soc. 105, 493-527, 1999.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor'),\n  empty = require('../classic/empty.js');\n\n/**\n * Function returning a caveman graph with desired properties.\n *\n * @param  {Class}    GraphClass    - The Graph Class to instantiate.\n * @param  {number}   l             - The number of cliques in the graph.\n * @param  {number}   k             - Size of the cliques.\n * @return {Graph}\n */\nmodule.exports = function caveman(GraphClass, l, k) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/community/caveman: invalid Graph constructor.'\n    );\n\n  var m = l * k;\n\n  var graph = empty(GraphClass, m);\n\n  if (k < 2) return graph;\n\n  var i, j, s;\n\n  for (i = 0; i < m; i += k) {\n    for (j = i; j < i + k; j++) {\n      for (s = j + 1; s < i + k; s++) graph.addEdge(j, s);\n    }\n  }\n\n  return graph;\n};\n","/**\n * Graphology Connected Caveman Graph Generator\n * =============================================\n *\n * Function generating connected caveman graphs.\n *\n * [Article]:\n * Watts, D. J. 'Networks, Dynamics, and the Small-World Phenomenon.'\n * Amer. J. Soc. 105, 493-527, 1999.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor'),\n  empty = require('../classic/empty.js');\n\n/**\n * Function returning a connected caveman graph with desired properties.\n *\n * @param  {Class}    GraphClass    - The Graph Class to instantiate.\n * @param  {number}   l             - The number of cliques in the graph.\n * @param  {number}   k             - Size of the cliques.\n * @return {Graph}\n */\nmodule.exports = function connectedCaveman(GraphClass, l, k) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/community/connected-caveman: invalid Graph constructor.'\n    );\n\n  var m = l * k;\n\n  var graph = empty(GraphClass, m);\n\n  if (k < 2) return graph;\n\n  var i, j, s;\n\n  for (i = 0; i < m; i += k) {\n    for (j = i; j < i + k; j++) {\n      for (s = j + 1; s < i + k; s++) {\n        if (j !== i || j !== s - 1) graph.addEdge(j, s);\n      }\n    }\n\n    if (i > 0) graph.addEdge(i, (i - 1) % m);\n  }\n\n  graph.addEdge(0, m - 1);\n\n  return graph;\n};\n","/**\n * Graphology Random Clusters Graph Generator\n * ===========================================\n *\n * Function generating a graph containing the desired number of nodes & edges\n * and organized in the desired number of clusters.\n *\n * [Author]:\n * Alexis Jacomy\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\n\n/**\n * Generates a random graph with clusters.\n *\n * @param  {Class}    GraphClass    - The Graph Class to instantiate.\n * @param  {object}   options       - Options:\n * @param  {number}     clusterDensity - Probability that an edge will link two\n *                                       nodes of the same cluster.\n * @param  {number}     order          - Number of nodes.\n * @param  {number}     size           - Number of edges.\n * @param  {number}     clusters       - Number of clusters.\n * @param  {function}   rng            - Custom RNG function.\n * @return {Graph}\n */\nmodule.exports = function (GraphClass, options) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/random/clusters: invalid Graph constructor.'\n    );\n\n  options = options || {};\n\n  var clusterDensity =\n      'clusterDensity' in options ? options.clusterDensity : 0.5,\n    rng = options.rng || Math.random,\n    N = options.order,\n    E = options.size,\n    C = options.clusters;\n\n  if (\n    typeof clusterDensity !== 'number' ||\n    clusterDensity > 1 ||\n    clusterDensity < 0\n  )\n    throw new Error(\n      'graphology-generators/random/clusters: `clusterDensity` option should be a number between 0 and 1.'\n    );\n\n  if (typeof rng !== 'function')\n    throw new Error(\n      'graphology-generators/random/clusters: `rng` option should be a function.'\n    );\n\n  if (typeof N !== 'number' || N <= 0)\n    throw new Error(\n      'graphology-generators/random/clusters: `order` option should be a positive number.'\n    );\n\n  if (typeof E !== 'number' || E <= 0)\n    throw new Error(\n      'graphology-generators/random/clusters: `size` option should be a positive number.'\n    );\n\n  if (typeof C !== 'number' || C <= 0)\n    throw new Error(\n      'graphology-generators/random/clusters: `clusters` option should be a positive number.'\n    );\n\n  // Creating graph\n  var graph = new GraphClass();\n\n  // Adding nodes\n  if (!N) return graph;\n\n  // Initializing clusters\n  var clusters = new Array(C),\n    cluster,\n    nodes,\n    i;\n\n  for (i = 0; i < C; i++) clusters[i] = [];\n\n  for (i = 0; i < N; i++) {\n    cluster = (rng() * C) | 0;\n    graph.addNode(i, {cluster: cluster});\n    clusters[cluster].push(i);\n  }\n\n  // Adding edges\n  if (!E) return graph;\n\n  var source, target, l;\n\n  for (i = 0; i < E; i++) {\n    // Adding a link between two random nodes\n    if (rng() < 1 - clusterDensity) {\n      source = (rng() * N) | 0;\n\n      do {\n        target = (rng() * N) | 0;\n      } while (source === target);\n    }\n\n    // Adding a link between two nodes from the same cluster\n    else {\n      cluster = (rng() * C) | 0;\n      nodes = clusters[cluster];\n      l = nodes.length;\n\n      if (!l || l < 2) {\n        // TODO: in those case we may have fewer edges than required\n        // TODO: check where E is over full clusterDensity\n        continue;\n      }\n\n      source = nodes[(rng() * l) | 0];\n\n      do {\n        target = nodes[(rng() * l) | 0];\n      } while (source === target);\n    }\n\n    if (!graph.multi) graph.mergeEdge(source, target);\n    else graph.addEdge(source, target);\n  }\n\n  return graph;\n};\n","/**\n * Graphology Simple Size\n * =======================\n *\n * Function returning the simple size of a graph, i.e. the size it would have\n * if it we assume it is a simple graph.\n */\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Simple size function.\n *\n * @param  {Graph}  graph - Target graph.\n * @return {number}\n */\nmodule.exports = function simpleSize(graph) {\n  // Handling errors\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/simple-size: the given graph is not a valid graphology instance.'\n    );\n\n  if (!graph.multi) return graph.size;\n\n  var u = 0;\n  var d = 0;\n\n  function accumulateUndirected() {\n    u++;\n  }\n\n  function accumulateDirected() {\n    d++;\n  }\n\n  graph.forEachNode(function (node) {\n    if (graph.type !== 'directed')\n      graph.forEachUndirectedNeighbor(node, accumulateUndirected);\n\n    if (graph.type !== 'undirected')\n      graph.forEachOutNeighbor(node, accumulateDirected);\n  });\n\n  return u / 2 + d;\n};\n","/**\n * Graphology Density\n * ===================\n *\n * Functions used to compute the density of the given graph.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar simpleSize = require('./simple-size.js');\n\n/**\n * Returns the undirected density.\n *\n * @param  {number} order - Number of nodes in the graph.\n * @param  {number} size  - Number of edges in the graph.\n * @return {number}\n */\nfunction undirectedDensity(order, size) {\n  return (2 * size) / (order * (order - 1));\n}\n\n/**\n * Returns the directed density.\n *\n * @param  {number} order - Number of nodes in the graph.\n * @param  {number} size  - Number of edges in the graph.\n * @return {number}\n */\nfunction directedDensity(order, size) {\n  return size / (order * (order - 1));\n}\n\n/**\n * Returns the mixed density.\n *\n * @param  {number} order - Number of nodes in the graph.\n * @param  {number} size  - Number of edges in the graph.\n * @return {number}\n */\nfunction mixedDensity(order, size) {\n  var d = order * (order - 1);\n\n  return size / (d + d / 2);\n}\n\n/**\n * Returns the density for the given parameters.\n *\n * Arity 3:\n * @param  {boolean} type  - Type of density.\n * @param  {boolean} multi - Compute multi density?\n * @param  {Graph}   graph - Target graph.\n *\n * Arity 4:\n * @param  {boolean} type  - Type of density.\n * @param  {boolean} multi - Compute multi density?\n * @param  {number}  order - Number of nodes in the graph.\n * @param  {number}  size  - Number of edges in the graph.\n *\n * @return {number}\n */\nfunction abstractDensity(type, multi, graph) {\n  var order, size;\n\n  // Retrieving order & size\n  if (arguments.length > 3) {\n    order = graph;\n    size = arguments[3];\n\n    if (typeof order !== 'number' || order < 0)\n      throw new Error(\n        'graphology-metrics/density: given order is not a valid number.'\n      );\n\n    if (typeof size !== 'number' || size < 0)\n      throw new Error(\n        'graphology-metrics/density: given size is not a valid number.'\n      );\n  } else {\n    if (!isGraph(graph))\n      throw new Error(\n        'graphology-metrics/density: given graph is not a valid graphology instance.'\n      );\n\n    order = graph.order;\n    size = graph.size;\n\n    if (graph.multi && multi === false) size = simpleSize(graph);\n  }\n\n  // When the graph has only one node, its density is 0\n  if (order < 2) return 0;\n\n  // Guessing type & multi\n  if (type === null) type = graph.type;\n  if (multi === null) multi = graph.multi;\n\n  // Getting the correct function\n  var fn;\n\n  if (type === 'undirected') fn = undirectedDensity;\n  else if (type === 'directed') fn = directedDensity;\n  else fn = mixedDensity;\n\n  // Applying the function\n  return fn(order, size);\n}\n\n/**\n * Exporting.\n */\nexports.abstractDensity = abstractDensity;\nexports.density = abstractDensity.bind(null, null, null);\nexports.directedDensity = abstractDensity.bind(null, 'directed', false);\nexports.undirectedDensity = abstractDensity.bind(null, 'undirected', false);\nexports.mixedDensity = abstractDensity.bind(null, 'mixed', false);\nexports.multiDirectedDensity = abstractDensity.bind(null, 'directed', true);\nexports.multiUndirectedDensity = abstractDensity.bind(null, 'undirected', true);\nexports.multiMixedDensity = abstractDensity.bind(null, 'mixed', true);\n","/**\n * Graphology Erdos-Renyi Graph Generator\n * =======================================\n *\n * Function generating binomial graphs.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\nvar density = require('graphology-metrics/graph/density').abstractDensity;\n\n/**\n * Generates a binomial graph graph with n nodes.\n *\n * @param  {Class}    GraphClass    - The Graph Class to instantiate.\n * @param  {object}   options       - Options:\n * @param  {number}     order       - Number of nodes in the graph.\n * @param  {number}     probability - Probability for edge creation.\n * @param  {function}   rng         - Custom RNG function.\n * @return {Graph}\n */\nfunction erdosRenyi(GraphClass, options) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/random/erdos-renyi: invalid Graph constructor.'\n    );\n\n  var order = options.order;\n  var probability = options.probability;\n  var rng = options.rng || Math.random;\n\n  var graph = new GraphClass();\n\n  // If user gave a size, we need to compute probability\n  if (typeof options.approximateSize === 'number') {\n    probability = density(graph.type, false, order, options.approximateSize);\n  }\n\n  if (typeof order !== 'number' || order <= 0)\n    throw new Error(\n      'graphology-generators/random/erdos-renyi: invalid `order`. Should be a positive number.'\n    );\n\n  if (typeof probability !== 'number' || probability < 0 || probability > 1)\n    throw new Error(\n      \"graphology-generators/random/erdos-renyi: invalid `probability`. Should be a number between 0 and 1. Or maybe you gave an `approximateSize` exceeding the graph's density.\"\n    );\n\n  if (typeof rng !== 'function')\n    throw new Error(\n      'graphology-generators/random/erdos-renyi: invalid `rng`. Should be a function.'\n    );\n\n  var i, j;\n\n  for (i = 0; i < order; i++) graph.addNode(i);\n\n  if (probability <= 0) return graph;\n\n  for (i = 0; i < order; i++) {\n    for (j = i + 1; j < order; j++) {\n      if (graph.type !== 'directed') {\n        if (rng() < probability) graph.addUndirectedEdge(i, j);\n      }\n\n      if (graph.type !== 'undirected') {\n        if (rng() < probability) graph.addDirectedEdge(i, j);\n\n        if (rng() < probability) graph.addDirectedEdge(j, i);\n      }\n    }\n  }\n\n  return graph;\n}\n\n/**\n * Generates a binomial graph graph with n nodes using a faster algorithm\n * for sparse graphs.\n *\n * @param  {Class}    GraphClass    - The Graph Class to instantiate.\n * @param  {object}   options       - Options:\n * @param  {number}     order       - Number of nodes in the graph.\n * @param  {number}     probability - Probability for edge creation.\n * @param  {function}   rng         - Custom RNG function.\n * @return {Graph}\n */\nfunction erdosRenyiSparse(GraphClass, options) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/random/erdos-renyi: invalid Graph constructor.'\n    );\n\n  var order = options.order;\n  var probability = options.probability;\n  var rng = options.rng || Math.random;\n\n  var graph = new GraphClass();\n\n  // If user gave a size, we need to compute probability\n  if (typeof options.approximateSize === 'number') {\n    probability = density(graph.type, false, order, options.approximateSize);\n  }\n\n  if (typeof order !== 'number' || order <= 0)\n    throw new Error(\n      'graphology-generators/random/erdos-renyi: invalid `order`. Should be a positive number.'\n    );\n\n  if (typeof probability !== 'number' || probability < 0 || probability > 1)\n    throw new Error(\n      \"graphology-generators/random/erdos-renyi: invalid `probability`. Should be a number between 0 and 1. Or maybe you gave an `approximateSize` exceeding the graph's density.\"\n    );\n\n  if (typeof rng !== 'function')\n    throw new Error(\n      'graphology-generators/random/erdos-renyi: invalid `rng`. Should be a function.'\n    );\n\n  for (var i = 0; i < order; i++) graph.addNode(i);\n\n  if (probability <= 0) return graph;\n\n  var w = -1,\n    lp = Math.log(1 - probability),\n    lr,\n    v;\n\n  if (graph.type !== 'undirected') {\n    v = 0;\n\n    while (v < order) {\n      lr = Math.log(1 - rng());\n      w += 1 + ((lr / lp) | 0);\n\n      // Avoiding self loops\n      if (v === w) {\n        w++;\n      }\n\n      while (v < order && order <= w) {\n        w -= order;\n        v++;\n\n        // Avoiding self loops\n        if (v === w) w++;\n      }\n\n      if (v < order) graph.addDirectedEdge(v, w);\n    }\n  }\n\n  w = -1;\n\n  if (graph.type !== 'directed') {\n    v = 1;\n\n    while (v < order) {\n      lr = Math.log(1 - rng());\n\n      w += 1 + ((lr / lp) | 0);\n\n      while (w >= v && v < order) {\n        w -= v;\n        v++;\n      }\n\n      if (v < order) graph.addUndirectedEdge(v, w);\n    }\n  }\n\n  return graph;\n}\n\n/**\n * Exporting.\n */\nerdosRenyi.sparse = erdosRenyiSparse;\nmodule.exports = erdosRenyi;\n","/**\n * Graphology Girvan-Newman Graph Generator\n * =========================================\n *\n * Function generating graphs liks the one used to test the Girvan-Newman\n * community algorithm.\n *\n * [Reference]:\n * http://www.pnas.org/content/99/12/7821.full.pdf\n *\n * [Article]:\n * Community Structure in  social and biological networks.\n * Girvan Newman, 2002. PNAS June, vol 99 n 12\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\n\n/**\n * Generates a binomial graph graph with n nodes.\n *\n * @param  {Class}    GraphClass    - The Graph Class to instantiate.\n * @param  {object}   options       - Options:\n * @param  {number}     zOut        - zOut parameter.\n * @param  {function}   rng         - Custom RNG function.\n * @return {Graph}\n */\nmodule.exports = function girvanNewman(GraphClass, options) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/random/girvan-newman: invalid Graph constructor.'\n    );\n\n  var zOut = options.zOut,\n    rng = options.rng || Math.random;\n\n  if (typeof zOut !== 'number')\n    throw new Error(\n      'graphology-generators/random/girvan-newman: invalid `zOut`. Should be a number.'\n    );\n\n  if (typeof rng !== 'function')\n    throw new Error(\n      'graphology-generators/random/girvan-newman: invalid `rng`. Should be a function.'\n    );\n\n  var pOut = zOut / 96,\n    pIn = (16 - pOut * 96) / 31,\n    graph = new GraphClass(),\n    random,\n    i,\n    j;\n\n  for (i = 0; i < 128; i++) graph.addNode(i);\n\n  for (i = 0; i < 128; i++) {\n    for (j = i + 1; j < 128; j++) {\n      random = rng();\n\n      if (i % 4 === j % 4) {\n        if (random < pIn) graph.addEdge(i, j);\n      } else {\n        if (random < pOut) graph.addEdge(i, j);\n      }\n    }\n  }\n\n  return graph;\n};\n","/**\n * Graphology Random Graph Generators\n * ===================================\n *\n * Random graph generators endpoint.\n */\nexports.clusters = require('./clusters.js');\nexports.erdosRenyi = require('./erdos-renyi.js');\nexports.girvanNewman = require('./girvan-newman.js');\n","/**\n * Graphology mergeStar\n * =====================\n *\n * Function merging the given star to the graph.\n */\n\n/**\n * Merging the given star to the graph.\n *\n * @param  {Graph} graph - Target graph.\n * @param  {array} nodes - Nodes to add, first one being the center of the star.\n */\nmodule.exports = function mergeStar(graph, nodes) {\n  if (nodes.length === 0) return;\n\n  var node, i, l;\n\n  var center = nodes[0];\n\n  graph.mergeNode(center);\n\n  for (i = 1, l = nodes.length; i < l; i++) {\n    node = nodes[i];\n\n    graph.mergeEdge(center, node);\n  }\n};\n","/**\n * Graphology Krackhardt Kite Graph Generator\n * ===========================================\n *\n * Function generating the Krackhardt kite graph.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor'),\n  mergeStar = require('graphology-utils/merge-star');\n\n/**\n * Data.\n */\nvar ADJACENCY = [\n  ['Andre', 'Beverley', 'Carol', 'Diane', 'Fernando'],\n  ['Beverley', 'Andre', 'Ed', 'Garth'],\n  ['Carol', 'Andre', 'Diane', 'Fernando'],\n  ['Diane', 'Andre', 'Beverley', 'Carol', 'Ed', 'Fernando', 'Garth'],\n  ['Ed', 'Beverley', 'Diane', 'Garth'],\n  ['Fernando', 'Andre', 'Carol', 'Diane', 'Garth', 'Heather'],\n  ['Garth', 'Beverley', 'Diane', 'Ed', 'Fernando', 'Heather'],\n  ['Heather', 'Fernando', 'Garth', 'Ike'],\n  ['Ike', 'Heather', 'Jane'],\n  ['Jane', 'Ike']\n];\n\n/**\n * Function generating the Krackhardt kite graph.\n *\n * @param  {Class} GraphClass - The Graph Class to instantiate.\n * @return {Graph}\n */\nmodule.exports = function krackhardtKite(GraphClass) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/social/krackhardt-kite: invalid Graph constructor.'\n    );\n\n  var graph = new GraphClass(),\n    i,\n    l;\n\n  for (i = 0, l = ADJACENCY.length; i < l; i++) mergeStar(graph, ADJACENCY[i]);\n\n  return graph;\n};\n","/**\n * Graphology Florentine Families Graph Generator\n * ===============================================\n *\n * Function generating the Florentine Families graph.\n *\n * [Reference]:\n * Ronald L. Breiger and Philippa E. Pattison\n * Cumulated social roles: The duality of persons and their algebras,1\n * Social Networks, Volume 8, Issue 3, September 1986, Pages 215-256\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\n\n/**\n * Data.\n */\nvar EDGES = [\n  ['Acciaiuoli', 'Medici'],\n  ['Castellani', 'Peruzzi'],\n  ['Castellani', 'Strozzi'],\n  ['Castellani', 'Barbadori'],\n  ['Medici', 'Barbadori'],\n  ['Medici', 'Ridolfi'],\n  ['Medici', 'Tornabuoni'],\n  ['Medici', 'Albizzi'],\n  ['Medici', 'Salviati'],\n  ['Salviati', 'Pazzi'],\n  ['Peruzzi', 'Strozzi'],\n  ['Peruzzi', 'Bischeri'],\n  ['Strozzi', 'Ridolfi'],\n  ['Strozzi', 'Bischeri'],\n  ['Ridolfi', 'Tornabuoni'],\n  ['Tornabuoni', 'Guadagni'],\n  ['Albizzi', 'Ginori'],\n  ['Albizzi', 'Guadagni'],\n  ['Bischeri', 'Guadagni'],\n  ['Guadagni', 'Lamberteschi']\n];\n\n/**\n * Function generating the florentine families graph.\n *\n * @param  {Class} GraphClass - The Graph Class to instantiate.\n * @return {Graph}\n */\nmodule.exports = function florentineFamilies(GraphClass) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/social/florentine-families: invalid Graph constructor.'\n    );\n\n  var graph = new GraphClass(),\n    edge,\n    i,\n    l;\n\n  for (i = 0, l = EDGES.length; i < l; i++) {\n    edge = EDGES[i];\n\n    graph.mergeEdge(edge[0], edge[1]);\n  }\n\n  return graph;\n};\n","/**\n * Graphology Karate Graph Generator\n * ==================================\n *\n * Function generating Zachary's karate club graph.\n *\n * [Reference]:\n * Zachary, Wayne W.\n * \"An Information Flow Model for Conflict and Fission in Small Groups.\"\n * Journal of Anthropological Research, 33, 452--473, (1977).\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\n\n/**\n * Data.\n */\nvar DATA = [\n  '0111111110111100010101000000000100',\n  '1011000100000100010101000000001000',\n  '1101000111000100000000000001100010',\n  '1110000100001100000000000000000000',\n  '1000001000100000000000000000000000',\n  '1000001000100000100000000000000000',\n  '1000110000000000100000000000000000',\n  '1111000000000000000000000000000000',\n  '1010000000000000000000000000001011',\n  '0010000000000000000000000000000001',\n  '1000110000000000000000000000000000',\n  '1000000000000000000000000000000000',\n  '1001000000000000000000000000000000',\n  '1111000000000000000000000000000001',\n  '0000000000000000000000000000000011',\n  '0000000000000000000000000000000011',\n  '0000011000000000000000000000000000',\n  '1100000000000000000000000000000000',\n  '0000000000000000000000000000000011',\n  '1100000000000000000000000000000001',\n  '0000000000000000000000000000000011',\n  '1100000000000000000000000000000000',\n  '0000000000000000000000000000000011',\n  '0000000000000000000000000101010011',\n  '0000000000000000000000000101000100',\n  '0000000000000000000000011000000100',\n  '0000000000000000000000000000010001',\n  '0010000000000000000000011000000001',\n  '0010000000000000000000000000000101',\n  '0000000000000000000000010010000011',\n  '0100000010000000000000000000000011',\n  '1000000000000000000000001100100011',\n  '0010000010000011001010110000011101',\n  '0000000011000111001110110011111110'\n];\n\nvar CLUB1 = new Set([\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 21\n]);\n\n/**\n * Function generating the karate club graph.\n *\n * @param  {Class} GraphClass - The Graph Class to instantiate.\n * @return {Graph}\n */\nmodule.exports = function karateClub(GraphClass) {\n  if (!isGraphConstructor(GraphClass))\n    throw new Error(\n      'graphology-generators/social/karate: invalid Graph constructor.'\n    );\n\n  var graph = new GraphClass(),\n    club;\n\n  for (var i = 0; i < 34; i++) {\n    club = CLUB1.has(i) ? 'Mr. Hi' : 'Officer';\n\n    graph.addNode(i, {club: club});\n  }\n\n  var line, entry, row, column, l, m;\n\n  for (row = 0, l = DATA.length; row < l; row++) {\n    line = DATA[row].split('');\n\n    for (column = row + 1, m = line.length; column < m; column++) {\n      entry = +line[column];\n\n      if (entry) graph.addEdgeWithKey(row + '->' + column, row, column);\n    }\n  }\n\n  return graph;\n};\n","/**\n * Graphology Graph Generators\n * ============================\n *\n * Library endpoint.\n */\nexports.classic = require('./classic');\nexports.community = require('./community');\nexports.random = require('./random');\nexports.small = require('./small');\nexports.social = require('./social');\n","module.exports = require('graphology-generators');\n","/**\n * Pandemonium Random\n * ===================\n *\n * Random function.\n */\n\n/**\n * Creating a function returning a random integer such as a <= N <= b.\n *\n * @param  {function} rng - RNG function returning uniform random.\n * @return {function}     - The created function.\n */\nfunction createRandom(rng) {\n\n  /**\n   * Random function.\n   *\n   * @param  {number} a - From.\n   * @param  {number} b - To.\n   * @return {number}\n   */\n  return function(a, b) {\n    return a + Math.floor(rng() * (b - a + 1));\n  };\n}\n\n/**\n * Default random using `Math.random`.\n */\nvar random = createRandom(Math.random);\n\n/**\n * Exporting.\n */\nrandom.createRandom = createRandom;\nmodule.exports = random;\n","/**\n * Pandemonium Shuffle In Place\n * =============================\n *\n * Shuffle function applying the Fisher-Yates algorithm to the provided array.\n */\nvar createRandom = require('./random.js').createRandom;\n\n/**\n * Creating a function returning the given array shuffled.\n *\n * @param  {function} rng - The RNG to use.\n * @return {function}     - The created function.\n */\nfunction createShuffleInPlace(rng) {\n  var customRandom = createRandom(rng);\n\n  /**\n   * Function returning the shuffled array.\n   *\n   * @param  {array}  sequence - Target sequence.\n   * @return {array}           - The shuffled sequence.\n   */\n  return function(sequence) {\n    var length = sequence.length,\n        lastIndex = length - 1;\n\n    var index = -1;\n\n    while (++index < length) {\n      var r = customRandom(index, lastIndex),\n          value = sequence[r];\n\n      sequence[r] = sequence[index];\n      sequence[index] = value;\n    }\n  };\n}\n\n/**\n * Default shuffle in place using `Math.random`.\n */\nvar shuffleInPlace = createShuffleInPlace(Math.random);\n\n/**\n * Exporting.\n */\nshuffleInPlace.createShuffleInPlace = createShuffleInPlace;\nmodule.exports = shuffleInPlace;\n","/**\n * Graphology CirclePack Layout\n * =============================\n *\n * Circlepack layout from d3-hierarchy/gephi.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\nvar shuffle = require('pandemonium/shuffle-in-place');\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  attributes: {\n    x: 'x',\n    y: 'y'\n  },\n  center: 0,\n  hierarchyAttributes: [],\n  rng: Math.random,\n  scale: 1\n};\n\n/**\n * Helpers.\n */\nfunction CircleWrap(id, x, y, r, circleWrap) {\n  this.wrappedCircle = circleWrap || null; //hacky d3 reference thing\n\n  this.children = {};\n  this.countChildren = 0;\n  this.id = id || null;\n  this.next = null;\n  this.previous = null;\n\n  this.x = x || null;\n  this.y = y || null;\n  if (circleWrap) this.r = 1010101;\n  // for debugging purposes - should not be used in this case\n  else this.r = r || 999;\n}\n\nCircleWrap.prototype.hasChildren = function () {\n  return this.countChildren > 0;\n};\n\nCircleWrap.prototype.addChild = function (id, child) {\n  this.children[id] = child;\n  ++this.countChildren;\n};\n\nCircleWrap.prototype.getChild = function (id) {\n  if (!this.children.hasOwnProperty(id)) {\n    var circleWrap = new CircleWrap();\n    this.children[id] = circleWrap;\n    ++this.countChildren;\n  }\n  return this.children[id];\n};\n\nCircleWrap.prototype.applyPositionToChildren = function () {\n  if (this.hasChildren()) {\n    var root = this; // using 'this' in Object.keys.forEach seems a bad idea\n    for (var key in root.children) {\n      var child = root.children[key];\n      child.x += root.x;\n      child.y += root.y;\n      child.applyPositionToChildren();\n    }\n  }\n};\n\nfunction setNode(/*Graph*/ graph, /*CircleWrap*/ parentCircle, /*Map*/ posMap) {\n  for (var key in parentCircle.children) {\n    var circle = parentCircle.children[key];\n    if (circle.hasChildren()) {\n      setNode(graph, circle, posMap);\n    } else {\n      posMap[circle.id] = {x: circle.x, y: circle.y};\n    }\n  }\n}\n\nfunction enclosesNot(/*CircleWrap*/ a, /*CircleWrap*/ b) {\n  var dr = a.r - b.r;\n  var dx = b.x - a.x;\n  var dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(/*CircleWrap*/ a, /*CircleWrap*/ b) {\n  var dr = a.r - b.r + 1e-6;\n  var dx = b.x - a.x;\n  var dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(/*CircleWrap*/ a, /*Array<CircleWrap>*/ B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis1(/*CircleWrap*/ a) {\n  return new CircleWrap(null, a.x, a.y, a.r);\n}\n\nfunction encloseBasis2(/*CircleWrap*/ a, /*CircleWrap*/ b) {\n  var x1 = a.x,\n    y1 = a.y,\n    r1 = a.r,\n    x2 = b.x,\n    y2 = b.y,\n    r2 = b.r,\n    x21 = x2 - x1,\n    y21 = y2 - y1,\n    r21 = r2 - r1,\n    l = Math.sqrt(x21 * x21 + y21 * y21);\n  return new CircleWrap(\n    null,\n    (x1 + x2 + (x21 / l) * r21) / 2,\n    (y1 + y2 + (y21 / l) * r21) / 2,\n    (l + r1 + r2) / 2\n  );\n}\n\nfunction encloseBasis3(/*CircleWrap*/ a, /*CircleWrap*/ b, /*CircleWrap*/ c) {\n  var x1 = a.x,\n    y1 = a.y,\n    r1 = a.r,\n    x2 = b.x,\n    y2 = b.y,\n    r2 = b.r,\n    x3 = c.x,\n    y3 = c.y,\n    r3 = c.r,\n    a2 = x1 - x2,\n    a3 = x1 - x3,\n    b2 = y1 - y2,\n    b3 = y1 - y3,\n    c2 = r2 - r1,\n    c3 = r3 - r1,\n    d1 = x1 * x1 + y1 * y1 - r1 * r1,\n    d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n    d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n    ab = a3 * b2 - a2 * b3,\n    xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n    xb = (b3 * c2 - b2 * c3) / ab,\n    ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n    yb = (a2 * c3 - a3 * c2) / ab,\n    A = xb * xb + yb * yb - 1,\n    B = 2 * (r1 + xa * xb + ya * yb),\n    C = xa * xa + ya * ya - r1 * r1,\n    r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return new CircleWrap(null, x1 + xa + xb * r, y1 + ya + yb * r, r);\n}\n\nfunction encloseBasis(/*Array<CircleWrap>*/ B) {\n  switch (B.length) {\n    case 1:\n      return encloseBasis1(B[0]);\n    case 2:\n      return encloseBasis2(B[0], B[1]);\n    case 3:\n      return encloseBasis3(B[0], B[1], B[2]);\n    default:\n      throw new Error(\n        'graphology-layout/circlepack: Invalid basis length ' + B.length\n      );\n  }\n}\n\nfunction extendBasis(/*Array<CircleWrap>*/ B, /*CircleWrap*/ p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (\n        enclosesNot(encloseBasis2(B[i], B[j]), p) &&\n        enclosesNot(encloseBasis2(B[i], p), B[j]) &&\n        enclosesNot(encloseBasis2(B[j], p), B[i]) &&\n        enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)\n      ) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error('graphology-layout/circlepack: extendBasis failure !');\n}\n\nfunction score(/*CircleWrap*/ node) {\n  var a = node.wrappedCircle;\n  var b = node.next.wrappedCircle;\n  var ab = a.r + b.r;\n  var dx = (a.x * b.r + b.x * a.r) / ab;\n  var dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction enclose(circles, shuffleFunc) {\n  var i = 0;\n  var circlesLoc = circles.slice();\n\n  var n = circles.length;\n  var B = [];\n  var p;\n  var e;\n  shuffleFunc(circlesLoc);\n  while (i < n) {\n    p = circlesLoc[i];\n    if (e && enclosesWeak(e, p)) {\n      ++i;\n    } else {\n      B = extendBasis(B, p);\n      e = encloseBasis(B);\n      i = 0;\n    }\n  }\n  return e;\n}\n\nfunction place(/*CircleWrap*/ b, /*CircleWrap*/ a, /*CircleWrap*/ c) {\n  var dx = b.x - a.x,\n    x,\n    a2,\n    dy = b.y - a.y,\n    y,\n    b2,\n    d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r;\n    a2 *= a2;\n    b2 = b.r + c.r;\n    b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(/*CircleWrap*/ a, /*CircleWrap*/ b) {\n  var dr = a.r + b.r - 1e-6,\n    dx = b.x - a.x,\n    dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction packEnclose(/*Array<CircleWrap>*/ circles, shuffleFunc) {\n  var n = circles.length;\n  if (n === 0) return 0;\n\n  var a, b, c, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0];\n  a.x = 0;\n  a.y = 0;\n  if (n <= 1) return a.r;\n\n  // Place the second circle.\n  b = circles[1];\n  a.x = -b.r;\n  b.x = a.r;\n  b.y = 0;\n  if (n <= 2) return a.r + b.r;\n\n  // Place the third circle.\n  c = circles[2];\n  place(b, a, c);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new CircleWrap(null, null, null, null, a);\n  b = new CircleWrap(null, null, null, null, b);\n  c = new CircleWrap(null, null, null, null, c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    c = circles[i];\n    place(a.wrappedCircle, b.wrappedCircle, c);\n    c = new CircleWrap(null, null, null, null, c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next;\n    k = a.previous;\n    sj = b.wrappedCircle.r;\n    sk = a.wrappedCircle.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j.wrappedCircle, c.wrappedCircle)) {\n          b = j;\n          a.next = b;\n          b.previous = a;\n          --i;\n          continue pack;\n        }\n        sj += j.wrappedCircle.r;\n        j = j.next;\n      } else {\n        if (intersects(k.wrappedCircle, c.wrappedCircle)) {\n          a = k;\n          a.next = b;\n          b.previous = a;\n          --i;\n          continue pack;\n        }\n        sk += k.wrappedCircle.r;\n        k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a;\n    c.next = b;\n    a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c;\n        aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b.wrappedCircle];\n  c = b;\n  var safety = 10000;\n  while ((c = c.next) !== b) {\n    if (--safety === 0) {\n      break;\n    }\n    a.push(c.wrappedCircle);\n  }\n  c = enclose(a, shuffleFunc);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) {\n    a = circles[i];\n    a.x -= c.x;\n    a.y -= c.y;\n  }\n  return c.r;\n}\n\nfunction packHierarchy(/*CircleWrap*/ parentCircle, shuffleFunc) {\n  var r = 0;\n  if (parentCircle.hasChildren()) {\n    //pack the children first because the radius is determined by how the children get packed (recursive)\n    for (var key in parentCircle.children) {\n      var circle = parentCircle.children[key];\n      if (circle.hasChildren()) {\n        circle.r = packHierarchy(circle, shuffleFunc);\n      }\n    }\n    //now that each circle has a radius set by its children, pack the circles at this level\n    r = packEnclose(Object.values(parentCircle.children), shuffleFunc);\n  }\n  return r;\n}\n\nfunction packHierarchyAndShift(/*CircleWrap*/ parentCircle, shuffleFunc) {\n  packHierarchy(parentCircle, shuffleFunc);\n  for (var key in parentCircle.children) {\n    var circle = parentCircle.children[key];\n    circle.applyPositionToChildren();\n  }\n}\n\n/**\n * Abstract function running the layout.\n *\n * @param  {Graph}    graph                   - Target  graph.\n * @param  {object}   [options]               - Options:\n * @param  {object}     [attributes]          - Attributes names to map.\n * @param  {number}     [center]              - Center of the layout.\n * @param  {string[]}   [hierarchyAttributes] - List of attributes used for the layout in decreasing order.\n * @param  {function}   [rng]                 - Custom RNG function to be used.\n * @param  {number}     [scale]               - Scale of the layout.\n * @return {object}                           - The positions by node.\n */\nfunction genericCirclePackLayout(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/circlepack: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var posMap = {},\n    positions = {},\n    nodes = graph.nodes(),\n    center = options.center,\n    hierarchyAttributes = options.hierarchyAttributes,\n    shuffleFunc = shuffle.createShuffleInPlace(options.rng),\n    scale = options.scale;\n\n  var container = new CircleWrap();\n\n  graph.forEachNode(function (key, attributes) {\n    var r = attributes.size ? attributes.size : 1;\n    var newCircleWrap = new CircleWrap(key, null, null, r);\n    var parentContainer = container;\n\n    hierarchyAttributes.forEach(function (v) {\n      var attr = attributes[v];\n      parentContainer = parentContainer.getChild(attr);\n    });\n\n    parentContainer.addChild(key, newCircleWrap);\n  });\n  packHierarchyAndShift(container, shuffleFunc);\n  setNode(graph, container, posMap);\n  var l = nodes.length,\n    x,\n    y,\n    i;\n  for (i = 0; i < l; i++) {\n    var node = nodes[i];\n\n    x = center + scale * posMap[node].x;\n    y = center + scale * posMap[node].y;\n\n    positions[node] = {\n      x: x,\n      y: y\n    };\n\n    if (assign) {\n      graph.setNodeAttribute(node, options.attributes.x, x);\n      graph.setNodeAttribute(node, options.attributes.y, y);\n    }\n  }\n  return positions;\n}\n\nvar circlePackLayout = genericCirclePackLayout.bind(null, false);\ncirclePackLayout.assign = genericCirclePackLayout.bind(null, true);\n\nmodule.exports = circlePackLayout;\n","/**\n * Graphology Circular Layout\n * ===========================\n *\n * Layout arranging the nodes in a circle.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  center: 0.5,\n  scale: 1\n};\n\n/**\n * Abstract function running the layout.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {object}   [options]      - Options:\n * @param  {object}     [attributes] - Attributes names to map.\n * @param  {number}     [center]     - Center of the layout.\n * @param  {number}     [scale]      - Scale of the layout.\n * @return {object}                  - The positions by node.\n */\nfunction genericCircularLayout(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/random: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var dimensions = options.dimensions;\n\n  if (!Array.isArray(dimensions) || dimensions.length !== 2)\n    throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  var center = options.center;\n  var scale = options.scale;\n  var tau = Math.PI * 2;\n\n  var offset = (center - 0.5) * scale;\n  var l = graph.order;\n\n  var x = dimensions[0];\n  var y = dimensions[1];\n\n  function assignPosition(i, target) {\n    target[x] = scale * Math.cos((i * tau) / l) + offset;\n    target[y] = scale * Math.sin((i * tau) / l) + offset;\n\n    return target;\n  }\n\n  var i = 0;\n\n  if (!assign) {\n    var positions = {};\n\n    graph.forEachNode(function (node) {\n      positions[node] = assignPosition(i++, {});\n    });\n\n    return positions;\n  }\n\n  graph.updateEachNodeAttributes(\n    function (_, attr) {\n      assignPosition(i++, attr);\n      return attr;\n    },\n    {\n      attributes: dimensions\n    }\n  );\n}\n\nvar circularLayout = genericCircularLayout.bind(null, false);\ncircularLayout.assign = genericCircularLayout.bind(null, true);\n\nmodule.exports = circularLayout;\n","/**\n * Graphology Random Layout\n * =========================\n *\n * Simple layout giving uniform random positions to the nodes.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  center: 0.5,\n  rng: Math.random,\n  scale: 1\n};\n\n/**\n * Abstract function running the layout.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {object}   [options]      - Options:\n * @param  {array}      [dimensions] - List of dimensions of the layout.\n * @param  {number}     [center]     - Center of the layout.\n * @param  {function}   [rng]        - Custom RNG function to be used.\n * @param  {number}     [scale]      - Scale of the layout.\n * @return {object}                  - The positions by node.\n */\nfunction genericRandomLayout(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/random: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var dimensions = options.dimensions;\n\n  if (!Array.isArray(dimensions) || dimensions.length < 1)\n    throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  var d = dimensions.length;\n  var center = options.center;\n  var rng = options.rng;\n  var scale = options.scale;\n\n  var offset = (center - 0.5) * scale;\n\n  function assignPosition(target) {\n    for (var i = 0; i < d; i++) {\n      target[dimensions[i]] = rng() * scale + offset;\n    }\n\n    return target;\n  }\n\n  if (!assign) {\n    var positions = {};\n\n    graph.forEachNode(function (node) {\n      positions[node] = assignPosition({});\n    });\n\n    return positions;\n  }\n\n  graph.updateEachNodeAttributes(\n    function (_, attr) {\n      assignPosition(attr);\n      return attr;\n    },\n    {\n      attributes: dimensions\n    }\n  );\n}\n\nvar randomLayout = genericRandomLayout.bind(null, false);\nrandomLayout.assign = genericRandomLayout.bind(null, true);\n\nmodule.exports = randomLayout;\n","/**\n * Graphology Rotation Layout Helper\n * ==================================\n *\n * Function rotating the coordinates of the graph.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Constants.\n */\nvar RAD_CONVERSION = Math.PI / 180;\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  centeredOnZero: false,\n  degrees: false\n};\n\n/**\n * Abstract function for rotating a graph's coordinates.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {number}   angle          - Rotation angle.\n * @param  {object}   [options]      - Options.\n * @return {object}                  - The positions by node.\n */\nfunction genericRotation(assign, graph, angle, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/rotation: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  if (options.degrees) angle *= RAD_CONVERSION;\n\n  var dimensions = options.dimensions;\n\n  if (!Array.isArray(dimensions) || dimensions.length !== 2)\n    throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  // Handling null graph\n  if (graph.order === 0) {\n    if (assign) return;\n\n    return {};\n  }\n\n  var xd = dimensions[0];\n  var yd = dimensions[1];\n\n  var xCenter = 0;\n  var yCenter = 0;\n\n  if (!options.centeredOnZero) {\n    // Finding bounds of the graph\n    var xMin = Infinity;\n    var xMax = -Infinity;\n    var yMin = Infinity;\n    var yMax = -Infinity;\n\n    graph.forEachNode(function (node, attr) {\n      var x = attr[xd];\n      var y = attr[yd];\n\n      if (x < xMin) xMin = x;\n      if (x > xMax) xMax = x;\n      if (y < yMin) yMin = y;\n      if (y > yMax) yMax = y;\n    });\n\n    xCenter = (xMin + xMax) / 2;\n    yCenter = (yMin + yMax) / 2;\n  }\n\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n\n  function assignPosition(target) {\n    var x = target[xd];\n    var y = target[yd];\n\n    target[xd] = xCenter + (x - xCenter) * cos - (y - yCenter) * sin;\n    target[yd] = yCenter + (x - xCenter) * sin + (y - yCenter) * cos;\n\n    return target;\n  }\n\n  if (!assign) {\n    var positions = {};\n\n    graph.forEachNode(function (node, attr) {\n      var o = {};\n      o[xd] = attr[xd];\n      o[yd] = attr[yd];\n      positions[node] = assignPosition(o);\n    });\n\n    return positions;\n  }\n\n  graph.updateEachNodeAttributes(\n    function (_, attr) {\n      assignPosition(attr);\n      return attr;\n    },\n    {\n      attributes: dimensions\n    }\n  );\n}\n\nvar rotation = genericRotation.bind(null, false);\nrotation.assign = genericRotation.bind(null, true);\n\nmodule.exports = rotation;\n","/**\n * Graphology Layout\n * ==================\n *\n * Library endpoint.\n */\nexports.circlepack = require('./circlepack.js');\nexports.circular = require('./circular.js');\nexports.random = require('./random.js');\nexports.rotation = require('./rotation.js');\n","module.exports = require('graphology-layout');\n","module.exports = require('graphology-layout');\n","/* eslint no-constant-condition: 0 */\n/**\n * Graphology ForceAtlas2 Iteration\n * =================================\n *\n * Function used to perform a single iteration of the algorithm.\n */\n\n/**\n * Matrices properties accessors.\n */\nvar NODE_X = 0;\nvar NODE_Y = 1;\nvar NODE_DX = 2;\nvar NODE_DY = 3;\nvar NODE_OLD_DX = 4;\nvar NODE_OLD_DY = 5;\nvar NODE_MASS = 6;\nvar NODE_CONVERGENCE = 7;\nvar NODE_SIZE = 8;\nvar NODE_FIXED = 9;\n\nvar EDGE_SOURCE = 0;\nvar EDGE_TARGET = 1;\nvar EDGE_WEIGHT = 2;\n\nvar REGION_NODE = 0;\nvar REGION_CENTER_X = 1;\nvar REGION_CENTER_Y = 2;\nvar REGION_SIZE = 3;\nvar REGION_NEXT_SIBLING = 4;\nvar REGION_FIRST_CHILD = 5;\nvar REGION_MASS = 6;\nvar REGION_MASS_CENTER_X = 7;\nvar REGION_MASS_CENTER_Y = 8;\n\nvar SUBDIVISION_ATTEMPTS = 3;\n\n/**\n * Constants.\n */\nvar PPN = 10;\nvar PPE = 3;\nvar PPR = 9;\n\nvar MAX_FORCE = 10;\n\n/**\n * Function used to perform a single interation of the algorithm.\n *\n * @param  {object}       options    - Layout options.\n * @param  {Float32Array} NodeMatrix - Node data.\n * @param  {Float32Array} EdgeMatrix - Edge data.\n * @return {object}                  - Some metadata.\n */\nmodule.exports = function iterate(options, NodeMatrix, EdgeMatrix) {\n  // Initializing variables\n  var l, r, n, n1, n2, rn, e, w, g, s;\n\n  var order = NodeMatrix.length,\n    size = EdgeMatrix.length;\n\n  var adjustSizes = options.adjustSizes;\n\n  var thetaSquared = options.barnesHutTheta * options.barnesHutTheta;\n\n  var outboundAttCompensation, coefficient, xDist, yDist, ewc, distance, factor;\n\n  var RegionMatrix = [];\n\n  // 1) Initializing layout data\n  //-----------------------------\n\n  // Resetting positions & computing max values\n  for (n = 0; n < order; n += PPN) {\n    NodeMatrix[n + NODE_OLD_DX] = NodeMatrix[n + NODE_DX];\n    NodeMatrix[n + NODE_OLD_DY] = NodeMatrix[n + NODE_DY];\n    NodeMatrix[n + NODE_DX] = 0;\n    NodeMatrix[n + NODE_DY] = 0;\n  }\n\n  // If outbound attraction distribution, compensate\n  if (options.outboundAttractionDistribution) {\n    outboundAttCompensation = 0;\n    for (n = 0; n < order; n += PPN) {\n      outboundAttCompensation += NodeMatrix[n + NODE_MASS];\n    }\n\n    outboundAttCompensation /= order / PPN;\n  }\n\n  // 1.bis) Barnes-Hut computation\n  //------------------------------\n\n  if (options.barnesHutOptimize) {\n    // Setting up\n    var minX = Infinity,\n      maxX = -Infinity,\n      minY = Infinity,\n      maxY = -Infinity,\n      q,\n      q2,\n      subdivisionAttempts;\n\n    // Computing min and max values\n    for (n = 0; n < order; n += PPN) {\n      minX = Math.min(minX, NodeMatrix[n + NODE_X]);\n      maxX = Math.max(maxX, NodeMatrix[n + NODE_X]);\n      minY = Math.min(minY, NodeMatrix[n + NODE_Y]);\n      maxY = Math.max(maxY, NodeMatrix[n + NODE_Y]);\n    }\n\n    // squarify bounds, it's a quadtree\n    var dx = maxX - minX,\n      dy = maxY - minY;\n    if (dx > dy) {\n      minY -= (dx - dy) / 2;\n      maxY = minY + dx;\n    } else {\n      minX -= (dy - dx) / 2;\n      maxX = minX + dy;\n    }\n\n    // Build the Barnes Hut root region\n    RegionMatrix[0 + REGION_NODE] = -1;\n    RegionMatrix[0 + REGION_CENTER_X] = (minX + maxX) / 2;\n    RegionMatrix[0 + REGION_CENTER_Y] = (minY + maxY) / 2;\n    RegionMatrix[0 + REGION_SIZE] = Math.max(maxX - minX, maxY - minY);\n    RegionMatrix[0 + REGION_NEXT_SIBLING] = -1;\n    RegionMatrix[0 + REGION_FIRST_CHILD] = -1;\n    RegionMatrix[0 + REGION_MASS] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_X] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_Y] = 0;\n\n    // Add each node in the tree\n    l = 1;\n    for (n = 0; n < order; n += PPN) {\n      // Current region, starting with root\n      r = 0;\n      subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n\n      while (true) {\n        // Are there sub-regions?\n\n        // We look at first child index\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // There are sub-regions\n\n          // We just iterate to find a \"leaf\" of the tree\n          // that is an empty region or a region with a single node\n          // (see next case)\n\n          // Find the quadrant of n\n          if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD];\n            } else {\n              // Bottom Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n            }\n          } else {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n            } else {\n              // Bottom Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n            }\n          }\n\n          // Update center of mass and mass (we only do it for non-leave regions)\n          RegionMatrix[r + REGION_MASS_CENTER_X] =\n            (RegionMatrix[r + REGION_MASS_CENTER_X] *\n              RegionMatrix[r + REGION_MASS] +\n              NodeMatrix[n + NODE_X] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS_CENTER_Y] =\n            (RegionMatrix[r + REGION_MASS_CENTER_Y] *\n              RegionMatrix[r + REGION_MASS] +\n              NodeMatrix[n + NODE_Y] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS] += NodeMatrix[n + NODE_MASS];\n\n          // Iterate on the right quadrant\n          r = q;\n          continue;\n        } else {\n          // There are no sub-regions: we are in a \"leaf\"\n\n          // Is there a node in this leave?\n          if (RegionMatrix[r + REGION_NODE] < 0) {\n            // There is no node in region:\n            // we record node n and go on\n            RegionMatrix[r + REGION_NODE] = n;\n            break;\n          } else {\n            // There is a node in this region\n\n            // We will need to create sub-regions, stick the two\n            // nodes (the old one r[0] and the new one n) in two\n            // subregions. If they fall in the same quadrant,\n            // we will iterate.\n\n            // Create sub-regions\n            RegionMatrix[r + REGION_FIRST_CHILD] = l * PPR;\n            w = RegionMatrix[r + REGION_SIZE] / 2; // new size (half)\n\n            // NOTE: we use screen coordinates\n            // from Top Left to Bottom Right\n\n            // Top Left sub-region\n            g = RegionMatrix[r + REGION_FIRST_CHILD];\n\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Left sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Top Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] =\n              RegionMatrix[r + REGION_NEXT_SIBLING];\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            l += 4;\n\n            // Now the goal is to find two different sub-regions\n            // for the two nodes: the one previously recorded (r[0])\n            // and the one we want to add (n)\n\n            // Find the quadrant of the old node\n            if (\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X] <\n              RegionMatrix[r + REGION_CENTER_X]\n            ) {\n              if (\n                NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] <\n                RegionMatrix[r + REGION_CENTER_Y]\n              ) {\n                // Top Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else {\n              if (\n                NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] <\n                RegionMatrix[r + REGION_CENTER_Y]\n              ) {\n                // Top Right quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n              } else {\n                // Bottom Right quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n              }\n            }\n\n            // We remove r[0] from the region r, add its mass to r and record it in q\n            RegionMatrix[r + REGION_MASS] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_MASS];\n            RegionMatrix[r + REGION_MASS_CENTER_X] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X];\n            RegionMatrix[r + REGION_MASS_CENTER_Y] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y];\n\n            RegionMatrix[q + REGION_NODE] = RegionMatrix[r + REGION_NODE];\n            RegionMatrix[r + REGION_NODE] = -1;\n\n            // Find the quadrant of n\n            if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Right quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n              } else {\n                // Bottom Right quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n              }\n            }\n\n            if (q === q2) {\n              // If both nodes are in the same quadrant,\n              // we have to try it again on this quadrant\n              if (subdivisionAttempts--) {\n                r = q;\n                continue; // while\n              } else {\n                // we are out of precision here, and we cannot subdivide anymore\n                // but we have to break the loop anyway\n                subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n                break; // while\n              }\n            }\n\n            // If both quadrants are different, we record n\n            // in its quadrant\n            RegionMatrix[q2 + REGION_NODE] = n;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  // 2) Repulsion\n  //--------------\n  // NOTES: adjustSizes = antiCollision & scalingRatio = coefficient\n\n  if (options.barnesHutOptimize) {\n    coefficient = options.scalingRatio;\n\n    // Applying repulsion through regions\n    for (n = 0; n < order; n += PPN) {\n      // Computing leaf quad nodes iteration\n\n      r = 0; // Starting with root region\n      while (true) {\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // The region has sub-regions\n\n          // We run the Barnes Hut test to see if we are at the right distance\n          distance =\n            Math.pow(\n              NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X],\n              2\n            ) +\n            Math.pow(\n              NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y],\n              2\n            );\n\n          s = RegionMatrix[r + REGION_SIZE];\n\n          if ((4 * s * s) / distance < thetaSquared) {\n            // We treat the region as a single body, and we repulse\n\n            xDist =\n              NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X];\n            yDist =\n              NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y];\n\n            if (adjustSizes === true) {\n              //-- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS] *\n                    NodeMatrix[n + NODE_SIZE]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor =\n                  (-coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              //-- Linear Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n\n            // When this is done, we iterate. We have to look at the next sibling.\n            r = RegionMatrix[r + REGION_NEXT_SIBLING];\n            if (r < 0) break; // No next sibling: we have finished the tree\n\n            continue;\n          } else {\n            // The region is too close and we have to look at sub-regions\n            r = RegionMatrix[r + REGION_FIRST_CHILD];\n            continue;\n          }\n        } else {\n          // The region has no sub-region\n          // If there is a node r[0] and it is not n, then repulse\n          rn = RegionMatrix[r + REGION_NODE];\n\n          if (rn >= 0 && rn !== n) {\n            xDist = NodeMatrix[n + NODE_X] - NodeMatrix[rn + NODE_X];\n            yDist = NodeMatrix[n + NODE_Y] - NodeMatrix[rn + NODE_Y];\n\n            distance = xDist * xDist + yDist * yDist;\n\n            if (adjustSizes === true) {\n              //-- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS] *\n                    NodeMatrix[n + NODE_SIZE]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor =\n                  (-coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              //-- Linear Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n          }\n\n          // When this is done, we iterate. We have to look at the next sibling.\n          r = RegionMatrix[r + REGION_NEXT_SIBLING];\n\n          if (r < 0) break; // No next sibling: we have finished the tree\n\n          continue;\n        }\n      }\n    }\n  } else {\n    coefficient = options.scalingRatio;\n\n    // Square iteration\n    for (n1 = 0; n1 < order; n1 += PPN) {\n      for (n2 = 0; n2 < n1; n2 += PPN) {\n        // Common to both methods\n        xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n        yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n        if (adjustSizes === true) {\n          //-- Anticollision Linear Repulsion\n          distance =\n            Math.sqrt(xDist * xDist + yDist * yDist) -\n            NodeMatrix[n1 + NODE_SIZE] -\n            NodeMatrix[n2 + NODE_SIZE];\n\n          if (distance > 0) {\n            factor =\n              (coefficient *\n                NodeMatrix[n1 + NODE_MASS] *\n                NodeMatrix[n2 + NODE_MASS]) /\n              distance /\n              distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] += xDist * factor;\n            NodeMatrix[n2 + NODE_DY] += yDist * factor;\n          } else if (distance < 0) {\n            factor =\n              100 *\n              coefficient *\n              NodeMatrix[n1 + NODE_MASS] *\n              NodeMatrix[n2 + NODE_MASS];\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        } else {\n          //-- Linear Repulsion\n          distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n          if (distance > 0) {\n            factor =\n              (coefficient *\n                NodeMatrix[n1 + NODE_MASS] *\n                NodeMatrix[n2 + NODE_MASS]) /\n              distance /\n              distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        }\n      }\n    }\n  }\n\n  // 3) Gravity\n  //------------\n  g = options.gravity / options.scalingRatio;\n  coefficient = options.scalingRatio;\n  for (n = 0; n < order; n += PPN) {\n    factor = 0;\n\n    // Common to both methods\n    xDist = NodeMatrix[n + NODE_X];\n    yDist = NodeMatrix[n + NODE_Y];\n    distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\n    if (options.strongGravityMode) {\n      //-- Strong gravity\n      if (distance > 0) factor = coefficient * NodeMatrix[n + NODE_MASS] * g;\n    } else {\n      //-- Linear Anti-collision Repulsion n\n      if (distance > 0)\n        factor = (coefficient * NodeMatrix[n + NODE_MASS] * g * NodeMatrix[n + NODE_SIZE]) / distance;\n    }\n\n    // Updating node's dx and dy\n    NodeMatrix[n + NODE_DX] -= xDist * factor;\n    NodeMatrix[n + NODE_DY] -= yDist * factor;\n  }\n\n  // 4) Attraction\n  //---------------\n  coefficient =\n    1 * (options.outboundAttractionDistribution ? outboundAttCompensation : 1);\n\n  // TODO: simplify distance\n  // TODO: coefficient is always used as -c --> optimize?\n  for (e = 0; e < size; e += PPE) {\n    n1 = EdgeMatrix[e + EDGE_SOURCE];\n    n2 = EdgeMatrix[e + EDGE_TARGET];\n    w = EdgeMatrix[e + EDGE_WEIGHT];\n\n    // Edge weight influence\n    ewc = Math.pow(w, options.edgeWeightInfluence);\n\n    // Common measures\n    xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n    yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n    // Applying attraction to nodes\n    if (adjustSizes === true) {\n      distance = Math.sqrt(\n        Math.pow(xDist, 2) +\n          Math.pow(yDist, 2) -\n          NodeMatrix[n1 + NODE_SIZE] -\n          NodeMatrix[n2 + NODE_SIZE]\n      );\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          //-- LinLog Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor =\n              (-coefficient * ewc * Math.log(1 + distance)) /\n              distance /\n              NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- LinLog Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n          }\n        }\n      } else {\n        if (options.outboundAttractionDistribution) {\n          //-- Linear Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- Linear Anti-collision Attraction\n          if (distance > 0) {\n            factor = -coefficient * ewc;\n          }\n        }\n      }\n    } else {\n      distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          //-- LinLog Degree Distributed Attraction\n          if (distance > 0) {\n            factor =\n              (-coefficient * ewc * Math.log(1 + distance)) /\n              distance /\n              NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- LinLog Attraction\n          if (distance > 0)\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n        }\n      } else {\n        if (options.outboundAttractionDistribution) {\n          //-- Linear Attraction Mass Distributed\n          // NOTE: Distance is set to 1 to override next condition\n          distance = 1;\n          factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n        } else {\n          //-- Linear Attraction\n          // NOTE: Distance is set to 1 to override next condition\n          distance = 1;\n          factor = -coefficient * ewc;\n        }\n      }\n    }\n\n    // Updating nodes' dx and dy\n    // TODO: if condition or factor = 1?\n    if (distance > 0) {\n      // Updating nodes' dx and dy\n      NodeMatrix[n1 + NODE_DX] += xDist * factor;\n      NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n      NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n      NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n    }\n  }\n\n  // 5) Apply Forces\n  //-----------------\n  var force, swinging, traction, nodespeed, newX, newY;\n\n  // MATH: sqrt and square distances\n  if (adjustSizes === true) {\n    for (n = 0; n < order; n += PPN) {\n      if (NodeMatrix[n + NODE_FIXED] !== 1) {\n        force = Math.sqrt(\n          Math.pow(NodeMatrix[n + NODE_DX], 2) +\n            Math.pow(NodeMatrix[n + NODE_DY], 2)\n        );\n\n        if (force > MAX_FORCE) {\n          NodeMatrix[n + NODE_DX] =\n            (NodeMatrix[n + NODE_DX] * MAX_FORCE) / force;\n          NodeMatrix[n + NODE_DY] =\n            (NodeMatrix[n + NODE_DY] * MAX_FORCE) / force;\n        }\n\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY])\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY])\n          ) / 2;\n\n        nodespeed = (0.1 * Math.log(1 + traction)) / (1 + Math.sqrt(swinging));\n\n        // Updating node's positon\n        newX =\n          NodeMatrix[n + NODE_X] +\n          NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY =\n          NodeMatrix[n + NODE_Y] +\n          NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  } else {\n    for (n = 0; n < order; n += PPN) {\n      if (NodeMatrix[n + NODE_FIXED] !== 1) {\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY])\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY])\n          ) / 2;\n\n        nodespeed =\n          (NodeMatrix[n + NODE_CONVERGENCE] * Math.log(1 + traction)) /\n          (1 + Math.sqrt(swinging));\n\n        // Updating node convergence\n        NodeMatrix[n + NODE_CONVERGENCE] = Math.min(\n          1,\n          Math.sqrt(\n            (nodespeed *\n              (Math.pow(NodeMatrix[n + NODE_DX], 2) +\n                Math.pow(NodeMatrix[n + NODE_DY], 2))) /\n              (1 + Math.sqrt(swinging))\n          )\n        );\n\n        // Updating node's positon\n        newX =\n          NodeMatrix[n + NODE_X] +\n          NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY =\n          NodeMatrix[n + NODE_Y] +\n          NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  }\n\n  // We return the information about the layout (no need to return the matrices)\n  return {};\n};\n","/**\n * Graphology ForceAtlas2 Helpers\n * ===============================\n *\n * Miscellaneous helper functions.\n */\n\n/**\n * Constants.\n */\nvar PPN = 10;\nvar PPE = 3;\n\n/**\n * Very simple Object.assign-like function.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nexports.assign = function (target) {\n  target = target || {};\n\n  var objects = Array.prototype.slice.call(arguments).slice(1),\n    i,\n    k,\n    l;\n\n  for (i = 0, l = objects.length; i < l; i++) {\n    if (!objects[i]) continue;\n\n    for (k in objects[i]) target[k] = objects[i][k];\n  }\n\n  return target;\n};\n\n/**\n * Function used to validate the given settings.\n *\n * @param  {object}      settings - Settings to validate.\n * @return {object|null}\n */\nexports.validateSettings = function (settings) {\n  if ('linLogMode' in settings && typeof settings.linLogMode !== 'boolean')\n    return {message: 'the `linLogMode` setting should be a boolean.'};\n\n  if (\n    'outboundAttractionDistribution' in settings &&\n    typeof settings.outboundAttractionDistribution !== 'boolean'\n  )\n    return {\n      message:\n        'the `outboundAttractionDistribution` setting should be a boolean.'\n    };\n\n  if ('adjustSizes' in settings && typeof settings.adjustSizes !== 'boolean')\n    return {message: 'the `adjustSizes` setting should be a boolean.'};\n\n  if (\n    'edgeWeightInfluence' in settings &&\n    typeof settings.edgeWeightInfluence !== 'number'\n  )\n    return {\n      message: 'the `edgeWeightInfluence` setting should be a number.'\n    };\n\n  if (\n    'scalingRatio' in settings &&\n    !(typeof settings.scalingRatio === 'number' && settings.scalingRatio >= 0)\n  )\n    return {message: 'the `scalingRatio` setting should be a number >= 0.'};\n\n  if (\n    'strongGravityMode' in settings &&\n    typeof settings.strongGravityMode !== 'boolean'\n  )\n    return {message: 'the `strongGravityMode` setting should be a boolean.'};\n\n  if (\n    'gravity' in settings &&\n    !(typeof settings.gravity === 'number' && settings.gravity >= 0)\n  )\n    return {message: 'the `gravity` setting should be a number >= 0.'};\n\n  if (\n    'slowDown' in settings &&\n    !(typeof settings.slowDown === 'number' || settings.slowDown >= 0)\n  )\n    return {message: 'the `slowDown` setting should be a number >= 0.'};\n\n  if (\n    'barnesHutOptimize' in settings &&\n    typeof settings.barnesHutOptimize !== 'boolean'\n  )\n    return {message: 'the `barnesHutOptimize` setting should be a boolean.'};\n\n  if (\n    'barnesHutTheta' in settings &&\n    !(\n      typeof settings.barnesHutTheta === 'number' &&\n      settings.barnesHutTheta >= 0\n    )\n  )\n    return {message: 'the `barnesHutTheta` setting should be a number >= 0.'};\n\n  return null;\n};\n\n/**\n * Function generating a flat matrix for both nodes & edges of the given graph.\n *\n * @param  {Graph}       graph           - Target graph.\n * @param  {string|null} weightAttribute - Name of the edge weight attribute.\n * @return {object}                      - Both matrices.\n */\nexports.graphToByteArrays = function (graph, weightAttribute) {\n  var order = graph.order;\n  var size = graph.size;\n  var index = {};\n  var j;\n\n  var NodeMatrix = new Float32Array(order * PPN);\n  var EdgeMatrix = new Float32Array(size * PPE);\n\n  // Iterate through nodes\n  j = 0;\n  graph.forEachNode(function (node, attr) {\n    // Node index\n    index[node] = j;\n\n    // Populating byte array\n    NodeMatrix[j] = attr.x;\n    NodeMatrix[j + 1] = attr.y;\n    NodeMatrix[j + 2] = 0;\n    NodeMatrix[j + 3] = 0;\n    NodeMatrix[j + 4] = 0;\n    NodeMatrix[j + 5] = 0;\n    NodeMatrix[j + 6] = 1 + graph.degree(node);\n    NodeMatrix[j + 7] = 1;\n    NodeMatrix[j + 8] = attr.size || 1;\n    NodeMatrix[j + 9] = attr.fixed ? 1 : 0;\n    j += PPN;\n  });\n\n  // Iterate through edges\n  var weightGetter = function (attr) {\n    if (!weightAttribute) return 1;\n\n    var w = attr[weightAttribute];\n\n    if (typeof w !== 'number' || isNaN(w)) w = 1;\n\n    return w;\n  };\n\n  j = 0;\n  graph.forEachEdge(function (_, attr, source, target) {\n    // Populating byte array\n    EdgeMatrix[j] = index[source];\n    EdgeMatrix[j + 1] = index[target];\n    EdgeMatrix[j + 2] = weightGetter(attr);\n    j += PPE;\n  });\n\n  return {\n    nodes: NodeMatrix,\n    edges: EdgeMatrix\n  };\n};\n\n/**\n * Function applying the layout back to the graph.\n *\n * @param {Graph}        graph      - Target graph.\n * @param {Float32Array} NodeMatrix - Node matrix.\n */\nexports.assignLayoutChanges = function (graph, NodeMatrix) {\n  var i = 0;\n\n  graph.updateEachNodeAttributes(\n    function (node, attr) {\n      attr.x = NodeMatrix[i];\n      attr.y = NodeMatrix[i + 1];\n\n      i += PPN;\n\n      return attr;\n    },\n    {attributes: ['x', 'y']}\n  );\n};\n\n/**\n * Function collecting the layout positions.\n *\n * @param  {Graph}        graph      - Target graph.\n * @param  {Float32Array} NodeMatrix - Node matrix.\n * @return {object}                  - Map to node positions.\n */\nexports.collectLayoutChanges = function (graph, NodeMatrix) {\n  var nodes = graph.nodes(),\n    positions = {};\n\n  for (var i = 0, j = 0, l = NodeMatrix.length; i < l; i += PPN) {\n    positions[nodes[j]] = {\n      x: NodeMatrix[i],\n      y: NodeMatrix[i + 1]\n    };\n\n    j++;\n  }\n\n  return positions;\n};\n\n/**\n * Function returning a web worker from the given function.\n *\n * @param  {function}  fn - Function for the worker.\n * @return {DOMString}\n */\nexports.createWorker = function createWorker(fn) {\n  var xURL = window.URL || window.webkitURL;\n  var code = fn.toString();\n  var objectUrl = xURL.createObjectURL(\n    new Blob(['(' + code + ').call(this);'], {type: 'text/javascript'})\n  );\n  var worker = new Worker(objectUrl);\n  xURL.revokeObjectURL(objectUrl);\n\n  return worker;\n};\n","/**\n * Graphology ForceAtlas2 Layout Default Settings\n * ===============================================\n */\nmodule.exports = {\n  linLogMode: false,\n  outboundAttractionDistribution: false,\n  adjustSizes: false,\n  edgeWeightInfluence: 1,\n  scalingRatio: 1,\n  strongGravityMode: false,\n  gravity: 1,\n  slowDown: 1,\n  barnesHutOptimize: false,\n  barnesHutTheta: 0.5\n};\n","/**\n * Graphology ForceAtlas2 Layout\n * ==============================\n *\n * Library endpoint.\n */\nvar isGraph = require('graphology-utils/is-graph'),\n  iterate = require('./iterate.js'),\n  helpers = require('./helpers.js');\n\nvar DEFAULT_SETTINGS = require('./defaults.js');\n\n/**\n * Asbtract function used to run a certain number of iterations.\n *\n * @param  {boolean}       assign       - Whether to assign positions.\n * @param  {Graph}         graph        - Target graph.\n * @param  {object|number} params       - If number, params.iterations, else:\n * @param  {object}          attributes - Attribute names:\n * @param  {string}            weight   - Name of the edge weight attribute.\n * @param  {boolean}         weighted   - Whether to take edge weights into account.\n * @param  {number}          iterations - Number of iterations.\n * @param  {object}          [settings] - Settings.\n * @return {object|undefined}\n */\nfunction abstractSynchronousLayout(assign, graph, params) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-forceatlas2: the given graph is not a valid graphology instance.'\n    );\n\n  if (typeof params === 'number') params = {iterations: params};\n\n  var iterations = params.iterations;\n\n  if (typeof iterations !== 'number')\n    throw new Error(\n      'graphology-layout-forceatlas2: invalid number of iterations.'\n    );\n\n  if (iterations <= 0)\n    throw new Error(\n      'graphology-layout-forceatlas2: you should provide a positive number of iterations.'\n    );\n\n  var attributes = params.attributes || {};\n  var weightAttribute = params.weighted ? attributes.weight || 'weight' : null;\n\n  // Validating settings\n  var settings = helpers.assign({}, DEFAULT_SETTINGS, params.settings);\n  var validationError = helpers.validateSettings(settings);\n\n  if (validationError)\n    throw new Error(\n      'graphology-layout-forceatlas2: ' + validationError.message\n    );\n\n  // Building matrices\n  var matrices = helpers.graphToByteArrays(graph, weightAttribute);\n\n  var i;\n\n  // Iterating\n  for (i = 0; i < iterations; i++)\n    iterate(settings, matrices.nodes, matrices.edges);\n\n  // Applying\n  if (assign) {\n    helpers.assignLayoutChanges(graph, matrices.nodes);\n    return;\n  }\n\n  return helpers.collectLayoutChanges(graph, matrices.nodes);\n}\n\n/**\n * Function returning sane layout settings for the given graph.\n *\n * @param  {Graph|number} graph - Target graph or graph order.\n * @return {object}\n */\nfunction inferSettings(graph) {\n  var order = typeof graph === 'number' ? graph : graph.order;\n\n  return {\n    barnesHutOptimize: order > 2000,\n    strongGravityMode: true,\n    gravity: 0.05,\n    scalingRatio: 10,\n    slowDown: 1 + Math.log(order)\n  };\n}\n\n/**\n * Exporting.\n */\nvar synchronousLayout = abstractSynchronousLayout.bind(null, false);\nsynchronousLayout.assign = abstractSynchronousLayout.bind(null, true);\nsynchronousLayout.inferSettings = inferSettings;\n\nmodule.exports = synchronousLayout;\n","module.exports = require('graphology-layout-forceatlas2');\n","/**\n * Graphology Noverlap Iteration\n * ==============================\n *\n * Function used to perform a single iteration of the algorithm.\n */\n\n/**\n * Matrices properties accessors.\n */\nvar NODE_X = 0,\n  NODE_Y = 1,\n  NODE_SIZE = 2;\n\n/**\n * Constants.\n */\nvar PPN = 3;\n\n/**\n * Helpers.\n */\nfunction hashPair(a, b) {\n  return a + '§' + b;\n}\n\nfunction jitter() {\n  return 0.01 * (0.5 - Math.random());\n}\n\n/**\n * Function used to perform a single interation of the algorithm.\n *\n * @param  {object}       options    - Layout options.\n * @param  {Float32Array} NodeMatrix - Node data.\n * @return {object}                  - Some metadata.\n */\nmodule.exports = function iterate(options, NodeMatrix) {\n  // Caching options\n  var margin = options.margin;\n  var ratio = options.ratio;\n  var expansion = options.expansion;\n  var gridSize = options.gridSize; // TODO: decrease grid size when few nodes?\n  var speed = options.speed;\n\n  // Generic iteration variables\n  var i, j, x, y, l, size;\n  var converged = true;\n\n  var length = NodeMatrix.length;\n  var order = (length / PPN) | 0;\n\n  var deltaX = new Float32Array(order);\n  var deltaY = new Float32Array(order);\n\n  // Finding the extents of our space\n  var xMin = Infinity;\n  var yMin = Infinity;\n  var xMax = -Infinity;\n  var yMax = -Infinity;\n\n  for (i = 0; i < length; i += PPN) {\n    x = NodeMatrix[i + NODE_X];\n    y = NodeMatrix[i + NODE_Y];\n    size = NodeMatrix[i + NODE_SIZE] * ratio + margin;\n\n    xMin = Math.min(xMin, x - size);\n    xMax = Math.max(xMax, x + size);\n    yMin = Math.min(yMin, y - size);\n    yMax = Math.max(yMax, y + size);\n  }\n\n  var width = xMax - xMin;\n  var height = yMax - yMin;\n  var xCenter = (xMin + xMax) / 2;\n  var yCenter = (yMin + yMax) / 2;\n\n  xMin = xCenter - (expansion * width) / 2;\n  xMax = xCenter + (expansion * width) / 2;\n  yMin = yCenter - (expansion * height) / 2;\n  yMax = yCenter + (expansion * height) / 2;\n\n  // Building grid\n  var grid = new Array(gridSize * gridSize),\n    gridLength = grid.length,\n    c;\n\n  for (c = 0; c < gridLength; c++) grid[c] = [];\n\n  var nxMin, nxMax, nyMin, nyMax;\n  var xMinBox, xMaxBox, yMinBox, yMaxBox;\n\n  var col, row;\n\n  for (i = 0; i < length; i += PPN) {\n    x = NodeMatrix[i + NODE_X];\n    y = NodeMatrix[i + NODE_Y];\n    size = NodeMatrix[i + NODE_SIZE] * ratio + margin;\n\n    nxMin = x - size;\n    nxMax = x + size;\n    nyMin = y - size;\n    nyMax = y + size;\n\n    xMinBox = Math.floor((gridSize * (nxMin - xMin)) / (xMax - xMin));\n    xMaxBox = Math.floor((gridSize * (nxMax - xMin)) / (xMax - xMin));\n    yMinBox = Math.floor((gridSize * (nyMin - yMin)) / (yMax - yMin));\n    yMaxBox = Math.floor((gridSize * (nyMax - yMin)) / (yMax - yMin));\n\n    for (col = xMinBox; col <= xMaxBox; col++) {\n      for (row = yMinBox; row <= yMaxBox; row++) {\n        grid[col * gridSize + row].push(i);\n      }\n    }\n  }\n\n  // Computing collisions\n  var cell;\n\n  var collisions = new Set();\n\n  var n1, n2, x1, x2, y1, y2, s1, s2, h;\n\n  var xDist, yDist, dist, collision;\n\n  for (c = 0; c < gridLength; c++) {\n    cell = grid[c];\n\n    for (i = 0, l = cell.length; i < l; i++) {\n      n1 = cell[i];\n\n      x1 = NodeMatrix[n1 + NODE_X];\n      y1 = NodeMatrix[n1 + NODE_Y];\n      s1 = NodeMatrix[n1 + NODE_SIZE];\n\n      for (j = i + 1; j < l; j++) {\n        n2 = cell[j];\n        h = hashPair(n1, n2);\n\n        if (gridLength > 1 && collisions.has(h)) continue;\n\n        if (gridLength > 1) collisions.add(h);\n\n        x2 = NodeMatrix[n2 + NODE_X];\n        y2 = NodeMatrix[n2 + NODE_Y];\n        s2 = NodeMatrix[n2 + NODE_SIZE];\n\n        xDist = x2 - x1;\n        yDist = y2 - y1;\n        dist = Math.sqrt(xDist * xDist + yDist * yDist);\n        collision = dist < s1 * ratio + margin + (s2 * ratio + margin);\n\n        if (collision) {\n          converged = false;\n\n          n2 = (n2 / PPN) | 0;\n\n          if (dist > 0) {\n            deltaX[n2] += (xDist / dist) * (1 + s1);\n            deltaY[n2] += (yDist / dist) * (1 + s1);\n          } else {\n            // Nodes are on the exact same spot, we need to jitter a bit\n            deltaX[n2] += width * jitter();\n            deltaY[n2] += height * jitter();\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0, j = 0; i < length; i += PPN, j++) {\n    NodeMatrix[i + NODE_X] += deltaX[j] * 0.1 * speed;\n    NodeMatrix[i + NODE_Y] += deltaY[j] * 0.1 * speed;\n  }\n\n  return {converged: converged};\n};\n","/**\n * Graphology Noverlap Helpers\n * ============================\n *\n * Miscellaneous helper functions.\n */\n\n/**\n * Constants.\n */\nvar PPN = 3;\n\n/**\n * Function used to validate the given settings.\n *\n * @param  {object}      settings - Settings to validate.\n * @return {object|null}\n */\nexports.validateSettings = function (settings) {\n  if (\n    ('gridSize' in settings && typeof settings.gridSize !== 'number') ||\n    settings.gridSize <= 0\n  )\n    return {message: 'the `gridSize` setting should be a positive number.'};\n\n  if (\n    ('margin' in settings && typeof settings.margin !== 'number') ||\n    settings.margin < 0\n  )\n    return {\n      message: 'the `margin` setting should be 0 or a positive number.'\n    };\n\n  if (\n    ('expansion' in settings && typeof settings.expansion !== 'number') ||\n    settings.expansion <= 0\n  )\n    return {message: 'the `expansion` setting should be a positive number.'};\n\n  if (\n    ('ratio' in settings && typeof settings.ratio !== 'number') ||\n    settings.ratio <= 0\n  )\n    return {message: 'the `ratio` setting should be a positive number.'};\n\n  if (\n    ('speed' in settings && typeof settings.speed !== 'number') ||\n    settings.speed <= 0\n  )\n    return {message: 'the `speed` setting should be a positive number.'};\n\n  return null;\n};\n\n/**\n * Function generating a flat matrix for the given graph's nodes.\n *\n * @param  {Graph}        graph   - Target graph.\n * @param  {function}     reducer - Node reducer function.\n * @return {Float32Array}         - The node matrix.\n */\nexports.graphToByteArray = function (graph, reducer) {\n  var order = graph.order;\n\n  var matrix = new Float32Array(order * PPN);\n\n  var j = 0;\n\n  graph.forEachNode(function (node, attr) {\n    if (typeof reducer === 'function') attr = reducer(node, attr);\n\n    matrix[j] = attr.x;\n    matrix[j + 1] = attr.y;\n    matrix[j + 2] = attr.size || 1;\n    j += PPN;\n  });\n\n  return matrix;\n};\n\n/**\n * Function applying the layout back to the graph.\n *\n * @param {Graph}        graph      - Target graph.\n * @param {Float32Array} NodeMatrix - Node matrix.\n * @param {function}     reducer    - Reducing function.\n */\nexports.assignLayoutChanges = function (graph, NodeMatrix, reducer) {\n  var i = 0;\n\n  graph.forEachNode(function (node) {\n    var pos = {\n      x: NodeMatrix[i],\n      y: NodeMatrix[i + 1]\n    };\n\n    if (typeof reducer === 'function') pos = reducer(node, pos);\n\n    graph.mergeNodeAttributes(node, pos);\n\n    i += PPN;\n  });\n};\n\n/**\n * Function collecting the layout positions.\n *\n * @param  {Graph}        graph      - Target graph.\n * @param  {Float32Array} NodeMatrix - Node matrix.\n * @param  {function}     reducer    - Reducing function.\n * @return {object}                  - Map to node positions.\n */\nexports.collectLayoutChanges = function (graph, NodeMatrix, reducer) {\n  var positions = {};\n\n  var i = 0;\n\n  graph.forEachNode(function (node) {\n    var pos = {\n      x: NodeMatrix[i],\n      y: NodeMatrix[i + 1]\n    };\n\n    if (typeof reducer === 'function') pos = reducer(node, pos);\n\n    positions[node] = pos;\n\n    i += PPN;\n  });\n\n  return positions;\n};\n\n/**\n * Function returning a web worker from the given function.\n *\n * @param  {function}  fn - Function for the worker.\n * @return {DOMString}\n */\nexports.createWorker = function createWorker(fn) {\n  var xURL = window.URL || window.webkitURL;\n  var code = fn.toString();\n  var objectUrl = xURL.createObjectURL(\n    new Blob(['(' + code + ').call(this);'], {type: 'text/javascript'})\n  );\n  var worker = new Worker(objectUrl);\n  xURL.revokeObjectURL(objectUrl);\n\n  return worker;\n};\n","/**\n * Graphology Noverlap Layout Default Settings\n * ============================================\n */\nmodule.exports = {\n  gridSize: 20,\n  margin: 5,\n  expansion: 1.1,\n  ratio: 1.0,\n  speed: 3\n};\n","/**\n * Graphology Noverlap Layout\n * ===========================\n *\n * Library endpoint.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar iterate = require('./iterate.js');\nvar helpers = require('./helpers.js');\n\nvar DEFAULT_SETTINGS = require('./defaults.js');\nvar DEFAULT_MAX_ITERATIONS = 500;\n\n/**\n * Asbtract function used to run a certain number of iterations.\n *\n * @param  {boolean}       assign       - Whether to assign positions.\n * @param  {Graph}         graph        - Target graph.\n * @param  {object|number} params       - If number, params.maxIterations, else:\n * @param  {number}          maxIterations - Maximum number of iterations.\n * @param  {object}          [settings] - Settings.\n * @return {object|undefined}\n */\nfunction abstractSynchronousLayout(assign, graph, params) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-noverlap: the given graph is not a valid graphology instance.'\n    );\n\n  if (typeof params === 'number') params = {maxIterations: params};\n  else params = params || {};\n\n  var maxIterations = params.maxIterations || DEFAULT_MAX_ITERATIONS;\n\n  if (typeof maxIterations !== 'number' || maxIterations <= 0)\n    throw new Error(\n      'graphology-layout-force: you should provide a positive number of maximum iterations.'\n    );\n\n  // Validating settings\n  var settings = Object.assign({}, DEFAULT_SETTINGS, params.settings),\n    validationError = helpers.validateSettings(settings);\n\n  if (validationError)\n    throw new Error('graphology-layout-noverlap: ' + validationError.message);\n\n  // Building matrices\n  var matrix = helpers.graphToByteArray(graph, params.inputReducer),\n    converged = false,\n    i;\n\n  // Iterating\n  for (i = 0; i < maxIterations && !converged; i++)\n    converged = iterate(settings, matrix).converged;\n\n  // Applying\n  if (assign) {\n    helpers.assignLayoutChanges(graph, matrix, params.outputReducer);\n    return;\n  }\n\n  return helpers.collectLayoutChanges(graph, matrix, params.outputReducer);\n}\n\n/**\n * Exporting.\n */\nvar synchronousLayout = abstractSynchronousLayout.bind(null, false);\nsynchronousLayout.assign = abstractSynchronousLayout.bind(null, true);\n\nmodule.exports = synchronousLayout;\n","module.exports = require('graphology-layout-noverlap');\n","/**\n * Graphology Degree Centrality\n * =============================\n *\n * Function computing degree centrality.\n */\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Asbtract function to perform any kind of degree centrality.\n *\n * Intuitively, the degree centrality of a node is the fraction of nodes it\n * is connected to.\n *\n * @param  {boolean} assign           - Whether to assign the result to the nodes.\n * @param  {string}  method           - Method of the graph to get the degree.\n * @param  {Graph}   graph            - A graphology instance.\n * @param  {object}  [options]        - Options:\n * @param  {string}    [nodeCentralityAttribute] - Name of the attribute to assign.\n * @return {object|void}\n */\nfunction abstractDegreeCentrality(assign, method, graph, options) {\n  var name = method + 'Centrality';\n\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-centrality/' +\n        name +\n        ': the given graph is not a valid graphology instance.'\n    );\n\n  if (method !== 'degree' && graph.type === 'undirected')\n    throw new Error(\n      'graphology-centrality/' +\n        name +\n        ': cannot compute ' +\n        method +\n        ' centrality on an undirected graph.'\n    );\n\n  // Solving options\n  options = options || {};\n\n  var centralityAttribute = options.nodeCentralityAttribute || name;\n\n  var ratio = graph.order - 1;\n  var getDegree = graph[method].bind(graph);\n\n  if (assign) {\n    graph.updateEachNodeAttributes(\n      function (node, attr) {\n        attr[centralityAttribute] = getDegree(node) / ratio;\n        return attr;\n      },\n      {attributes: [centralityAttribute]}\n    );\n\n    return;\n  }\n\n  var centralities = {};\n\n  graph.forEachNode(function (node) {\n    centralities[node] = getDegree(node) / ratio;\n  });\n\n  return centralities;\n}\n\n/**\n * Building various functions to export.\n */\nvar degreeCentrality = abstractDegreeCentrality.bind(null, false, 'degree');\nvar inDegreeCentrality = abstractDegreeCentrality.bind(null, false, 'inDegree');\nvar outDegreeCentrality = abstractDegreeCentrality.bind(\n  null,\n  false,\n  'outDegree'\n);\n\ndegreeCentrality.assign = abstractDegreeCentrality.bind(null, true, 'degree');\ninDegreeCentrality.assign = abstractDegreeCentrality.bind(\n  null,\n  true,\n  'inDegree'\n);\noutDegreeCentrality.assign = abstractDegreeCentrality.bind(\n  null,\n  true,\n  'outDegree'\n);\n\n/**\n * Exporting.\n */\nexports.degreeCentrality = degreeCentrality;\nexports.inDegreeCentrality = inDegreeCentrality;\nexports.outDegreeCentrality = outDegreeCentrality;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n","/**\n * Obliterator ForEach Function\n * =============================\n *\n * Helper function used to easily iterate over mixed values.\n */\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\n/**\n * Function able to iterate over almost any iterable JS value.\n *\n * @param  {any}      iterable - Iterable value.\n * @param  {function} callback - Callback function.\n */\nmodule.exports = function forEach(iterable, callback) {\n  var iterator, k, i, l, s;\n\n  if (!iterable) throw new Error('obliterator/forEach: invalid iterable.');\n\n  if (typeof callback !== 'function')\n    throw new Error('obliterator/forEach: expecting a callback.');\n\n  // The target is an array or a string or function arguments\n  if (\n    Array.isArray(iterable) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||\n    typeof iterable === 'string' ||\n    iterable.toString() === '[object Arguments]'\n  ) {\n    for (i = 0, l = iterable.length; i < l; i++) callback(iterable[i], i);\n    return;\n  }\n\n  // The target has a #.forEach method\n  if (typeof iterable.forEach === 'function') {\n    iterable.forEach(callback);\n    return;\n  }\n\n  // The target is iterable\n  if (\n    SYMBOL_SUPPORT &&\n    Symbol.iterator in iterable &&\n    typeof iterable.next !== 'function'\n  ) {\n    iterable = iterable[Symbol.iterator]();\n  }\n\n  // The target is an iterator\n  if (typeof iterable.next === 'function') {\n    iterator = iterable;\n    i = 0;\n\n    while (((s = iterator.next()), s.done !== true)) {\n      callback(s.value, i);\n      i++;\n    }\n\n    return;\n  }\n\n  // The target is a plain object\n  for (k in iterable) {\n    if (iterable.hasOwnProperty(k)) {\n      callback(iterable[k], k);\n    }\n  }\n\n  return;\n};\n","/**\n * Mnemonist Iterable Function\n * ============================\n *\n * Harmonized iteration helpers over mixed iterable targets.\n */\nvar forEach = require('obliterator/foreach');\n\nvar typed = require('./typed-arrays.js');\n\n/**\n * Function used to determine whether the given object supports array-like\n * random access.\n *\n * @param  {any} target - Target object.\n * @return {boolean}\n */\nfunction isArrayLike(target) {\n  return Array.isArray(target) || typed.isTypedArray(target);\n}\n\n/**\n * Function used to guess the length of the structure over which we are going\n * to iterate.\n *\n * @param  {any} target - Target object.\n * @return {number|undefined}\n */\nfunction guessLength(target) {\n  if (typeof target.length === 'number')\n    return target.length;\n\n  if (typeof target.size === 'number')\n    return target.size;\n\n  return;\n}\n\n/**\n * Function used to convert an iterable to an array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArray(target) {\n  var l = guessLength(target);\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i++] = value;\n  });\n\n  return array;\n}\n\n/**\n * Same as above but returns a supplementary indices array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArrayWithIndices(target) {\n  var l = guessLength(target);\n\n  var IndexArray = typeof l === 'number' ?\n    typed.getPointerArray(l) :\n    Array;\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var indices = typeof l === 'number' ? new IndexArray(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i] = value;\n    indices[i] = i++;\n  });\n\n  return [array, indices];\n}\n\n/**\n * Exporting.\n */\nexports.isArrayLike = isArrayLike;\nexports.guessLength = guessLength;\nexports.toArray = toArray;\nexports.toArrayWithIndices = toArrayWithIndices;\n","/**\n * Mnemonist FixedDeque\n * =====================\n *\n * Fixed capacity double-ended queue implemented as ring deque.\n */\nvar iterables = require('./utils/iterables.js'),\n    Iterator = require('obliterator/iterator');\n\n/**\n * FixedDeque.\n *\n * @constructor\n */\nfunction FixedDeque(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/fixed-deque: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/fixed-deque: `capacity` should be a positive number.');\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n  this.items = new ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFixedDeque.prototype.clear = function() {\n\n  // Properties\n  this.start = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to append a value to the deque.\n *\n * @param  {any}    item - Item to append.\n * @return {number}      - Returns the new size of the deque.\n */\nFixedDeque.prototype.push = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-deque.push: deque capacity (' + this.capacity + ') exceeded!');\n\n  var index = (this.start + this.size) % this.capacity;\n\n  this.items[index] = item;\n\n  return ++this.size;\n};\n\n/**\n * Method used to prepend a value to the deque.\n *\n * @param  {any}    item - Item to prepend.\n * @return {number}      - Returns the new size of the deque.\n */\nFixedDeque.prototype.unshift = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-deque.unshift: deque capacity (' + this.capacity + ') exceeded!');\n\n  var index = this.start - 1;\n\n  if (this.start === 0)\n    index = this.capacity - 1;\n\n  this.items[index] = item;\n  this.start = index;\n\n  return ++this.size;\n};\n\n/**\n * Method used to pop the deque.\n *\n * @return {any} - Returns the popped item.\n */\nFixedDeque.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  const index = (this.start + this.size - 1) % this.capacity;\n\n  this.size--;\n\n  return this.items[index];\n};\n\n/**\n * Method used to shift the deque.\n *\n * @return {any} - Returns the shifted item.\n */\nFixedDeque.prototype.shift = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start;\n\n  this.size--;\n  this.start++;\n\n  if (this.start === this.capacity)\n    this.start = 0;\n\n  return this.items[index];\n};\n\n/**\n * Method used to peek the first value of the deque.\n *\n * @return {any}\n */\nFixedDeque.prototype.peekFirst = function() {\n  if (this.size === 0)\n    return;\n\n  return this.items[this.start];\n};\n\n/**\n * Method used to peek the last value of the deque.\n *\n * @return {any}\n */\nFixedDeque.prototype.peekLast = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start + this.size - 1;\n\n  if (index > this.capacity)\n    index -= this.capacity;\n\n  return this.items[index];\n};\n\n/**\n * Method used to get the desired value of the deque.\n *\n * @param  {number} index\n * @return {any}\n */\nFixedDeque.prototype.get = function(index) {\n  if (this.size === 0)\n    return;\n\n  index = this.start + index;\n\n  if (index > this.capacity)\n    index -= this.capacity;\n\n  return this.items[index];\n};\n\n/**\n * Method used to iterate over the deque.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFixedDeque.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    callback.call(scope, this.items[i], j, this);\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n};\n\n/**\n * Method used to convert the deque to a JavaScript array.\n *\n * @return {array}\n */\n// TODO: optional array class as argument?\nFixedDeque.prototype.toArray = function() {\n\n  // Optimization\n  var offset = this.start + this.size;\n\n  if (offset < this.capacity)\n    return this.items.slice(this.start, offset);\n\n  var array = new this.ArrayClass(this.size),\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    array[j] = this.items[i];\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over the deque's values.\n *\n * @return {Iterator}\n */\nFixedDeque.prototype.values = function() {\n  var items = this.items,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over the deque's entries.\n *\n * @return {Iterator}\n */\nFixedDeque.prototype.entries = function() {\n  var items = this.items,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    i++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FixedDeque.prototype[Symbol.iterator] = FixedDeque.prototype.values;\n\n/**\n * Convenience known methods.\n */\nFixedDeque.prototype.inspect = function() {\n  var array = this.toArray();\n\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: FixedDeque,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedDeque.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedDeque.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a deque.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FiniteStack}\n */\nFixedDeque.from = function(iterable, ArrayClass, capacity) {\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/fixed-deque.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var deque = new FixedDeque(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      deque.items[i] = iterable[i];\n\n    deque.size = l;\n\n    return deque;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    deque.push(value);\n  });\n\n  return deque;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FixedDeque;\n","/**\n * Mnemonist FixedStack\n * =====================\n *\n * The fixed stack is a stack whose capacity is defined beforehand and that\n * cannot be exceeded. This class is really useful when combined with\n * byte arrays to save up some memory and avoid memory re-allocation, hence\n * speeding up computations.\n *\n * This has however a downside: you need to know the maximum size you stack\n * can have during your iteration (which is not too difficult to compute when\n * performing, say, a DFS on a balanced binary tree).\n */\nvar Iterator = require('obliterator/iterator'),\n    iterables = require('./utils/iterables.js');\n\n/**\n * FixedStack\n *\n * @constructor\n * @param {function} ArrayClass - Array class to use.\n * @param {number}   capacity   - Desired capacity.\n */\nfunction FixedStack(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/fixed-stack: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/fixed-stack: `capacity` should be a positive number.');\n\n  this.capacity = capacity;\n  this.ArrayClass = ArrayClass;\n  this.items = new this.ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\nFixedStack.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\nFixedStack.prototype.push = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-stack.push: stack capacity (' + this.capacity + ') exceeded!');\n\n  this.items[this.size++] = item;\n  return this.size;\n};\n\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\nFixedStack.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  return this.items[--this.size];\n};\n\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\nFixedStack.prototype.peek = function() {\n  return this.items[this.size - 1];\n};\n\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFixedStack.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++)\n    callback.call(scope, this.items[l - i - 1], i, this);\n};\n\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\nFixedStack.prototype.toArray = function() {\n  var array = new this.ArrayClass(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--)\n    array[i] = this.items[l - i];\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\nFixedStack.prototype.values = function() {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\nFixedStack.prototype.entries = function() {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FixedStack.prototype[Symbol.iterator] = FixedStack.prototype.values;\n\n\n/**\n * Convenience known methods.\n */\nFixedStack.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nFixedStack.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nFixedStack.prototype.inspect = function() {\n  var array = this.toArray();\n\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: FixedStack,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedStack.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedStack.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FixedStack}\n */\nFixedStack.from = function(iterable, ArrayClass, capacity) {\n\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/fixed-stack.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var stack = new FixedStack(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      stack.items[i] = iterable[i];\n\n    stack.size = l;\n\n    return stack;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    stack.push(value);\n  });\n\n  return stack;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FixedStack;\n","/**\n * Mnemonist Heap Comparators\n * ===========================\n *\n * Default comparators & functions dealing with comparators reversing etc.\n */\nvar DEFAULT_COMPARATOR = function(a, b) {\n  if (a < b)\n    return -1;\n  if (a > b)\n    return 1;\n\n  return 0;\n};\n\nvar DEFAULT_REVERSE_COMPARATOR = function(a, b) {\n  if (a < b)\n    return 1;\n  if (a > b)\n    return -1;\n\n  return 0;\n};\n\n/**\n * Function used to reverse a comparator.\n */\nfunction reverseComparator(comparator) {\n  return function(a, b) {\n    return comparator(b, a);\n  };\n}\n\n/**\n * Function returning a tuple comparator.\n */\nfunction createTupleComparator(size) {\n  if (size === 2) {\n    return function(a, b) {\n      if (a[0] < b[0])\n        return -1;\n\n      if (a[0] > b[0])\n        return 1;\n\n      if (a[1] < b[1])\n        return -1;\n\n      if (a[1] > b[1])\n        return 1;\n\n      return 0;\n    };\n  }\n\n  return function(a, b) {\n    var i = 0;\n\n    while (i < size) {\n      if (a[i] < b[i])\n        return -1;\n\n      if (a[i] > b[i])\n        return 1;\n\n      i++;\n    }\n\n    return 0;\n  };\n}\n\n/**\n * Exporting.\n */\nexports.DEFAULT_COMPARATOR = DEFAULT_COMPARATOR;\nexports.DEFAULT_REVERSE_COMPARATOR = DEFAULT_REVERSE_COMPARATOR;\nexports.reverseComparator = reverseComparator;\nexports.createTupleComparator = createTupleComparator;\n","/**\n * Mnemonist Binary Heap\n * ======================\n *\n * Binary heap implementation.\n */\nvar forEach = require('obliterator/foreach'),\n    comparators = require('./utils/comparators.js'),\n    iterables = require('./utils/iterables.js');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Heap helper functions.\n */\n\n/**\n * Function used to sift down.\n *\n * @param {function} compare    - Comparison function.\n * @param {array}    heap       - Array storing the heap's data.\n * @param {number}   startIndex - Starting index.\n * @param {number}   i          - Index.\n */\nfunction siftDown(compare, heap, startIndex, i) {\n  var item = heap[i],\n      parentIndex,\n      parent;\n\n  while (i > startIndex) {\n    parentIndex = (i - 1) >> 1;\n    parent = heap[parentIndex];\n\n    if (compare(item, parent) < 0) {\n      heap[i] = parent;\n      i = parentIndex;\n      continue;\n    }\n\n    break;\n  }\n\n  heap[i] = item;\n}\n\n/**\n * Function used to sift up.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {number}   i       - Index.\n */\nfunction siftUp(compare, heap, i) {\n  var endIndex = heap.length,\n      startIndex = i,\n      item = heap[i],\n      childIndex = 2 * i + 1,\n      rightIndex;\n\n  while (childIndex < endIndex) {\n    rightIndex = childIndex + 1;\n\n    if (\n      rightIndex < endIndex &&\n      compare(heap[childIndex], heap[rightIndex]) >= 0\n    ) {\n      childIndex = rightIndex;\n    }\n\n    heap[i] = heap[childIndex];\n    i = childIndex;\n    childIndex = 2 * i + 1;\n  }\n\n  heap[i] = item;\n  siftDown(compare, heap, startIndex, i);\n}\n\n/**\n * Function used to push an item into a heap represented by a raw array.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {any}      item    - Item to push.\n */\nfunction push(compare, heap, item) {\n  heap.push(item);\n  siftDown(compare, heap, 0, heap.length - 1);\n}\n\n/**\n * Function used to pop an item from a heap represented by a raw array.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @return {any}\n */\nfunction pop(compare, heap) {\n  var lastItem = heap.pop();\n\n  if (heap.length !== 0) {\n    var item = heap[0];\n    heap[0] = lastItem;\n    siftUp(compare, heap, 0);\n\n    return item;\n  }\n\n  return lastItem;\n}\n\n/**\n * Function used to pop the heap then push a new value into it, thus \"replacing\"\n * it.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @param  {any}      item    - The item to push.\n * @return {any}\n */\nfunction replace(compare, heap, item) {\n  if (heap.length === 0)\n    throw new Error('mnemonist/heap.replace: cannot pop an empty heap.');\n\n  var popped = heap[0];\n  heap[0] = item;\n  siftUp(compare, heap, 0);\n\n  return popped;\n}\n\n/**\n * Function used to push an item in the heap then pop the heap and return the\n * popped value.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @param  {any}      item    - The item to push.\n * @return {any}\n */\nfunction pushpop(compare, heap, item) {\n  var tmp;\n\n  if (heap.length !== 0 && compare(heap[0], item) < 0) {\n    tmp = heap[0];\n    heap[0] = item;\n    item = tmp;\n    siftUp(compare, heap, 0);\n  }\n\n  return item;\n}\n\n/**\n * Converts and array into an abstract heap in linear time.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    array   - Target array.\n */\nfunction heapify(compare, array) {\n  var n = array.length,\n      l = n >> 1,\n      i = l;\n\n  while (--i >= 0)\n    siftUp(compare, array, i);\n}\n\n/**\n * Fully consumes the given heap.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @return {array}\n */\nfunction consume(compare, heap) {\n  var l = heap.length,\n      i = 0;\n\n  var array = new Array(l);\n\n  while (i < l)\n    array[i++] = pop(compare, heap);\n\n  return array;\n}\n\n/**\n * Function used to retrieve the n smallest items from the given iterable.\n *\n * @param {function} compare  - Comparison function.\n * @param {number}   n        - Number of top items to retrieve.\n * @param {any}      iterable - Arbitrary iterable.\n * @param {array}\n */\nfunction nsmallest(compare, n, iterable) {\n  if (arguments.length === 2) {\n    iterable = n;\n    n = compare;\n    compare = DEFAULT_COMPARATOR;\n  }\n\n  var reverseCompare = reverseComparator(compare);\n\n  var i, l, v;\n\n  var min = Infinity;\n\n  var result;\n\n  // If n is equal to 1, it's just a matter of finding the minimum\n  if (n === 1) {\n    if (iterables.isArrayLike(iterable)) {\n      for (i = 0, l = iterable.length; i < l; i++) {\n        v = iterable[i];\n\n        if (min === Infinity || compare(v, min) < 0)\n          min = v;\n      }\n\n      result = new iterable.constructor(1);\n      result[0] = min;\n\n      return result;\n    }\n\n    forEach(iterable, function(value) {\n      if (min === Infinity || compare(value, min) < 0)\n        min = value;\n    });\n\n    return [min];\n  }\n\n  if (iterables.isArrayLike(iterable)) {\n\n    // If n > iterable length, we just clone and sort\n    if (n >= iterable.length)\n      return iterable.slice().sort(compare);\n\n    result = iterable.slice(0, n);\n    heapify(reverseCompare, result);\n\n    for (i = n, l = iterable.length; i < l; i++)\n      if (reverseCompare(iterable[i], result[0]) > 0)\n        replace(reverseCompare, result, iterable[i]);\n\n    // NOTE: if n is over some number, it becomes faster to consume the heap\n    return result.sort(compare);\n  }\n\n  // Correct for size\n  var size = iterables.guessLength(iterable);\n\n  if (size !== null && size < n)\n    n = size;\n\n  result = new Array(n);\n  i = 0;\n\n  forEach(iterable, function(value) {\n    if (i < n) {\n      result[i] = value;\n    }\n    else {\n      if (i === n)\n        heapify(reverseCompare, result);\n\n      if (reverseCompare(value, result[0]) > 0)\n        replace(reverseCompare, result, value);\n    }\n\n    i++;\n  });\n\n  if (result.length > i)\n    result.length = i;\n\n  // NOTE: if n is over some number, it becomes faster to consume the heap\n  return result.sort(compare);\n}\n\n/**\n * Function used to retrieve the n largest items from the given iterable.\n *\n * @param {function} compare  - Comparison function.\n * @param {number}   n        - Number of top items to retrieve.\n * @param {any}      iterable - Arbitrary iterable.\n * @param {array}\n */\nfunction nlargest(compare, n, iterable) {\n  if (arguments.length === 2) {\n    iterable = n;\n    n = compare;\n    compare = DEFAULT_COMPARATOR;\n  }\n\n  var reverseCompare = reverseComparator(compare);\n\n  var i, l, v;\n\n  var max = -Infinity;\n\n  var result;\n\n  // If n is equal to 1, it's just a matter of finding the maximum\n  if (n === 1) {\n    if (iterables.isArrayLike(iterable)) {\n      for (i = 0, l = iterable.length; i < l; i++) {\n        v = iterable[i];\n\n        if (max === -Infinity || compare(v, max) > 0)\n          max = v;\n      }\n\n      result = new iterable.constructor(1);\n      result[0] = max;\n\n      return result;\n    }\n\n    forEach(iterable, function(value) {\n      if (max === -Infinity || compare(value, max) > 0)\n        max = value;\n    });\n\n    return [max];\n  }\n\n  if (iterables.isArrayLike(iterable)) {\n\n    // If n > iterable length, we just clone and sort\n    if (n >= iterable.length)\n      return iterable.slice().sort(reverseCompare);\n\n    result = iterable.slice(0, n);\n    heapify(compare, result);\n\n    for (i = n, l = iterable.length; i < l; i++)\n      if (compare(iterable[i], result[0]) > 0)\n        replace(compare, result, iterable[i]);\n\n    // NOTE: if n is over some number, it becomes faster to consume the heap\n    return result.sort(reverseCompare);\n  }\n\n  // Correct for size\n  var size = iterables.guessLength(iterable);\n\n  if (size !== null && size < n)\n    n = size;\n\n  result = new Array(n);\n  i = 0;\n\n  forEach(iterable, function(value) {\n    if (i < n) {\n      result[i] = value;\n    }\n    else {\n      if (i === n)\n        heapify(compare, result);\n\n      if (compare(value, result[0]) > 0)\n        replace(compare, result, value);\n    }\n\n    i++;\n  });\n\n  if (result.length > i)\n    result.length = i;\n\n  // NOTE: if n is over some number, it becomes faster to consume the heap\n  return result.sort(reverseCompare);\n}\n\n/**\n * Binary Minimum Heap.\n *\n * @constructor\n * @param {function} comparator - Comparator function to use.\n */\nfunction Heap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/Heap.constructor: given comparator should be a function.');\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nHeap.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.size = 0;\n};\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nHeap.prototype.push = function(item) {\n  push(this.comparator, this.items, item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve the \"first\" item of the heap.\n *\n * @return {any}\n */\nHeap.prototype.peek = function() {\n  return this.items[0];\n};\n\n/**\n * Method used to retrieve & remove the \"first\" item of the heap.\n *\n * @return {any}\n */\nHeap.prototype.pop = function() {\n  if (this.size !== 0)\n    this.size--;\n\n  return pop(this.comparator, this.items);\n};\n\n/**\n * Method used to pop the heap, then push an item and return the popped\n * item.\n *\n * @param  {any} item - Item to push into the heap.\n * @return {any}\n */\nHeap.prototype.replace = function(item) {\n  return replace(this.comparator, this.items, item);\n};\n\n/**\n * Method used to push the heap, the pop it and return the pooped item.\n *\n * @param  {any} item - Item to push into the heap.\n * @return {any}\n */\nHeap.prototype.pushpop = function(item) {\n  return pushpop(this.comparator, this.items, item);\n};\n\n/**\n * Method used to consume the heap fully and return its items as a sorted array.\n *\n * @return {array}\n */\nHeap.prototype.consume = function() {\n  this.size = 0;\n  return consume(this.comparator, this.items);\n};\n\n/**\n * Method used to convert the heap to an array. Note that it basically clone\n * the heap and consumes it completely. This is hardly performant.\n *\n * @return {array}\n */\nHeap.prototype.toArray = function() {\n  return consume(this.comparator, this.items.slice());\n};\n\n/**\n * Convenience known methods.\n */\nHeap.prototype.inspect = function() {\n  var proxy = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: Heap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  Heap.prototype[Symbol.for('nodejs.util.inspect.custom')] = Heap.prototype.inspect;\n\n/**\n * Binary Maximum Heap.\n *\n * @constructor\n * @param {function} comparator - Comparator function to use.\n */\nfunction MaxHeap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/MaxHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\nMaxHeap.prototype = Heap.prototype;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a heap.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} comparator - Custom comparator function.\n * @return {Heap}\n */\nHeap.from = function(iterable, comparator) {\n  var heap = new Heap(comparator);\n\n  var items;\n\n  // If iterable is an array, we can be clever about it\n  if (iterables.isArrayLike(iterable))\n    items = iterable.slice();\n  else\n    items = iterables.toArray(iterable);\n\n  heapify(heap.comparator, items);\n  heap.items = items;\n  heap.size = items.length;\n\n  return heap;\n};\n\nMaxHeap.from = function(iterable, comparator) {\n  var heap = new MaxHeap(comparator);\n\n  var items;\n\n  // If iterable is an array, we can be clever about it\n  if (iterables.isArrayLike(iterable))\n    items = iterable.slice();\n  else\n    items = iterables.toArray(iterable);\n\n  heapify(heap.comparator, items);\n  heap.items = items;\n  heap.size = items.length;\n\n  return heap;\n};\n\n/**\n * Exporting.\n */\nHeap.siftUp = siftUp;\nHeap.siftDown = siftDown;\nHeap.push = push;\nHeap.pop = pop;\nHeap.replace = replace;\nHeap.pushpop = pushpop;\nHeap.heapify = heapify;\nHeap.consume = consume;\n\nHeap.nsmallest = nsmallest;\nHeap.nlargest = nlargest;\n\nHeap.MinHeap = Heap;\nHeap.MaxHeap = MaxHeap;\n\nmodule.exports = Heap;\n","/**\n * Graphology Neighborhood Indices\n * ================================\n */\nvar typed = require('mnemonist/utils/typed-arrays');\nvar createEdgeWeightGetter =\n  require('graphology-utils/getters').createEdgeWeightGetter;\n\nfunction upperBoundPerMethod(method, graph) {\n  if (method === 'outbound' || method === 'inbound')\n    return graph.directedSize + graph.undirectedSize * 2;\n\n  if (method === 'in' || method === 'out' || method === 'directed')\n    return graph.directedSize;\n\n  return graph.undirectedSize * 2;\n}\n\nfunction NeighborhoodIndex(graph, method) {\n  method = method || 'outbound';\n  var getNeighbors = graph[method + 'Neighbors'].bind(graph);\n\n  var upperBound = upperBoundPerMethod(method, graph);\n\n  var NeighborhoodPointerArray = typed.getPointerArray(upperBound);\n  var NodesPointerArray = typed.getPointerArray(graph.order);\n\n  // NOTE: directedSize + undirectedSize * 2 is an upper bound for\n  // neighborhood size\n  this.graph = graph;\n  this.neighborhood = new NodesPointerArray(upperBound);\n\n  this.starts = new NeighborhoodPointerArray(graph.order + 1);\n\n  this.nodes = graph.nodes();\n\n  var ids = {};\n\n  var i, l, j, m, node, neighbors;\n\n  var n = 0;\n\n  for (i = 0, l = graph.order; i < l; i++) ids[this.nodes[i]] = i;\n\n  for (i = 0, l = graph.order; i < l; i++) {\n    node = this.nodes[i];\n    neighbors = getNeighbors(node);\n\n    this.starts[i] = n;\n\n    for (j = 0, m = neighbors.length; j < m; j++)\n      this.neighborhood[n++] = ids[neighbors[j]];\n  }\n\n  // NOTE: we keep one more index as upper bound to simplify iteration\n  this.starts[i] = upperBound;\n}\n\nNeighborhoodIndex.prototype.bounds = function (i) {\n  return [this.starts[i], this.starts[i + 1]];\n};\n\nNeighborhoodIndex.prototype.project = function () {\n  var self = this;\n\n  var projection = {};\n\n  self.nodes.forEach(function (node, i) {\n    projection[node] = Array.from(\n      self.neighborhood.slice(self.starts[i], self.starts[i + 1])\n    ).map(function (j) {\n      return self.nodes[j];\n    });\n  });\n\n  return projection;\n};\n\nNeighborhoodIndex.prototype.collect = function (results) {\n  var i, l;\n\n  var o = {};\n\n  for (i = 0, l = results.length; i < l; i++) o[this.nodes[i]] = results[i];\n\n  return o;\n};\n\nNeighborhoodIndex.prototype.assign = function (prop, results) {\n  var i = 0;\n\n  this.graph.updateEachNodeAttributes(\n    function (_, attr) {\n      attr[prop] = results[i++];\n\n      return attr;\n    },\n    {attributes: [prop]}\n  );\n};\n\nexports.NeighborhoodIndex = NeighborhoodIndex;\n\nfunction WeightedNeighborhoodIndex(graph, getEdgeWeight, method) {\n  method = method || 'outbound';\n  var getEdges = graph[method + 'Edges'].bind(graph);\n\n  var upperBound = upperBoundPerMethod(method, graph);\n\n  var NeighborhoodPointerArray = typed.getPointerArray(upperBound);\n  var NodesPointerArray = typed.getPointerArray(graph.order);\n\n  var weightGetter = createEdgeWeightGetter(getEdgeWeight).fromMinimalEntry;\n\n  // NOTE: directedSize + undirectedSize * 2 is an upper bound for\n  // neighborhood size\n  this.graph = graph;\n  this.neighborhood = new NodesPointerArray(upperBound);\n  this.weights = new Float64Array(upperBound);\n  this.outDegrees = new Float64Array(graph.order);\n\n  this.starts = new NeighborhoodPointerArray(graph.order + 1);\n\n  this.nodes = graph.nodes();\n\n  var ids = {};\n\n  var i, l, j, m, node, neighbor, edges, edge, weight;\n\n  var n = 0;\n\n  for (i = 0, l = graph.order; i < l; i++) ids[this.nodes[i]] = i;\n\n  for (i = 0, l = graph.order; i < l; i++) {\n    node = this.nodes[i];\n    edges = getEdges(node);\n\n    this.starts[i] = n;\n\n    for (j = 0, m = edges.length; j < m; j++) {\n      edge = edges[j];\n      neighbor = graph.opposite(node, edge);\n      weight = weightGetter(edge, graph.getEdgeAttributes(edge));\n\n      // NOTE: for weighted mixed beware of merging weights if twice the same neighbor\n      this.neighborhood[n] = ids[neighbor];\n      this.weights[n++] = weight;\n      this.outDegrees[i] += weight;\n    }\n  }\n\n  // NOTE: we keep one more index as upper bound to simplify iteration\n  this.starts[i] = upperBound;\n}\n\nWeightedNeighborhoodIndex.prototype.bounds = NeighborhoodIndex.prototype.bounds;\nWeightedNeighborhoodIndex.prototype.project =\n  NeighborhoodIndex.prototype.project;\nWeightedNeighborhoodIndex.prototype.collect =\n  NeighborhoodIndex.prototype.collect;\nWeightedNeighborhoodIndex.prototype.assign = NeighborhoodIndex.prototype.assign;\n\nexports.WeightedNeighborhoodIndex = WeightedNeighborhoodIndex;\n","/**\n * Graphology Indexed Brandes Routine\n * ===================================\n *\n * Indexed version of the famous Brandes routine aiming at computing\n * betweenness centrality efficiently.\n */\nvar FixedDeque = require('mnemonist/fixed-deque');\nvar FixedStack = require('mnemonist/fixed-stack');\nvar Heap = require('mnemonist/heap');\nvar typed = require('mnemonist/utils/typed-arrays');\nvar neighborhoodIndices = require('graphology-indices/neighborhood');\n\nvar NeighborhoodIndex = neighborhoodIndices.NeighborhoodIndex;\nvar WeightedNeighborhoodIndex = neighborhoodIndices.WeightedNeighborhoodIndex;\n\n/**\n * Indexed unweighted Brandes routine.\n *\n * [Reference]:\n * Ulrik Brandes: A Faster Algorithm for Betweenness Centrality.\n * Journal of Mathematical Sociology 25(2):163-177, 2001.\n *\n * @param  {Graph}    graph - The graphology instance.\n * @return {function}\n */\nexports.createUnweightedIndexedBrandes =\n  function createUnweightedIndexedBrandes(graph) {\n    var neighborhoodIndex = new NeighborhoodIndex(graph);\n\n    var neighborhood = neighborhoodIndex.neighborhood,\n      starts = neighborhoodIndex.starts;\n\n    var order = graph.order;\n\n    var S = new FixedStack(typed.getPointerArray(order), order),\n      sigma = new Uint32Array(order),\n      P = new Array(order),\n      D = new Int32Array(order);\n\n    var Q = new FixedDeque(Uint32Array, order);\n\n    var brandes = function (sourceIndex) {\n      var Dv, sigmav, start, stop, j, v, w;\n\n      for (v = 0; v < order; v++) {\n        P[v] = [];\n        sigma[v] = 0;\n        D[v] = -1;\n      }\n\n      sigma[sourceIndex] = 1;\n      D[sourceIndex] = 0;\n\n      Q.push(sourceIndex);\n\n      while (Q.size !== 0) {\n        v = Q.shift();\n        S.push(v);\n\n        Dv = D[v];\n        sigmav = sigma[v];\n\n        start = starts[v];\n        stop = starts[v + 1];\n\n        for (j = start; j < stop; j++) {\n          w = neighborhood[j];\n\n          if (D[w] === -1) {\n            Q.push(w);\n            D[w] = Dv + 1;\n          }\n\n          if (D[w] === Dv + 1) {\n            sigma[w] += sigmav;\n            P[w].push(v);\n          }\n        }\n      }\n\n      return [S, P, sigma];\n    };\n\n    brandes.index = neighborhoodIndex;\n\n    return brandes;\n  };\n\nfunction BRANDES_DIJKSTRA_HEAP_COMPARATOR(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (a[0] < b[0]) return -1;\n\n  if (a[1] > b[1]) return 1;\n  if (a[1] < b[1]) return -1;\n\n  if (a[2] > b[2]) return 1;\n  if (a[2] < b[2]) return -1;\n\n  if (a[3] > b[3]) return 1;\n  if (a[3] < b[3]) return -1;\n\n  return 0;\n}\n\n/**\n * Indexed Dijkstra Brandes routine.\n *\n * [Reference]:\n * Ulrik Brandes: A Faster Algorithm for Betweenness Centrality.\n * Journal of Mathematical Sociology 25(2):163-177, 2001.\n *\n * @param  {Graph}    graph         - The graphology instance.\n * @param  {string}   getEdgeWeight - Name of the weight attribute or getter function.\n * @return {function}\n */\nexports.createDijkstraIndexedBrandes = function createDijkstraIndexedBrandes(\n  graph,\n  getEdgeWeight\n) {\n  var neighborhoodIndex = new WeightedNeighborhoodIndex(\n    graph,\n    getEdgeWeight || 'weight'\n  );\n\n  var neighborhood = neighborhoodIndex.neighborhood,\n    weights = neighborhoodIndex.weights,\n    starts = neighborhoodIndex.starts;\n\n  var order = graph.order;\n\n  var S = new FixedStack(typed.getPointerArray(order), order),\n    sigma = new Uint32Array(order),\n    P = new Array(order),\n    D = new Float64Array(order),\n    seen = new Float64Array(order);\n\n  // TODO: use fixed-size heap\n  var Q = new Heap(BRANDES_DIJKSTRA_HEAP_COMPARATOR);\n\n  var brandes = function (sourceIndex) {\n    var start, stop, item, dist, pred, cost, j, v, w;\n\n    var count = 0;\n\n    for (v = 0; v < order; v++) {\n      P[v] = [];\n      sigma[v] = 0;\n      D[v] = -1;\n      seen[v] = -1;\n    }\n\n    sigma[sourceIndex] = 1;\n    seen[sourceIndex] = 0;\n\n    Q.push([0, count++, sourceIndex, sourceIndex]);\n\n    while (Q.size !== 0) {\n      item = Q.pop();\n      dist = item[0];\n      pred = item[2];\n      v = item[3];\n\n      if (D[v] !== -1) continue;\n\n      S.push(v);\n      D[v] = dist;\n      sigma[v] += sigma[pred];\n\n      start = starts[v];\n      stop = starts[v + 1];\n\n      for (j = start; j < stop; j++) {\n        w = neighborhood[j];\n        cost = dist + weights[j];\n\n        if (D[w] === -1 && (seen[w] === -1 || cost < seen[w])) {\n          seen[w] = cost;\n          Q.push([cost, count++, v, w]);\n          sigma[w] = 0;\n          P[w] = [v];\n        } else if (cost === seen[w]) {\n          sigma[w] += sigma[v];\n          P[w].push(v);\n        }\n      }\n    }\n\n    return [S, P, sigma];\n  };\n\n  brandes.index = neighborhoodIndex;\n\n  return brandes;\n};\n","/**\n * Graphology Betweenness Centrality\n * ==================================\n *\n * Function computing betweenness centrality.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar lib = require('graphology-shortest-path/indexed-brandes');\nvar resolveDefaults = require('graphology-utils/defaults');\n\nvar createUnweightedIndexedBrandes = lib.createUnweightedIndexedBrandes;\nvar createDijkstraIndexedBrandes = lib.createDijkstraIndexedBrandes;\n\n/**\n * Defaults.\n */\nvar DEFAULTS = {\n  nodeCentralityAttribute: 'betweennessCentrality',\n  getEdgeWeight: 'weight',\n  normalized: true\n};\n\n/**\n * Abstract function computing beetweenness centrality for the given graph.\n *\n * @param  {boolean} assign                      - Assign the results to node attributes?\n * @param  {Graph}   graph                       - Target graph.\n * @param  {object}  [options]                   - Options:\n * @param  {object}    [nodeCentralityAttribute] - Name of the attribute to assign.\n * @param  {string}    [getEdgeWeight]           - Name of the weight attribute or getter function.\n * @param  {boolean}   [normalized]              - Should the centrality be normalized?\n * @param  {object}\n */\nfunction abstractBetweennessCentrality(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-centrality/beetweenness-centrality: the given graph is not a valid graphology instance.'\n    );\n\n  // Solving options\n  options = resolveDefaults(options, DEFAULTS);\n\n  var outputName = options.nodeCentralityAttribute;\n  var normalized = options.normalized;\n\n  var brandes = options.getEdgeWeight\n    ? createDijkstraIndexedBrandes(graph, options.getEdgeWeight)\n    : createUnweightedIndexedBrandes(graph);\n\n  var N = graph.order;\n\n  var result, S, P, sigma, coefficient, i, j, m, v, w;\n\n  var delta = new Float64Array(N);\n  var centralities = new Float64Array(N);\n\n  // Iterating over each node\n  for (i = 0; i < N; i++) {\n    result = brandes(i);\n\n    S = result[0];\n    P = result[1];\n    sigma = result[2];\n\n    // Accumulating\n    j = S.size;\n\n    while (j--) delta[S.items[S.size - j]] = 0;\n\n    while (S.size !== 0) {\n      w = S.pop();\n      coefficient = (1 + delta[w]) / sigma[w];\n\n      for (j = 0, m = P[w].length; j < m; j++) {\n        v = P[w][j];\n        delta[v] += sigma[v] * coefficient;\n      }\n\n      if (w !== i) centralities[w] += delta[w];\n    }\n  }\n\n  // Rescaling\n  var scale = null;\n\n  if (normalized) scale = N <= 2 ? null : 1 / ((N - 1) * (N - 2));\n  else scale = graph.type === 'undirected' ? 0.5 : null;\n\n  if (scale !== null) {\n    for (i = 0; i < N; i++) centralities[i] *= scale;\n  }\n\n  if (assign) return brandes.index.assign(outputName, centralities);\n\n  return brandes.index.collect(centralities);\n}\n\n/**\n * Exporting.\n */\nvar betweennessCentrality = abstractBetweennessCentrality.bind(null, false);\nbetweennessCentrality.assign = abstractBetweennessCentrality.bind(null, true);\n\nmodule.exports = betweennessCentrality;\n","/**\n * Mnemonist SparseSet\n * ====================\n *\n * JavaScript sparse set implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseSet.\n *\n * @constructor\n */\nfunction SparseSet(length) {\n\n  var ByteArray = getPointerArray(length);\n\n  // Properties\n  this.size = 0;\n  this.length = length;\n  this.dense = new ByteArray(length);\n  this.sparse = new ByteArray(length);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseSet.prototype.clear = function() {\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {SparseSet}\n */\nSparseSet.prototype.has = function(member) {\n  var index = this.sparse[member];\n\n  return (\n    index < this.size &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to add a member to the set.\n *\n * @param  {number} member - Member to add.\n * @return {SparseSet}\n */\nSparseSet.prototype.add = function(member) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member)\n    return this;\n\n  this.dense[this.size] = member;\n  this.sparse[member] = this.size;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove a member from the set.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseSet.prototype.delete = function(member) {\n  var index = this.sparse[member];\n\n  if (index >= this.size || this.dense[index] !== member)\n    return false;\n\n  index = this.dense[this.size - 1];\n  this.dense[this.sparse[member]] = index;\n  this.sparse[index] = this.sparse[member];\n  this.size--;\n\n  return true;\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var item;\n\n  for (var i = 0; i < this.size; i++) {\n    item = this.dense[i];\n\n    callback.call(scope, item, item);\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseSet.prototype.values = function() {\n  var size = this.size,\n      dense = this.dense,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = dense[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseSet.prototype[Symbol.iterator] = SparseSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nSparseSet.prototype.inspect = function() {\n  var proxy = new Set();\n\n  for (var i = 0; i < this.size; i++)\n    proxy.add(this.dense[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseSet,\n    enumerable: false\n  });\n\n  proxy.length = this.length;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseSet.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseSet;\n","/**\n * Graphology Closeness Centrality\n * ================================\n *\n * JavaScript implementation of the closeness centrality\n *\n * [References]:\n * https://en.wikipedia.org/wiki/Closeness_centrality\n *\n * Linton C. Freeman: Centrality in networks: I.\n * Conceptual clarification. Social Networks 1:215-239, 1979.\n * https://doi.org/10.1016/0378-8733(78)90021-7\n *\n * pg. 201 of Wasserman, S. and Faust, K.,\n * Social Network Analysis: Methods and Applications, 1994,\n * Cambridge University Press.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar resolveDefaults = require('graphology-utils/defaults');\nvar FixedDeque = require('mnemonist/fixed-deque');\nvar SparseSet = require('mnemonist/sparse-set');\nvar NeighborhoodIndex =\n  require('graphology-indices/neighborhood').NeighborhoodIndex;\n\n// TODO: can be computed for a single node\n// TODO: weighted\n// TODO: abstract the single source indexed shortest path in lib\n// TODO: what about self loops?\n// TODO: refactor a BFSQueue working on integer ranges in graphology-indices?\n\n/**\n * Defaults.\n */\nvar DEFAULTS = {\n  nodeCentralityAttribute: 'closenessCentrality',\n  wassermanFaust: false\n};\n\n/**\n * Helpers.\n */\nfunction IndexedBFS(graph) {\n  this.index = new NeighborhoodIndex(graph, 'inbound');\n  this.queue = new FixedDeque(Array, graph.order);\n  this.seen = new SparseSet(graph.order);\n}\n\nIndexedBFS.prototype.fromNode = function (i) {\n  var index = this.index;\n  var queue = this.queue;\n  var seen = this.seen;\n\n  seen.clear();\n  queue.clear();\n\n  seen.add(i);\n  queue.push([i, 0]);\n\n  var item, n, d, j, l, neighbor;\n\n  var total = 0;\n  var count = 0;\n\n  while (queue.size !== 0) {\n    item = queue.shift();\n    n = item[0];\n    d = item[1];\n\n    if (d !== 0) {\n      total += d;\n      count += 1;\n    }\n\n    l = index.starts[n + 1];\n\n    for (j = index.starts[n]; j < l; j++) {\n      neighbor = index.neighborhood[j];\n\n      if (seen.has(neighbor)) continue;\n\n      seen.add(neighbor);\n      queue.push([neighbor, d + 1]);\n    }\n  }\n\n  return [count, total];\n};\n\n/**\n * Abstract function computing the closeness centrality of a graph's nodes.\n *\n * @param  {boolean}  assign        - Should we assign the result to nodes.\n * @param  {Graph}    graph         - Target graph.\n * @param  {?object}  option        - Options:\n * @param  {?string}   nodeCentralityAttribute - Name of the centrality attribute to assign.\n * @param  {?boolean}  wassermanFaust - Whether to compute the Wasserman & Faust\n *                                      variant of the metric.\n * @return {object|undefined}\n */\nfunction abstractClosenessCentrality(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/centrality/closeness: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var wassermanFaust = options.wassermanFaust;\n\n  var bfs = new IndexedBFS(graph);\n\n  var N = graph.order;\n\n  var i, result, count, total, closeness;\n\n  var mapping = new Float64Array(N);\n\n  for (i = 0; i < N; i++) {\n    result = bfs.fromNode(i);\n    count = result[0];\n    total = result[1];\n\n    closeness = 0;\n\n    if (total > 0 && N > 1) {\n      closeness = count / total;\n\n      if (wassermanFaust) {\n        closeness *= count / (N - 1);\n      }\n    }\n\n    mapping[i] = closeness;\n  }\n\n  if (assign) {\n    return bfs.index.assign(options.nodeCentralityAttribute, mapping);\n  }\n\n  return bfs.index.collect(mapping);\n}\n\n/**\n * Exporting.\n */\nvar closenessCentrality = abstractClosenessCentrality.bind(null, false);\nclosenessCentrality.assign = abstractClosenessCentrality.bind(null, true);\n\nmodule.exports = closenessCentrality;\n","/**\n * Graphology Eigenvector Centrality\n * ==================================\n *\n * JavaScript implementation of the eigenvector centrality.\n *\n * [References]:\n * https://en.wikipedia.org/wiki/Eigenvector_centrality\n *\n * Phillip Bonacich. \"Power and Centrality: A Family of Measures.\"\n * American Journal of Sociology, 92(5):1170–1182, 1986\n * http://www.leonidzhukov.net/hse/2014/socialnetworks/papers/Bonacich-Centrality.pdf\n *\n * Mark E. J. Newman.\n * Networks: An Introduct *\n * Oxford University Press, USA, 2010, pp. 169.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar resolveDefaults = require('graphology-utils/defaults');\nvar WeightedNeighborhoodIndex =\n  require('graphology-indices/neighborhood').WeightedNeighborhoodIndex;\n\n/**\n * Defaults.\n */\nvar DEFAULTS = {\n  nodeCentralityAttribute: 'eigenvectorCentrality',\n  getEdgeWeight: 'weight',\n  maxIterations: 100,\n  tolerance: 1e-6\n};\n\n/**\n * Helpers.\n */\nfunction safeVariadicHypot(x) {\n  var max = 0;\n  var s = 0;\n\n  for (var i = 0, l = x.length; i < l; i++) {\n    var n = Math.abs(x[i]);\n\n    if (n > max) {\n      s *= (max / n) * (max / n);\n      max = n;\n    }\n    s += n === 0 && max === 0 ? 0 : (n / max) * (n / max);\n  }\n\n  // NOTE: In case of numerical error we'll assume the norm is 1 in our case!\n  return max === Infinity ? 1 : max * Math.sqrt(s);\n}\n\n/**\n * Abstract function computing the eigenvector centrality of a graph's nodes.\n *\n * @param  {boolean}  assign        - Should we assign the result to nodes.\n * @param  {Graph}    graph         - Target graph.\n * @param  {?object}  option        - Options:\n * @param  {?string}    nodeCentralityAttribute - Name of the centrality attribute to assign.\n * @param  {?string}    getEdgeWeight - Name of the weight algorithm or getter function.\n * @param  {?number}    maxIterations - Maximum number of iterations to perform.\n * @param  {?number}    tolerance     - Error tolerance when checking for convergence.\n * @return {object|undefined}\n */\nfunction abstractEigenvectorCentrality(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/centrality/eigenvector: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var maxIterations = options.maxIterations;\n  var tolerance = options.tolerance;\n\n  var N = graph.order;\n\n  var index = new WeightedNeighborhoodIndex(graph, options.getEdgeWeight);\n\n  var i, j, l, w;\n\n  var x = new Float64Array(graph.order);\n\n  // Initializing\n  for (i = 0; i < N; i++) {\n    x[i] = 1 / N;\n  }\n\n  // Power iterations\n  var iteration = 0;\n  var error = 0;\n  var neighbor, xLast, norm;\n  var converged = false;\n\n  while (iteration < maxIterations) {\n    xLast = x;\n    x = new Float64Array(xLast);\n\n    for (i = 0; i < N; i++) {\n      l = index.starts[i + 1];\n\n      for (j = index.starts[i]; j < l; j++) {\n        neighbor = index.neighborhood[j];\n        w = index.weights[j];\n        x[neighbor] += xLast[i] * w;\n      }\n    }\n\n    norm = safeVariadicHypot(x);\n\n    for (i = 0; i < N; i++) {\n      x[i] /= norm;\n    }\n\n    // Checking convergence\n    error = 0;\n\n    for (i = 0; i < N; i++) {\n      error += Math.abs(x[i] - xLast[i]);\n    }\n\n    if (error < N * tolerance) {\n      converged = true;\n      break;\n    }\n\n    iteration++;\n  }\n\n  if (!converged)\n    throw Error(\n      'graphology-metrics/centrality/eigenvector: failed to converge.'\n    );\n\n  if (assign) {\n    index.assign(options.nodeCentralityAttribute, x);\n    return;\n  }\n\n  return index.collect(x);\n}\n\n/**\n * Exporting.\n */\nvar eigenvectorCentrality = abstractEigenvectorCentrality.bind(null, false);\neigenvectorCentrality.assign = abstractEigenvectorCentrality.bind(null, true);\n\nmodule.exports = eigenvectorCentrality;\n","/**\n * Graphology HITS Algorithm\n * ==========================\n *\n * Implementation of the HITS algorithm for the graphology specs.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\nvar createEdgeWeightGetter =\n  require('graphology-utils/getters').createEdgeWeightGetter;\n\n// TODO: optimize using NeighborhoodIndex\n\n/**\n * Defaults.\n */\nvar DEFAULTS = {\n  nodeAuthorityAttribute: 'authority',\n  nodeHubAttribute: 'hub',\n  getEdgeWeight: 'weight',\n  maxIterations: 100,\n  normalize: true,\n  tolerance: 1e-8\n};\n\n/**\n * Function returning an object with the given keys set to the given value.\n *\n * @param  {array}  keys  - Keys to set.\n * @param  {number} value - Value to set.\n * @return {object}       - The created object.\n */\nfunction dict(keys, value) {\n  var o = Object.create(null);\n\n  var i, l;\n\n  for (i = 0, l = keys.length; i < l; i++) o[keys[i]] = value;\n\n  return o;\n}\n\n/**\n * Function returning the sum of an object's values.\n *\n * @param  {object} o - Target object.\n * @return {number}   - The sum.\n */\nfunction sum(o) {\n  var nb = 0;\n\n  for (var k in o) nb += o[k];\n\n  return nb;\n}\n\n/**\n * HITS function taking a Graph instance & some options and returning a map\n * of nodes to their hubs & authorities.\n *\n * @param  {boolean} assign    - Should we assign the results as node attributes?\n * @param  {Graph}   graph     - A Graph instance.\n * @param  {object}  [options] - Options:\n * @param  {number}    [maxIterations] - Maximum number of iterations to perform.\n * @param  {boolean}   [normalize]     - Whether to normalize the results by the\n *                                       sum of all values.\n * @param  {number}    [tolerance]     - Error tolerance used to check\n *                                       convergence in power method iteration.\n */\nfunction hits(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-hits: the given graph is not a valid graphology instance.'\n    );\n\n  if (graph.multi)\n    throw new Error(\n      'graphology-hits: the HITS algorithm does not work with MultiGraphs.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var getEdgeWeight = createEdgeWeightGetter(options.getEdgeWeight).fromEntry;\n\n  // Variables\n  var order = graph.order;\n  var nodes = graph.nodes();\n  var edges;\n  var hubs = dict(nodes, 1 / order);\n  var weights = {};\n  var converged = false;\n  var lastHubs;\n  var authorities;\n\n  // Iteration variables\n  var node, neighbor, edge, iteration, maxAuthority, maxHub, error, S, i, j, m;\n\n  // Indexing weights\n  graph.forEachEdge(function (e, a, s, t, sa, ta, u) {\n    weights[e] = getEdgeWeight(e, a, s, t, sa, ta, u);\n  });\n\n  // Performing iterations\n  for (iteration = 0; iteration < options.maxIterations; iteration++) {\n    lastHubs = hubs;\n    hubs = dict(nodes, 0);\n    authorities = dict(nodes, 0);\n    maxHub = 0;\n    maxAuthority = 0;\n\n    // Iterating over nodes to update authorities\n    for (i = 0; i < order; i++) {\n      node = nodes[i];\n      edges = graph.outboundEdges(node);\n\n      // Iterating over neighbors\n      for (j = 0, m = edges.length; j < m; j++) {\n        edge = edges[j];\n        neighbor = graph.opposite(node, edge);\n\n        authorities[neighbor] += lastHubs[node] * weights[edge];\n\n        if (authorities[neighbor] > maxAuthority)\n          maxAuthority = authorities[neighbor];\n      }\n    }\n\n    // Iterating over nodes to update hubs\n    for (i = 0; i < order; i++) {\n      node = nodes[i];\n      edges = graph.outboundEdges(node);\n\n      for (j = 0, m = edges.length; j < m; j++) {\n        edge = edges[j];\n        neighbor = graph.opposite(node, edge);\n\n        hubs[node] += authorities[neighbor] * weights[edge];\n\n        if (hubs[neighbor] > maxHub) maxHub = hubs[neighbor];\n      }\n    }\n\n    // Normalizing\n    S = 1 / maxHub;\n\n    for (node in hubs) hubs[node] *= S;\n\n    S = 1 / maxAuthority;\n\n    for (node in authorities) authorities[node] *= S;\n\n    // Checking convergence\n    error = 0;\n\n    for (node in hubs) error += Math.abs(hubs[node] - lastHubs[node]);\n\n    if (error < options.tolerance) {\n      converged = true;\n      break;\n    }\n  }\n\n  if (!converged)\n    throw Error('graphology-metrics/centrality/hits: failed to converge.');\n\n  // Should we normalize the result?\n  if (options.normalize) {\n    S = 1 / sum(authorities);\n\n    for (node in authorities) authorities[node] *= S;\n\n    S = 1 / sum(hubs);\n\n    for (node in hubs) hubs[node] *= S;\n  }\n\n  // Should we assign the results to the graph?\n  if (assign) {\n    graph.updateEachNodeAttributes(\n      function (n, attr) {\n        attr[options.nodeAuthorityAttribute] = authorities[n];\n        attr[options.nodeHubAttribute] = hubs[n];\n\n        return attr;\n      },\n      {\n        attributes: [options.nodeAuthorityAttribute, options.nodeHubAttribute]\n      }\n    );\n\n    return;\n  }\n\n  return {hubs: hubs, authorities: authorities};\n}\n\n/**\n * Exporting.\n */\nvar main = hits.bind(null, false);\nmain.assign = hits.bind(null, true);\n\nmodule.exports = main;\n","/**\n * Graphology Pagerank\n * ====================\n *\n * JavaScript implementation of the pagerank algorithm for graphology.\n *\n * [Reference]:\n * Page, Lawrence; Brin, Sergey; Motwani, Rajeev and Winograd, Terry,\n * The PageRank citation ranking: Bringing order to the Web. 1999\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar resolveDefaults = require('graphology-utils/defaults');\nvar WeightedNeighborhoodIndex =\n  require('graphology-indices/neighborhood').WeightedNeighborhoodIndex;\n\n/**\n * Defaults.\n */\nvar DEFAULTS = {\n  nodePagerankAttribute: 'pagerank',\n  getEdgeWeight: 'weight',\n  alpha: 0.85,\n  maxIterations: 100,\n  tolerance: 1e-6\n};\n\n/**\n * Abstract function applying the pagerank algorithm to the given graph.\n *\n * @param  {boolean}  assign        - Should we assign the result to nodes.\n * @param  {Graph}    graph         - Target graph.\n * @param  {?object}  option        - Options:\n * @param  {?object}    attributes  - Custom attribute names:\n * @param  {?string}      pagerank  - Name of the pagerank attribute to assign.\n * @param  {?string}      weight    - Name of the weight algorithm.\n * @param  {?number}  alpha         - Damping parameter.\n * @param  {?number}  maxIterations - Maximum number of iterations to perform.\n * @param  {?number}  tolerance     - Error tolerance when checking for convergence.\n * @param  {?boolean} weighted      - Should we use the graph's weights.\n * @return {object|undefined}\n */\nfunction abstractPagerank(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/centrality/pagerank: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var alpha = options.alpha;\n  var maxIterations = options.maxIterations;\n  var tolerance = options.tolerance;\n\n  var pagerankAttribute = options.nodePagerankAttribute;\n\n  var N = graph.order;\n  var p = 1 / N;\n\n  var index = new WeightedNeighborhoodIndex(graph, options.getEdgeWeight);\n\n  var i, j, l, d;\n\n  var x = new Float64Array(graph.order);\n\n  // Normalizing edge weights & indexing dangling nodes\n  var normalizedEdgeWeights = new Float64Array(index.weights.length);\n  var danglingNodes = [];\n\n  for (i = 0; i < N; i++) {\n    x[i] = p;\n    l = index.starts[i + 1];\n    d = index.outDegrees[i];\n\n    if (d === 0) danglingNodes.push(i);\n\n    for (j = index.starts[i]; j < l; j++) {\n      normalizedEdgeWeights[j] = index.weights[j] / d;\n    }\n  }\n\n  // Power iterations\n  var iteration = 0;\n  var error = 0;\n  var dangleSum, neighbor, xLast;\n  var converged = false;\n\n  while (iteration < maxIterations) {\n    xLast = x;\n    x = new Float64Array(graph.order); // TODO: it should be possible to swap two arrays to avoid allocations (bench)\n\n    dangleSum = 0;\n\n    for (i = 0, l = danglingNodes.length; i < l; i++)\n      dangleSum += xLast[danglingNodes[i]];\n\n    dangleSum *= alpha;\n\n    for (i = 0; i < N; i++) {\n      l = index.starts[i + 1];\n\n      for (j = index.starts[i]; j < l; j++) {\n        neighbor = index.neighborhood[j];\n        x[neighbor] += alpha * xLast[i] * normalizedEdgeWeights[j];\n      }\n\n      x[i] += dangleSum * p + (1 - alpha) * p;\n    }\n\n    // Checking convergence\n    error = 0;\n\n    for (i = 0; i < N; i++) {\n      error += Math.abs(x[i] - xLast[i]);\n    }\n\n    if (error < N * tolerance) {\n      converged = true;\n      break;\n    }\n\n    iteration++;\n  }\n\n  if (!converged)\n    throw Error('graphology-metrics/centrality/pagerank: failed to converge.');\n\n  if (assign) {\n    index.assign(pagerankAttribute, x);\n    return;\n  }\n\n  return index.collect(x);\n}\n\n/**\n * Exporting.\n */\nvar pagerank = abstractPagerank.bind(null, false);\npagerank.assign = abstractPagerank.bind(null, true);\n\nmodule.exports = pagerank;\n","/**\n * Graphology Metrics Centrality\n * ==============================\n *\n * Sub module endpoint.\n */\nvar degree = require('./degree.js');\n\nexports.betweenness = require('./betweenness.js');\nexports.closeness = require('./closeness.js');\nexports.eigenvector = require('./eigenvector.js');\nexports.hits = require('./hits.js');\nexports.pagerank = require('./pagerank.js');\n\nexports.degree = degree.degreeCentrality;\nexports.inDegree = degree.inDegreeCentrality;\nexports.outDegree = degree.outDegreeCentrality;\n","/**\n * Mnemonist Set\n * ==============\n *\n * Useful function related to sets such as union, intersection and so on...\n */\n\n// TODO: optimize versions for less variadicities\n\n/**\n * Variadic function computing the intersection of multiple sets.\n *\n * @param  {...Set} sets - Sets to intersect.\n * @return {Set}         - The intesection.\n */\nexports.intersection = function() {\n  if (arguments.length < 2)\n    throw new Error('mnemonist/Set.intersection: needs at least two arguments.');\n\n  var I = new Set();\n\n  // First we need to find the smallest set\n  var smallestSize = Infinity,\n      smallestSet = null;\n\n  var s, i, l = arguments.length;\n\n  for (i = 0; i < l; i++) {\n    s = arguments[i];\n\n    // If one of the set has no items, we can stop right there\n    if (s.size === 0)\n      return I;\n\n    if (s.size < smallestSize) {\n      smallestSize = s.size;\n      smallestSet = s;\n    }\n  }\n\n  // Now we need to intersect this set with the others\n  var iterator = smallestSet.values(),\n      step,\n      item,\n      add,\n      set;\n\n  // TODO: we can optimize by iterating each next time over the current intersection\n  // but this probably means more RAM to consume since we'll create n-1 sets rather than\n  // only the one.\n  while ((step = iterator.next(), !step.done)) {\n    item = step.value;\n    add = true;\n\n    for (i = 0; i < l; i++) {\n      set = arguments[i];\n\n      if (set === smallestSet)\n        continue;\n\n      if (!set.has(item)) {\n        add = false;\n        break;\n      }\n    }\n\n    if (add)\n      I.add(item);\n  }\n\n  return I;\n};\n\n/**\n * Variadic function computing the union of multiple sets.\n *\n * @param  {...Set} sets - Sets to unite.\n * @return {Set}         - The union.\n */\nexports.union = function() {\n  if (arguments.length < 2)\n    throw new Error('mnemonist/Set.union: needs at least two arguments.');\n\n  var U = new Set();\n\n  var i, l = arguments.length;\n\n  var iterator,\n      step;\n\n  for (i = 0; i < l; i++) {\n    iterator = arguments[i].values();\n\n    while ((step = iterator.next(), !step.done))\n      U.add(step.value);\n  }\n\n  return U;\n};\n\n/**\n * Function computing the difference between two sets.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {Set}   - The difference.\n */\nexports.difference = function(A, B) {\n\n  // If first set is empty\n  if (!A.size)\n    return new Set();\n\n  if (!B.size)\n    return new Set(A);\n\n  var D = new Set();\n\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      D.add(step.value);\n  }\n\n  return D;\n};\n\n/**\n * Function computing the symmetric difference between two sets.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {Set}   - The symmetric difference.\n */\nexports.symmetricDifference = function(A, B) {\n  var S = new Set();\n\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      S.add(step.value);\n  }\n\n  iterator = B.values();\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!A.has(step.value))\n      S.add(step.value);\n  }\n\n  return S;\n};\n\n/**\n * Function returning whether A is a subset of B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {boolean}\n */\nexports.isSubset = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  // Shortcuts\n  if (A === B)\n    return true;\n\n  if (A.size > B.size)\n    return false;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Function returning whether A is a superset of B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {boolean}\n */\nexports.isSuperset = function(A, B) {\n  return exports.isSubset(B, A);\n};\n\n/**\n * Function adding the items of set B to the set A.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.add = function(A, B) {\n  var iterator = B.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    A.add(step.value);\n\n  return;\n};\n\n/**\n * Function subtracting the items of set B from the set A.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.subtract = function(A, B) {\n  var iterator = B.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    A.delete(step.value);\n\n  return;\n};\n\n/**\n * Function intersecting the items of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.intersect = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      A.delete(step.value);\n  }\n\n  return;\n};\n\n/**\n * Function disjuncting the items of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.disjunct = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  var toRemove = [];\n\n  while ((step = iterator.next(), !step.done)) {\n    if (B.has(step.value))\n      toRemove.push(step.value);\n  }\n\n  iterator = B.values();\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!A.has(step.value))\n      A.add(step.value);\n  }\n\n  for (var i = 0, l = toRemove.length; i < l; i++)\n    A.delete(toRemove[i]);\n\n  return;\n};\n\n/**\n * Function returning the size of the intersection of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.intersectionSize = function(A, B) {\n  var tmp;\n\n  // We need to know the smallest set\n  if (A.size > B.size) {\n    tmp = A;\n    A = B;\n    B = tmp;\n  }\n\n  if (A.size === 0)\n    return 0;\n\n  if (A === B)\n    return A.size;\n\n  var iterator = A.values(),\n      step;\n\n  var I = 0;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (B.has(step.value))\n      I++;\n  }\n\n  return I;\n};\n\n/**\n * Function returning the size of the union of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.unionSize = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  return A.size + B.size - I;\n};\n\n/**\n * Function returning the Jaccard similarity between A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.jaccard = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  if (I === 0)\n    return 0;\n\n  var U = A.size + B.size - I;\n\n  return I / U;\n};\n\n/**\n * Function returning the overlap coefficient between A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.overlap = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  if (I === 0)\n    return 0;\n\n  return I / Math.min(A.size, B.size);\n};\n","/**\n * Graphology Simmelian Strength\n * ==============================\n *\n * Function computing the Simmelian strength, i.e. the number of triangles in\n * which an edge stands, for each edge in a given graph.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar intersectionSize = require('mnemonist/set').intersectionSize;\n\nfunction abstractSimmelianStrength(assign, graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/simmelian-strength: given graph is not a valid graphology instance.'\n    );\n\n  // Indexing neighborhoods\n  var neighborhoods = {};\n\n  graph.forEachNode(function (node) {\n    neighborhoods[node] = new Set(graph.neighbors(node));\n  });\n\n  if (!assign) {\n    var strengths = {};\n\n    graph.forEachEdge(function (edge, _, source, target) {\n      strengths[edge] = intersectionSize(\n        neighborhoods[source],\n        neighborhoods[target]\n      );\n    });\n\n    return strengths;\n  }\n\n  graph.updateEachEdgeAttributes(\n    function (_, attr, source, target) {\n      attr.simmelianStrength = intersectionSize(\n        neighborhoods[source],\n        neighborhoods[target]\n      );\n\n      return attr;\n    },\n    {attributes: ['simmelianStrength']}\n  );\n}\n\nvar simmelianStrength = abstractSimmelianStrength.bind(null, false);\nsimmelianStrength.assign = abstractSimmelianStrength.bind(null, true);\n\nmodule.exports = simmelianStrength;\n","exports.simmelianStrength = require('./simmelian-strength.js');\n","/**\n * Graphology Simple Size\n * =======================\n *\n * Function returning the simple size of a graph, i.e. the size it would have\n * if it we assume it is a simple graph.\n */\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Simple size function.\n *\n * @param  {Graph}  graph - Target graph.\n * @return {number}\n */\nmodule.exports = function simpleSize(graph) {\n  // Handling errors\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/simple-size: the given graph is not a valid graphology instance.'\n    );\n\n  if (!graph.multi) return graph.size;\n\n  var u = 0;\n  var d = 0;\n\n  function accumulateUndirected() {\n    u++;\n  }\n\n  function accumulateDirected() {\n    d++;\n  }\n\n  graph.forEachNode(function (node) {\n    if (graph.type !== 'directed')\n      graph.forEachUndirectedNeighbor(node, accumulateUndirected);\n\n    if (graph.type !== 'undirected')\n      graph.forEachOutNeighbor(node, accumulateDirected);\n  });\n\n  return u / 2 + d;\n};\n","/**\n * Graphology Density\n * ===================\n *\n * Functions used to compute the density of the given graph.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar simpleSize = require('./simple-size.js');\n\n/**\n * Returns the undirected density.\n *\n * @param  {number} order - Number of nodes in the graph.\n * @param  {number} size  - Number of edges in the graph.\n * @return {number}\n */\nfunction undirectedDensity(order, size) {\n  return (2 * size) / (order * (order - 1));\n}\n\n/**\n * Returns the directed density.\n *\n * @param  {number} order - Number of nodes in the graph.\n * @param  {number} size  - Number of edges in the graph.\n * @return {number}\n */\nfunction directedDensity(order, size) {\n  return size / (order * (order - 1));\n}\n\n/**\n * Returns the mixed density.\n *\n * @param  {number} order - Number of nodes in the graph.\n * @param  {number} size  - Number of edges in the graph.\n * @return {number}\n */\nfunction mixedDensity(order, size) {\n  var d = order * (order - 1);\n\n  return size / (d + d / 2);\n}\n\n/**\n * Returns the density for the given parameters.\n *\n * Arity 3:\n * @param  {boolean} type  - Type of density.\n * @param  {boolean} multi - Compute multi density?\n * @param  {Graph}   graph - Target graph.\n *\n * Arity 4:\n * @param  {boolean} type  - Type of density.\n * @param  {boolean} multi - Compute multi density?\n * @param  {number}  order - Number of nodes in the graph.\n * @param  {number}  size  - Number of edges in the graph.\n *\n * @return {number}\n */\nfunction abstractDensity(type, multi, graph) {\n  var order, size;\n\n  // Retrieving order & size\n  if (arguments.length > 3) {\n    order = graph;\n    size = arguments[3];\n\n    if (typeof order !== 'number' || order < 0)\n      throw new Error(\n        'graphology-metrics/density: given order is not a valid number.'\n      );\n\n    if (typeof size !== 'number' || size < 0)\n      throw new Error(\n        'graphology-metrics/density: given size is not a valid number.'\n      );\n  } else {\n    if (!isGraph(graph))\n      throw new Error(\n        'graphology-metrics/density: given graph is not a valid graphology instance.'\n      );\n\n    order = graph.order;\n    size = graph.size;\n\n    if (graph.multi && multi === false) size = simpleSize(graph);\n  }\n\n  // When the graph has only one node, its density is 0\n  if (order < 2) return 0;\n\n  // Guessing type & multi\n  if (type === null) type = graph.type;\n  if (multi === null) multi = graph.multi;\n\n  // Getting the correct function\n  var fn;\n\n  if (type === 'undirected') fn = undirectedDensity;\n  else if (type === 'directed') fn = directedDensity;\n  else fn = mixedDensity;\n\n  // Applying the function\n  return fn(order, size);\n}\n\n/**\n * Exporting.\n */\nexports.abstractDensity = abstractDensity;\nexports.density = abstractDensity.bind(null, null, null);\nexports.directedDensity = abstractDensity.bind(null, 'directed', false);\nexports.undirectedDensity = abstractDensity.bind(null, 'undirected', false);\nexports.mixedDensity = abstractDensity.bind(null, 'mixed', false);\nexports.multiDirectedDensity = abstractDensity.bind(null, 'directed', true);\nexports.multiUndirectedDensity = abstractDensity.bind(null, 'undirected', true);\nexports.multiMixedDensity = abstractDensity.bind(null, 'mixed', true);\n","/**\n * Graphology Extent\n * ==================\n *\n * Simple function returning the extent of selected attributes of the graph.\n */\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Function returning the extent of the selected node attributes.\n *\n * @param  {Graph}        graph     - Target graph.\n * @param  {string|array} attribute - Single or multiple attributes.\n * @return {array|object}\n */\nfunction nodeExtent(graph, attribute) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/extent: the given graph is not a valid graphology instance.'\n    );\n\n  var attributes = [].concat(attribute);\n\n  var value, key, a;\n\n  var results = {};\n\n  for (a = 0; a < attributes.length; a++) {\n    key = attributes[a];\n\n    results[key] = [Infinity, -Infinity];\n  }\n\n  graph.forEachNode(function (node, data) {\n    for (a = 0; a < attributes.length; a++) {\n      key = attributes[a];\n      value = data[key];\n\n      if (value < results[key][0]) results[key][0] = value;\n\n      if (value > results[key][1]) results[key][1] = value;\n    }\n  });\n\n  return typeof attribute === 'string' ? results[attribute] : results;\n}\n\n/**\n * Function returning the extent of the selected edge attributes.\n *\n * @param  {Graph}        graph     - Target graph.\n * @param  {string|array} attribute - Single or multiple attributes.\n * @return {array|object}\n */\nfunction edgeExtent(graph, attribute) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/extent: the given graph is not a valid graphology instance.'\n    );\n\n  var attributes = [].concat(attribute);\n\n  var value, key, a;\n\n  var results = {};\n\n  for (a = 0; a < attributes.length; a++) {\n    key = attributes[a];\n\n    results[key] = [Infinity, -Infinity];\n  }\n\n  graph.forEachEdge(function (edge, data) {\n    for (a = 0; a < attributes.length; a++) {\n      key = attributes[a];\n      value = data[key];\n\n      if (value < results[key][0]) results[key][0] = value;\n\n      if (value > results[key][1]) results[key][1] = value;\n    }\n  });\n\n  return typeof attribute === 'string' ? results[attribute] : results;\n}\n\n/**\n * Exporting.\n */\nexports.nodeExtent = nodeExtent;\nexports.edgeExtent = edgeExtent;\n","/**\n * Mnemonist Queue\n * ================\n *\n * Queue implementation based on the ideas of Queue.js that seems to beat\n * a LinkedList one in performance.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Queue\n *\n * @constructor\n */\nfunction Queue() {\n  this.clear();\n}\n\n/**\n * Method used to clear the queue.\n *\n * @return {undefined}\n */\nQueue.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.offset = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the queue.\n *\n * @param  {any}    item - Item to enqueue.\n * @return {number}\n */\nQueue.prototype.enqueue = function(item) {\n\n  this.items.push(item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve & remove the first item of the queue.\n *\n * @return {any}\n */\nQueue.prototype.dequeue = function() {\n  if (!this.size)\n    return;\n\n  var item = this.items[this.offset];\n\n  if (++this.offset * 2 >= this.items.length) {\n    this.items = this.items.slice(this.offset);\n    this.offset = 0;\n  }\n\n  this.size--;\n\n  return item;\n};\n\n/**\n * Method used to retrieve the first item of the queue.\n *\n * @return {any}\n */\nQueue.prototype.peek = function() {\n  if (!this.size)\n    return;\n\n  return this.items[this.offset];\n};\n\n/**\n * Method used to iterate over the queue.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nQueue.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = this.offset, j = 0, l = this.items.length; i < l; i++, j++)\n    callback.call(scope, this.items[i], j, this);\n};\n\n/*\n * Method used to convert the queue to a JavaScript array.\n *\n * @return {array}\n */\nQueue.prototype.toArray = function() {\n  return this.items.slice(this.offset);\n};\n\n/**\n * Method used to create an iterator over a queue's values.\n *\n * @return {Iterator}\n */\nQueue.prototype.values = function() {\n  var items = this.items,\n      i = this.offset;\n\n  return new Iterator(function() {\n    if (i >= items.length)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a queue's entries.\n *\n * @return {Iterator}\n */\nQueue.prototype.entries = function() {\n  var items = this.items,\n      i = this.offset,\n      j = 0;\n\n  return new Iterator(function() {\n    if (i >= items.length)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Queue.prototype[Symbol.iterator] = Queue.prototype.values;\n\n/**\n * Convenience known methods.\n */\nQueue.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nQueue.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nQueue.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: Queue,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  Queue.prototype[Symbol.for('nodejs.util.inspect.custom')] = Queue.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a queue.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Queue}\n */\nQueue.from = function(iterable) {\n  var queue = new Queue();\n\n  forEach(iterable, function(value) {\n    queue.enqueue(value);\n  });\n\n  return queue;\n};\n\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a queue.\n *\n * @param  {...any} args\n * @return {Queue}\n */\nQueue.of = function() {\n  return Queue.from(arguments);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Queue;\n","/**\n * Graphology Unweighted Shortest Path\n * ====================================\n *\n * Basic algorithms to find the shortest paths between nodes in a graph\n * whose edges are not weighted.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar Queue = require('mnemonist/queue');\nvar extend = require('@yomguithereal/helpers/extend');\n\n/**\n * Function attempting to find the shortest path in a graph between\n * given source & target or `null` if such a path does not exist.\n *\n * @param  {Graph}      graph  - Target graph.\n * @param  {any}        source - Source node.\n * @param  {any}        target - Target node.\n * @return {array|null}        - Found path or `null`.\n */\nfunction bidirectional(graph, source, target) {\n  if (!isGraph(graph))\n    throw new Error('graphology-shortest-path: invalid graphology instance.');\n\n  if (arguments.length < 3)\n    throw new Error(\n      'graphology-shortest-path: invalid number of arguments. Expecting at least 3.'\n    );\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  if (!graph.hasNode(target))\n    throw new Error(\n      'graphology-shortest-path: the \"' +\n        target +\n        '\" target node does not exist in the given graph.'\n    );\n\n  source = '' + source;\n  target = '' + target;\n\n  // TODO: do we need a self loop to go there?\n  if (source === target) {\n    return [source];\n  }\n\n  // Binding functions\n  var getPredecessors = graph.inboundNeighbors.bind(graph),\n    getSuccessors = graph.outboundNeighbors.bind(graph);\n\n  var predecessor = {},\n    successor = {};\n\n  // Predecessor & successor\n  predecessor[source] = null;\n  successor[target] = null;\n\n  // Fringes\n  var forwardFringe = [source],\n    reverseFringe = [target],\n    currentFringe,\n    node,\n    neighbors,\n    neighbor,\n    i,\n    j,\n    l,\n    m;\n\n  var found = false;\n\n  outer: while (forwardFringe.length && reverseFringe.length) {\n    if (forwardFringe.length <= reverseFringe.length) {\n      currentFringe = forwardFringe;\n      forwardFringe = [];\n\n      for (i = 0, l = currentFringe.length; i < l; i++) {\n        node = currentFringe[i];\n        neighbors = getSuccessors(node);\n\n        for (j = 0, m = neighbors.length; j < m; j++) {\n          neighbor = neighbors[j];\n\n          if (!(neighbor in predecessor)) {\n            forwardFringe.push(neighbor);\n            predecessor[neighbor] = node;\n          }\n\n          if (neighbor in successor) {\n            // Path is found!\n            found = true;\n            break outer;\n          }\n        }\n      }\n    } else {\n      currentFringe = reverseFringe;\n      reverseFringe = [];\n\n      for (i = 0, l = currentFringe.length; i < l; i++) {\n        node = currentFringe[i];\n        neighbors = getPredecessors(node);\n\n        for (j = 0, m = neighbors.length; j < m; j++) {\n          neighbor = neighbors[j];\n\n          if (!(neighbor in successor)) {\n            reverseFringe.push(neighbor);\n            successor[neighbor] = node;\n          }\n\n          if (neighbor in predecessor) {\n            // Path is found!\n            found = true;\n            break outer;\n          }\n        }\n      }\n    }\n  }\n\n  if (!found) return null;\n\n  var path = [];\n\n  while (neighbor) {\n    path.unshift(neighbor);\n    neighbor = predecessor[neighbor];\n  }\n\n  neighbor = successor[path[path.length - 1]];\n\n  while (neighbor) {\n    path.push(neighbor);\n    neighbor = successor[neighbor];\n  }\n\n  return path.length ? path : null;\n}\n\n/**\n * Function attempting to find the shortest path in the graph between the\n * given source node & all the other nodes.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @return {object}        - The map of found paths.\n */\n\n// TODO: cutoff option\nfunction singleSource(graph, source) {\n  if (!isGraph(graph))\n    throw new Error('graphology-shortest-path: invalid graphology instance.');\n\n  if (arguments.length < 2)\n    throw new Error(\n      'graphology-shortest-path: invalid number of arguments. Expecting at least 2.'\n    );\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  source = '' + source;\n\n  var nextLevel = {},\n    paths = {},\n    currentLevel,\n    neighbors,\n    v,\n    w,\n    i,\n    l;\n\n  nextLevel[source] = true;\n  paths[source] = [source];\n\n  while (Object.keys(nextLevel).length) {\n    currentLevel = nextLevel;\n    nextLevel = {};\n\n    for (v in currentLevel) {\n      neighbors = graph.outboundNeighbors(v);\n\n      for (i = 0, l = neighbors.length; i < l; i++) {\n        w = neighbors[i];\n\n        if (!paths[w]) {\n          paths[w] = paths[v].concat(w);\n          nextLevel[w] = true;\n        }\n      }\n    }\n  }\n\n  return paths;\n}\n\n/**\n * Function attempting to find the shortest path lengths in the graph between\n * the given source node & all the other nodes.\n *\n * @param  {string} method - Neighbor collection method name.\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @return {object}        - The map of found path lengths.\n */\n\n// TODO: cutoff option\nfunction asbtractSingleSourceLength(method, graph, source) {\n  if (!isGraph(graph))\n    throw new Error('graphology-shortest-path: invalid graphology instance.');\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  source = '' + source;\n\n  // Performing BFS to count shortest paths\n  var seen = new Set();\n\n  var lengths = {},\n    level = 0;\n\n  lengths[source] = 0;\n\n  var currentLevel = [source];\n\n  var i, l, node;\n\n  while (currentLevel.length !== 0) {\n    var nextLevel = [];\n\n    for (i = 0, l = currentLevel.length; i < l; i++) {\n      node = currentLevel[i];\n\n      if (seen.has(node)) continue;\n\n      seen.add(node);\n      extend(nextLevel, graph[method](node));\n\n      lengths[node] = level;\n    }\n\n    level++;\n    currentLevel = nextLevel;\n  }\n\n  return lengths;\n}\n\nvar singleSourceLength = asbtractSingleSourceLength.bind(\n  null,\n  'outboundNeighbors'\n);\nvar undirectedSingleSourceLength = asbtractSingleSourceLength.bind(\n  null,\n  'neighbors'\n);\n\n/**\n * Function using Ulrik Brandes' method to map single source shortest paths\n * from selected node.\n *\n * [Reference]:\n * Ulrik Brandes: A Faster Algorithm for Betweenness Centrality.\n * Journal of Mathematical Sociology 25(2):163-177, 2001.\n *\n * @param  {Graph}  graph      - Target graph.\n * @param  {any}    source     - Source node.\n * @return {array}             - [Stack, Paths, Sigma]\n */\nfunction brandes(graph, source) {\n  source = '' + source;\n\n  var S = [],\n    P = {},\n    sigma = {};\n\n  var nodes = graph.nodes(),\n    Dv,\n    sigmav,\n    neighbors,\n    v,\n    w,\n    i,\n    j,\n    l,\n    m;\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    v = nodes[i];\n    P[v] = [];\n    sigma[v] = 0;\n  }\n\n  var D = {};\n\n  sigma[source] = 1;\n  D[source] = 0;\n\n  var queue = Queue.of(source);\n\n  while (queue.size) {\n    v = queue.dequeue();\n    S.push(v);\n\n    Dv = D[v];\n    sigmav = sigma[v];\n\n    neighbors = graph.outboundNeighbors(v);\n\n    for (j = 0, m = neighbors.length; j < m; j++) {\n      w = neighbors[j];\n\n      if (!(w in D)) {\n        queue.enqueue(w);\n        D[w] = Dv + 1;\n      }\n\n      if (D[w] === Dv + 1) {\n        sigma[w] += sigmav;\n        P[w].push(v);\n      }\n    }\n  }\n\n  return [S, P, sigma];\n}\n\n/**\n * Exporting.\n */\nexports.bidirectional = bidirectional;\nexports.singleSource = singleSource;\nexports.singleSourceLength = singleSourceLength;\nexports.undirectedSingleSourceLength = undirectedSingleSourceLength;\nexports.brandes = brandes;\n","/**\n * Extend function\n * ================\n *\n * Function used to push a bunch of values into an array at once.\n *\n * Its strategy is to mutate target array's length then setting the new indices\n * to be the values to add.\n *\n * A benchmark proved that it is faster than the following strategies:\n *   1) `array.push.apply(array, values)`.\n *   2) A loop of pushes.\n *   3) `array = array.concat(values)`, obviously.\n *\n * Intuitively, this is correct because when adding a lot of elements, the\n * chosen strategies does not need to handle the `arguments` object to\n * execute #.apply's variadicity and because the array know its final length\n * at the beginning, avoiding potential multiple reallocations of the underlying\n * contiguous array. Some engines may be able to optimize the loop of push\n * operations but empirically they don't seem to do so.\n */\n\n/**\n * Extends the target array with the given values.\n *\n * @param  {array} array  - Target array.\n * @param  {array} values - Values to add.\n */\nmodule.exports = function extend(array, values) {\n  var l2 = values.length;\n\n  if (l2 === 0)\n    return;\n\n  var l1 = array.length;\n\n  array.length += l2;\n\n  for (var i = 0; i < l2; i++)\n    array[l1 + i] = values[i];\n};\n","/**\n * Graphology Eccentricity\n * ========================\n *\n * Functions used to compute the eccentricity of each node of a given graph.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar singleSourceLength =\n  require('graphology-shortest-path/unweighted').singleSourceLength;\n\nmodule.exports = function eccentricity(graph, node) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/eccentricity: given graph is not a valid graphology instance.'\n    );\n\n  if (graph.size === 0) return Infinity;\n\n  var ecc = -Infinity;\n\n  var lengths = singleSourceLength(graph, node);\n\n  var otherNode;\n\n  var pathLength,\n    l = 0;\n\n  for (otherNode in lengths) {\n    pathLength = lengths[otherNode];\n\n    if (pathLength > ecc) ecc = pathLength;\n\n    l++;\n  }\n\n  if (l < graph.order) return Infinity;\n\n  return ecc;\n};\n","/**\n * Graphology Diameter\n * ========================\n *\n * Functions used to compute the diameter of the given graph.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar eccentricity = require('../node/eccentricity.js');\n\nmodule.exports = function diameter(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/diameter: given graph is not a valid graphology instance.'\n    );\n\n  if (graph.size === 0) return Infinity;\n\n  var max = -Infinity;\n\n  graph.someNode(function (node) {\n    var e = eccentricity(graph, node);\n\n    if (e > max) max = e;\n\n    // If the graph is not connected, its diameter is infinite\n    return max === Infinity;\n  });\n\n  return max;\n};\n","/**\n * Graphology Modularity\n * ======================\n *\n * Implementation of network modularity for graphology.\n *\n * Modularity is a bit of a tricky problem because there are a wide array\n * of different definitions and implementations. The current implementation\n * try to stay true to Newman's original definition and consider both the\n * undirected & directed case as well as the weighted one. The current\n * implementation should also be aligned with Louvain algorithm's definition\n * of the metric.\n *\n * Regarding the directed version, one has to understand that the undirected\n * version's is basically considering the graph as a directed one where all\n * edges would be mutual.\n *\n * There is one exception to this, though: self loops. To conform with density's\n * definition, as used in modularity's one, and to keep true to the matrix\n * formulation of modularity, one has to note that self-loops only count once\n * in both the undirected and directed cases. This means that a k-clique with\n * one node having a self-loop will not have the same modularity in the\n * undirected and mutual case. Indeed, in both cases the modularity of a\n * k-clique with one loop and minus one internal edge should be equal.\n *\n * This also means that, as with the naive density formula regarding loops,\n * one should increment M when considering a loop. Also, to remain coherent\n * in this regard, degree should not be multiplied by two because of the loop\n * else it will have too much importance regarding the considered proportions.\n *\n * Hence, here are the retained formulas:\n *\n * For dense weighted undirected network:\n * --------------------------------------\n *\n * Q = 1/2m * [ ∑ij[Aij - (di.dj / 2m)] * ∂(ci, cj) ]\n *\n * where:\n *  - i & j being a pair of nodes\n *  - m is the sum of edge weights\n *  - Aij being the weight of the ij edge (or 0 if absent)\n *  - di being the weighted degree of node i\n *  - ci being the community to which belongs node i\n *  - ∂ is Kronecker's delta function (1 if x = y else 0)\n *\n * For dense weighted directed network:\n * ------------------------------------\n *\n * Qd = 1/m * [ ∑ij[Aij - (dini.doutj / m)] * ∂(ci, cj) ]\n *\n * where:\n *  - dini is the in degree of node i\n *  - douti is the out degree of node i\n *\n * For sparse weighted undirected network:\n * ---------------------------------------\n *\n * Q = ∑c[ (∑cinternal / 2m) - (∑ctotal / 2m)² ]\n *\n * where:\n *  - c is a community\n *  - ∑cinternal is the total weight of a community internal edges\n *  - ∑ctotal is the total weight of edges connected to a community\n *\n * For sparse weighted directed network:\n * -------------------------------------\n *\n * Qd = ∑c[ (∑cinternal / m) - (∑cintotal * ∑couttotal / m²) ]\n *\n * where:\n *  - ∑cintotal is the total weight of edges pointing towards a community\n *  - ∑couttotal is the total weight of edges going from a community\n *\n * Note that dense version run in O(N²) while sparse version runs in O(V). So\n * the dense version is mostly here to guarantee the validity of the sparse one.\n * As such it is not used as default.\n *\n * For undirected delta computation:\n * ---------------------------------\n *\n * ∆Q = (dic / 2m) - ((∑ctotal * di) / 2m²)\n *\n * where:\n *  - dic is the degree of the node in community c\n *\n * For directed delta computation:\n * -------------------------------\n *\n * ∆Qd = (dic / m) - (((douti * ∑cintotal) + (dini * ∑couttotal)) / m²)\n *\n * Gephi's version of undirected delta computation:\n * ------------------------------------------------\n *\n * ∆Qgephi = dic - (di * Ztot) / 2m\n *\n * Note that the above formula is erroneous and should really be:\n *\n * ∆Qgephi = dic - (di * Ztot) / m\n *\n * because then: ∆Qgephi = ∆Q * 2m\n *\n * It is used because it is faster to compute. Since Gephi's error is only by\n * a constant factor, it does not make the result incorrect.\n *\n * [Latex]\n *\n * Sparse undirected\n * Q = \\sum_{c} \\bigg{[} \\frac{\\sum\\nolimits_{c\\,in}}{2m} - \\left(\\frac{\\sum\\nolimits_{c\\,tot}}{2m}\\right )^2 \\bigg{]}\n *\n * Sparse directed\n * Q_d = \\sum_{c} \\bigg{[} \\frac{\\sum\\nolimits_{c\\,in}}{m} - \\frac{\\sum_{c\\,tot}^{in}\\sum_{c\\,tot}^{out}}{m^2} \\bigg{]}\n *\n * [Articles]\n * M. E. J. Newman, « Modularity and community structure in networks »,\n * Proc. Natl. Acad. Sci. USA, vol. 103, no 23, 2006, p. 8577–8582\n * https://dx.doi.org/10.1073%2Fpnas.0601602103\n *\n * Newman, M. E. J. « Community detection in networks: Modularity optimization\n * and maximum likelihood are equivalent ». Physical Review E, vol. 94, no 5,\n * novembre 2016, p. 052315. arXiv.org, doi:10.1103/PhysRevE.94.052315.\n * https://arxiv.org/pdf/1606.02319.pdf\n *\n * Blondel, Vincent D., et al. « Fast unfolding of communities in large\n * networks ». Journal of Statistical Mechanics: Theory and Experiment,\n * vol. 2008, no 10, octobre 2008, p. P10008. DOI.org (Crossref),\n * doi:10.1088/1742-5468/2008/10/P10008.\n * https://arxiv.org/pdf/0803.0476.pdf\n *\n * Nicolas Dugué, Anthony Perez. Directed Louvain: maximizing modularity in\n * directed networks. [Research Report] Université d’Orléans. 2015. hal-01231784\n * https://hal.archives-ouvertes.fr/hal-01231784\n *\n * R. Lambiotte, J.-C. Delvenne and M. Barahona. Laplacian Dynamics and\n * Multiscale Modular Structure in Networks,\n * doi:10.1109/TNSE.2015.2391998.\n * https://arxiv.org/abs/0812.1770\n *\n * [Links]:\n * https://math.stackexchange.com/questions/2637469/where-does-the-second-formula-of-modularity-comes-from-in-the-louvain-paper-the\n * https://www.quora.com/How-is-the-formula-for-Louvain-modularity-change-derived\n * https://github.com/gephi/gephi/blob/master/modules/StatisticsPlugin/src/main/java/org/gephi/statistics/plugin/Modularity.java\n * https://github.com/igraph/igraph/blob/eca5e809aab1aa5d4eca1e381389bcde9cf10490/src/community.c#L906\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\nvar inferType = require('graphology-utils/infer-type');\nvar getters = require('graphology-utils/getters');\n\nvar DEFAULTS = {\n  getNodeCommunity: 'community',\n  getEdgeWeight: 'weight',\n  resolution: 1\n};\n\nfunction collectForUndirectedDense(graph, options) {\n  var communities = new Array(graph.order);\n  var weightedDegrees = new Float64Array(graph.order);\n  var weights = {};\n  var M = 0;\n\n  var getEdgeWeight = getters.createEdgeWeightGetter(\n    options.getEdgeWeight\n  ).fromEntry;\n  var getNodeCommunity = getters.createNodeValueGetter(\n    options.getNodeCommunity\n  ).fromEntry;\n\n  // Collecting communities\n  var i = 0;\n  var ids = {};\n  graph.forEachNode(function (node, attr) {\n    ids[node] = i;\n    communities[i++] = getNodeCommunity(node, attr);\n  });\n\n  // Collecting weights\n  graph.forEachUndirectedEdge(function (edge, attr, source, target, sa, ta, u) {\n    var weight = getEdgeWeight(edge, attr, source, target, sa, ta, u);\n\n    M += weight;\n    weights[edge] = weight;\n\n    weightedDegrees[ids[source]] += weight;\n\n    // NOTE: we double degree only if we don't have a loop\n    if (source !== target) weightedDegrees[ids[target]] += weight;\n  });\n\n  return {\n    weights: weights,\n    communities: communities,\n    weightedDegrees: weightedDegrees,\n    M: M\n  };\n}\n\nfunction collectForDirectedDense(graph, options) {\n  var communities = new Array(graph.order);\n  var weightedInDegrees = new Float64Array(graph.order);\n  var weightedOutDegrees = new Float64Array(graph.order);\n  var weights = {};\n  var M = 0;\n\n  var getEdgeWeight = getters.createEdgeWeightGetter(\n    options.getEdgeWeight\n  ).fromEntry;\n  var getNodeCommunity = getters.createNodeValueGetter(\n    options.getNodeCommunity\n  ).fromEntry;\n\n  // Collecting communities\n  var i = 0;\n  var ids = {};\n  graph.forEachNode(function (node, attr) {\n    ids[node] = i;\n    communities[i++] = getNodeCommunity(node, attr);\n  });\n\n  // Collecting weights\n  graph.forEachDirectedEdge(function (edge, attr, source, target, sa, ta, u) {\n    var weight = getEdgeWeight(edge, attr, source, target, sa, ta, u);\n\n    M += weight;\n    weights[edge] = weight;\n\n    weightedOutDegrees[ids[source]] += weight;\n    weightedInDegrees[ids[target]] += weight;\n  });\n\n  return {\n    weights: weights,\n    communities: communities,\n    weightedInDegrees: weightedInDegrees,\n    weightedOutDegrees: weightedOutDegrees,\n    M: M\n  };\n}\n\nfunction undirectedDenseModularity(graph, options) {\n  var resolution = options.resolution;\n\n  var result = collectForUndirectedDense(graph, options);\n\n  var communities = result.communities;\n  var weightedDegrees = result.weightedDegrees;\n\n  var M = result.M;\n\n  var nodes = graph.nodes();\n\n  var i, j, l, Aij, didj, e;\n\n  var S = 0;\n\n  var M2 = M * 2;\n\n  for (i = 0, l = graph.order; i < l; i++) {\n    // NOTE: it is important to parse the whole matrix here, diagonal and\n    // lower part included. A lot of implementation differ here because\n    // they process only a part of the matrix\n    for (j = 0; j < l; j++) {\n      // NOTE: Kronecker's delta\n      // NOTE: we could go from O(n^2) to O(avg.C^2)\n      if (communities[i] !== communities[j]) continue;\n\n      e = graph.undirectedEdge(nodes[i], nodes[j]);\n\n      Aij = result.weights[e] || 0;\n      didj = weightedDegrees[i] * weightedDegrees[j];\n\n      // We add twice if we have a self loop\n      if (i === j && typeof e !== 'undefined')\n        S += (Aij - (didj / M2) * resolution) * 2;\n      else S += Aij - (didj / M2) * resolution;\n    }\n  }\n\n  return S / M2;\n}\n\nfunction directedDenseModularity(graph, options) {\n  var resolution = options.resolution;\n\n  var result = collectForDirectedDense(graph, options);\n\n  var communities = result.communities;\n  var weightedInDegrees = result.weightedInDegrees;\n  var weightedOutDegrees = result.weightedOutDegrees;\n\n  var M = result.M;\n\n  var nodes = graph.nodes();\n\n  var i, j, l, Aij, didj, e;\n\n  var S = 0;\n\n  for (i = 0, l = graph.order; i < l; i++) {\n    // NOTE: it is important to parse the whole matrix here, diagonal and\n    // lower part included. A lot of implementation differ here because\n    // they process only a part of the matrix\n    for (j = 0; j < l; j++) {\n      // NOTE: Kronecker's delta\n      // NOTE: we could go from O(n^2) to O(avg.C^2)\n      if (communities[i] !== communities[j]) continue;\n\n      e = graph.directedEdge(nodes[i], nodes[j]);\n\n      Aij = result.weights[e] || 0;\n      didj = weightedInDegrees[i] * weightedOutDegrees[j];\n\n      // Here we multiply by two to simulate iteration through lower part\n      S += Aij - (didj / M) * resolution;\n    }\n  }\n\n  return S / M;\n}\n\nfunction collectCommunitesForUndirected(graph, options) {\n  var communities = {};\n  var totalWeights = {};\n  var internalWeights = {};\n\n  var getNodeCommunity = getters.createNodeValueGetter(\n    options.getNodeCommunity\n  ).fromEntry;\n\n  graph.forEachNode(function (node, attr) {\n    var community = getNodeCommunity(node, attr);\n    communities[node] = community;\n\n    if (typeof community === 'undefined')\n      throw new Error(\n        'graphology-metrics/modularity: the \"' +\n          node +\n          '\" node is not in the partition.'\n      );\n\n    totalWeights[community] = 0;\n    internalWeights[community] = 0;\n  });\n\n  return {\n    communities: communities,\n    totalWeights: totalWeights,\n    internalWeights: internalWeights\n  };\n}\n\nfunction collectCommunitesForDirected(graph, options) {\n  var communities = {};\n  var totalInWeights = {};\n  var totalOutWeights = {};\n  var internalWeights = {};\n\n  var getNodeCommunity = getters.createNodeValueGetter(\n    options.getNodeCommunity\n  ).fromEntry;\n\n  graph.forEachNode(function (node, attr) {\n    var community = getNodeCommunity(node, attr);\n    communities[node] = community;\n\n    if (typeof community === 'undefined')\n      throw new Error(\n        'graphology-metrics/modularity: the \"' +\n          node +\n          '\" node is not in the partition.'\n      );\n\n    totalInWeights[community] = 0;\n    totalOutWeights[community] = 0;\n    internalWeights[community] = 0;\n  });\n\n  return {\n    communities: communities,\n    totalInWeights: totalInWeights,\n    totalOutWeights: totalOutWeights,\n    internalWeights: internalWeights\n  };\n}\n\nfunction undirectedSparseModularity(graph, options) {\n  var resolution = options.resolution;\n\n  var result = collectCommunitesForUndirected(graph, options);\n\n  var M = 0;\n\n  var totalWeights = result.totalWeights;\n  var internalWeights = result.internalWeights;\n  var communities = result.communities;\n\n  var getEdgeWeight = getters.createEdgeWeightGetter(\n    options.getEdgeWeight\n  ).fromEntry;\n\n  graph.forEachUndirectedEdge(function (\n    edge,\n    edgeAttr,\n    source,\n    target,\n    sa,\n    ta,\n    u\n  ) {\n    var weight = getEdgeWeight(edge, edgeAttr, source, target, sa, ta, u);\n\n    M += weight;\n\n    var sourceCommunity = communities[source];\n    var targetCommunity = communities[target];\n\n    totalWeights[sourceCommunity] += weight;\n    totalWeights[targetCommunity] += weight;\n\n    if (sourceCommunity !== targetCommunity) return;\n\n    internalWeights[sourceCommunity] += weight * 2;\n  });\n\n  var Q = 0;\n  var M2 = M * 2;\n\n  for (var C in internalWeights)\n    Q +=\n      internalWeights[C] / M2 - Math.pow(totalWeights[C] / M2, 2) * resolution;\n\n  return Q;\n}\n\nfunction directedSparseModularity(graph, options) {\n  var resolution = options.resolution;\n\n  var result = collectCommunitesForDirected(graph, options);\n\n  var M = 0;\n\n  var totalInWeights = result.totalInWeights;\n  var totalOutWeights = result.totalOutWeights;\n  var internalWeights = result.internalWeights;\n  var communities = result.communities;\n\n  var getEdgeWeight = getters.createEdgeWeightGetter(\n    options.getEdgeWeight\n  ).fromEntry;\n\n  graph.forEachDirectedEdge(function (\n    edge,\n    edgeAttr,\n    source,\n    target,\n    sa,\n    ta,\n    u\n  ) {\n    var weight = getEdgeWeight(edge, edgeAttr, source, target, sa, ta, u);\n\n    M += weight;\n\n    var sourceCommunity = communities[source];\n    var targetCommunity = communities[target];\n\n    totalOutWeights[sourceCommunity] += weight;\n    totalInWeights[targetCommunity] += weight;\n\n    if (sourceCommunity !== targetCommunity) return;\n\n    internalWeights[sourceCommunity] += weight;\n  });\n\n  var Q = 0;\n\n  for (var C in internalWeights)\n    Q +=\n      internalWeights[C] / M -\n      ((totalInWeights[C] * totalOutWeights[C]) / Math.pow(M, 2)) * resolution;\n\n  return Q;\n}\n\n// NOTE: the formula is a bit unclear here but nodeCommunityDegree should be\n// given as the edges count * 2\nfunction undirectedModularityDelta(\n  M,\n  communityTotalWeight,\n  nodeDegree,\n  nodeCommunityDegree\n) {\n  return (\n    nodeCommunityDegree / (2 * M) -\n    (communityTotalWeight * nodeDegree) / (2 * (M * M))\n  );\n}\n\nfunction directedModularityDelta(\n  M,\n  communityTotalInWeight,\n  communityTotalOutWeight,\n  nodeInDegree,\n  nodeOutDegree,\n  nodeCommunityDegree\n) {\n  return (\n    nodeCommunityDegree / M -\n    (nodeOutDegree * communityTotalInWeight +\n      nodeInDegree * communityTotalOutWeight) /\n      (M * M)\n  );\n}\n\nfunction denseModularity(graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/modularity: given graph is not a valid graphology instance.'\n    );\n\n  if (graph.size === 0)\n    throw new Error(\n      'graphology-metrics/modularity: cannot compute modularity of an empty graph.'\n    );\n\n  if (graph.multi)\n    throw new Error(\n      'graphology-metrics/modularity: cannot compute modularity of a multi graph. Cast it to a simple one beforehand.'\n    );\n\n  var trueType = inferType(graph);\n\n  if (trueType === 'mixed')\n    throw new Error(\n      'graphology-metrics/modularity: cannot compute modularity of a mixed graph.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  if (trueType === 'directed') return directedDenseModularity(graph, options);\n\n  return undirectedDenseModularity(graph, options);\n}\n\nfunction sparseModularity(graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/modularity: given graph is not a valid graphology instance.'\n    );\n\n  if (graph.size === 0)\n    throw new Error(\n      'graphology-metrics/modularity: cannot compute modularity of an empty graph.'\n    );\n\n  if (graph.multi)\n    throw new Error(\n      'graphology-metrics/modularity: cannot compute modularity of a multi graph. Cast it to a simple one beforehand.'\n    );\n\n  var trueType = inferType(graph);\n\n  if (trueType === 'mixed')\n    throw new Error(\n      'graphology-metrics/modularity: cannot compute modularity of a mixed graph.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  if (trueType === 'directed') return directedSparseModularity(graph, options);\n\n  return undirectedSparseModularity(graph, options);\n}\n\nvar modularity = sparseModularity;\n\nmodularity.sparse = sparseModularity;\nmodularity.dense = denseModularity;\nmodularity.undirectedDelta = undirectedModularityDelta;\nmodularity.directedDelta = directedModularityDelta;\n\nmodule.exports = modularity;\n","/**\n * Graphology Weighted Size\n * =========================\n *\n * Function returning the sum of the graph's edges' weights.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar createEdgeWeightGetter =\n  require('graphology-utils/getters').createEdgeWeightGetter;\n\n/**\n * Defaults.\n */\nvar DEFAULT_WEIGHT_ATTRIBUTE = 'weight';\n\n/**\n * Weighted size function.\n *\n * @param  {Graph}  graph                    - Target graph.\n * @param  {string|function} [getEdgeWeight] - Name of the weight attribute or getter function.\n * @return {number}\n */\nmodule.exports = function weightedSize(graph, getEdgeWeight) {\n  // Handling errors\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/weighted-size: the given graph is not a valid graphology instance.'\n    );\n\n  getEdgeWeight = createEdgeWeightGetter(\n    getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE\n  ).fromEntry;\n\n  var size = 0;\n\n  graph.forEachEdge(function (e, a, s, t, sa, ta, u) {\n    size += getEdgeWeight(e, a, s, t, sa, ta, u);\n  });\n\n  return size;\n};\n","var density = require('./density.js');\nvar extent = require('./extent.js');\n\nexports.diameter = require('./diameter.js');\nexports.modularity = require('./modularity.js');\nexports.simpleSize = require('./simple-size.js');\nexports.weightedSize = require('./weighted-size.js');\n\nexports.abstractDensity = density.abstractDensity;\nexports.density = density.density;\nexports.directedDensity = density.directedDensity;\nexports.undirectedDensity = density.undirectedDensity;\nexports.mixedDensity = density.mixedDensity;\nexports.multiDirectedDensity = density.multiDirectedDensity;\nexports.multiUndirectedDensity = density.multiUndirectedDensity;\nexports.multiMixedDensity = density.multiMixedDensity;\n\nexports.nodeExtent = extent.nodeExtent;\nexports.edgeExtent = extent.edgeExtent;\n","/**\n * Graphology Layout Quality - Edge Uniformity\n * ============================================\n *\n * Function computing the layout quality metric named \"edge uniformity\".\n * It is basically the normalized standard deviation of edge length.\n *\n * [Article]:\n * Rahman, Md Khaledur, et al. « BatchLayout: A Batch-Parallel Force-Directed\n * Graph Layout Algorithm in Shared Memory ».\n * http://arxiv.org/abs/2002.08233.\n */\nvar isGraph = require('graphology-utils/is-graph');\n\nfunction euclideanDistance(a, b) {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}\n\nmodule.exports = function edgeUniformity(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/layout-quality/edge-uniformity: given graph is not a valid graphology instance.'\n    );\n\n  if (graph.size === 0) return 0;\n\n  var sum = 0,\n    i = 0,\n    l;\n\n  var lengths = new Float64Array(graph.size);\n\n  graph.forEachEdge(function (\n    edge,\n    attr,\n    source,\n    target,\n    sourceAttr,\n    targetAttr\n  ) {\n    var edgeLength = euclideanDistance(sourceAttr, targetAttr);\n\n    lengths[i++] = edgeLength;\n    sum += edgeLength;\n  });\n\n  var avg = sum / graph.size;\n\n  var stdev = 0;\n\n  for (i = 0, l = graph.size; i < l; i++)\n    stdev += Math.pow(avg - lengths[i], 2);\n\n  var metric = stdev / (graph.size * Math.pow(avg, 2));\n\n  return Math.sqrt(metric);\n};\n","/**\n * Mnemonist Fixed Reverse Heap\n * =============================\n *\n * Static heap implementation with fixed capacity. It's a \"reverse\" heap\n * because it stores the elements in reverse so we can replace the worst\n * item in logarithmic time. As such, one cannot pop this heap but can only\n * consume it at the end. This structure is very efficient when trying to\n * find the n smallest/largest items from a larger query (k nearest neigbors\n * for instance).\n */\nvar comparators = require('./utils/comparators.js'),\n    Heap = require('./heap.js');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Helper functions.\n */\n\n/**\n * Function used to sift up.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {number}   size    - Heap's true size.\n * @param {number}   i       - Index.\n */\nfunction siftUp(compare, heap, size, i) {\n  var endIndex = size,\n      startIndex = i,\n      item = heap[i],\n      childIndex = 2 * i + 1,\n      rightIndex;\n\n  while (childIndex < endIndex) {\n    rightIndex = childIndex + 1;\n\n    if (\n      rightIndex < endIndex &&\n      compare(heap[childIndex], heap[rightIndex]) >= 0\n    ) {\n      childIndex = rightIndex;\n    }\n\n    heap[i] = heap[childIndex];\n    i = childIndex;\n    childIndex = 2 * i + 1;\n  }\n\n  heap[i] = item;\n  Heap.siftDown(compare, heap, startIndex, i);\n}\n\n/**\n * Fully consumes the given heap.\n *\n * @param  {function} ArrayClass - Array class to use.\n * @param  {function} compare    - Comparison function.\n * @param  {array}    heap       - Array storing the heap's data.\n * @param  {number}   size       - True size of the heap.\n * @return {array}\n */\nfunction consume(ArrayClass, compare, heap, size) {\n  var l = size,\n      i = l;\n\n  var array = new ArrayClass(size),\n      lastItem,\n      item;\n\n  while (i > 0) {\n    lastItem = heap[--i];\n\n    if (i !== 0) {\n      item = heap[0];\n      heap[0] = lastItem;\n      siftUp(compare, heap, --size, 0);\n      lastItem = item;\n    }\n\n    array[i] = lastItem;\n  }\n\n  return array;\n}\n\n/**\n * Binary Minimum FixedReverseHeap.\n *\n * @constructor\n * @param {function} ArrayClass - The class of array to use.\n * @param {function} comparator - Comparator function.\n * @param {number}   capacity   - Maximum number of items to keep.\n */\nfunction FixedReverseHeap(ArrayClass, comparator, capacity) {\n\n  // Comparator can be omitted\n  if (arguments.length === 2) {\n    capacity = comparator;\n    comparator = null;\n  }\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n\n  this.items = new ArrayClass(capacity);\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof capacity !== 'number' && capacity <= 0)\n    throw new Error('mnemonist/FixedReverseHeap.constructor: capacity should be a number > 0.');\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/FixedReverseHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nFixedReverseHeap.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nFixedReverseHeap.prototype.push = function(item) {\n\n  // Still some place\n  if (this.size < this.capacity) {\n    this.items[this.size] = item;\n    Heap.siftDown(this.comparator, this.items, 0, this.size);\n    this.size++;\n  }\n\n  // Heap is full, we need to replace worst item\n  else {\n\n    if (this.comparator(item, this.items[0]) > 0)\n      Heap.replace(this.comparator, this.items, item);\n  }\n\n  return this.size;\n};\n\n/**\n * Method used to peek the worst item in the heap.\n *\n * @return {any}\n */\nFixedReverseHeap.prototype.peek = function() {\n  return this.items[0];\n};\n\n/**\n * Method used to consume the heap fully and return its items as a sorted array.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.consume = function() {\n  var items = consume(this.ArrayClass, this.comparator, this.items, this.size);\n  this.size = 0;\n\n  return items;\n};\n\n/**\n * Method used to convert the heap to an array. Note that it basically clone\n * the heap and consumes it completely. This is hardly performant.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.toArray = function() {\n  return consume(this.ArrayClass, this.comparator, this.items.slice(0, this.size), this.size);\n};\n\n/**\n * Convenience known methods.\n */\nFixedReverseHeap.prototype.inspect = function() {\n  var proxy = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: FixedReverseHeap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedReverseHeap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedReverseHeap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = FixedReverseHeap;\n","/**\n * Mnemonist Quick Sort\n * =====================\n *\n * Quick sort related functions.\n * Adapted from: https://alienryderflex.com/quicksort/\n */\nvar LOS = new Float64Array(64),\n    HIS = new Float64Array(64);\n\nfunction inplaceQuickSort(array, lo, hi) {\n  var p, i, l, r, swap;\n\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      p = array[l];\n\n      while (l < r) {\n        while (array[r] >= p && l < r)\n          r--;\n\n        if (l < r)\n          array[l++] = array[r];\n\n        while (array[l] <= p && l < r)\n          l++;\n\n        if (l < r)\n          array[r--] = array[l];\n      }\n\n      array[l] = p;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    }\n    else {\n      i--;\n    }\n  }\n\n  return array;\n}\n\nexports.inplaceQuickSort = inplaceQuickSort;\n\nfunction inplaceQuickSortIndices(array, indices, lo, hi) {\n  var p, i, l, r, t, swap;\n\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      t = indices[l];\n      p = array[t];\n\n      while (l < r) {\n        while (array[indices[r]] >= p && l < r)\n          r--;\n\n        if (l < r)\n          indices[l++] = indices[r];\n\n        while (array[indices[l]] <= p && l < r)\n          l++;\n\n        if (l < r)\n          indices[r--] = indices[l];\n      }\n\n      indices[l] = t;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    }\n    else {\n      i--;\n    }\n  }\n\n  return indices;\n}\n\nexports.inplaceQuickSortIndices = inplaceQuickSortIndices;\n","/**\n * Mnemonist KDTree\n * =================\n *\n * Low-level JavaScript implementation of a k-dimensional tree.\n */\nvar iterables = require('./utils/iterables.js');\nvar typed = require('./utils/typed-arrays.js');\nvar createTupleComparator = require('./utils/comparators.js').createTupleComparator;\nvar FixedReverseHeap = require('./fixed-reverse-heap.js');\nvar inplaceQuickSortIndices = require('./sort/quick.js').inplaceQuickSortIndices;\n\n/**\n * Helper function used to compute the squared distance between a query point\n * and an indexed points whose values are stored in a tree's axes.\n *\n * Note that squared distance is used instead of euclidean to avoid\n * costly sqrt computations.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  axes       - Axes data.\n * @param  {number} pivot      - Pivot.\n * @param  {array}  point      - Query point.\n * @return {number}\n */\nfunction squaredDistanceAxes(dimensions, axes, pivot, b) {\n  var d;\n\n  var dist = 0,\n      step;\n\n  for (d = 0; d < dimensions; d++) {\n    step = axes[d][pivot] - b[d];\n    dist += step * step;\n  }\n\n  return dist;\n}\n\n/**\n * Helper function used to reshape input data into low-level axes data.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  data       - Data in the shape [label, [x, y, z...]]\n * @return {object}\n */\nfunction reshapeIntoAxes(dimensions, data) {\n  var l = data.length;\n\n  var axes = new Array(dimensions),\n      labels = new Array(l),\n      axis;\n\n  var PointerArray = typed.getPointerArray(l);\n\n  var ids = new PointerArray(l);\n\n  var d, i, row;\n\n  var f = true;\n\n  for (d = 0; d < dimensions; d++) {\n    axis = new Float64Array(l);\n\n    for (i = 0; i < l; i++) {\n      row = data[i];\n      axis[i] = row[1][d];\n\n      if (f) {\n        labels[i] = row[0];\n        ids[i] = i;\n      }\n    }\n\n    f = false;\n    axes[d] = axis;\n  }\n\n  return {axes: axes, ids: ids, labels: labels};\n}\n\n/**\n * Helper function used to build a kd-tree from axes data.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  axes       - Axes.\n * @param  {array}  ids        - Indices to sort.\n * @param  {array}  labels     - Point labels.\n * @return {object}\n */\nfunction buildTree(dimensions, axes, ids, labels) {\n  var l = labels.length;\n\n  // NOTE: +1 because we need to keep 0 as null pointer\n  var PointerArray = typed.getPointerArray(l + 1);\n\n  // Building the tree\n  var pivots = new PointerArray(l),\n      lefts = new PointerArray(l),\n      rights = new PointerArray(l);\n\n  var stack = [[0, 0, ids.length, -1, 0]],\n      step,\n      parent,\n      direction,\n      median,\n      pivot,\n      lo,\n      hi;\n\n  var d, i = 0;\n\n  while (stack.length !== 0) {\n    step = stack.pop();\n\n    d = step[0];\n    lo = step[1];\n    hi = step[2];\n    parent = step[3];\n    direction = step[4];\n\n    inplaceQuickSortIndices(axes[d], ids, lo, hi);\n\n    l = hi - lo;\n    median = lo + (l >>> 1); // Fancy floor(l / 2)\n    pivot = ids[median];\n    pivots[i] = pivot;\n\n    if (parent > -1) {\n      if (direction === 0)\n        lefts[parent] = i + 1;\n      else\n        rights[parent] = i + 1;\n    }\n\n    d = (d + 1) % dimensions;\n\n    // Right\n    if (median !== lo && median !== hi - 1) {\n      stack.push([d, median + 1, hi, i, 1]);\n    }\n\n    // Left\n    if (median !== lo) {\n      stack.push([d, lo, median, i, 0]);\n    }\n\n    i++;\n  }\n\n  return {\n    axes: axes,\n    labels: labels,\n    pivots: pivots,\n    lefts: lefts,\n    rights: rights\n  };\n}\n\n/**\n * KDTree.\n *\n * @constructor\n */\nfunction KDTree(dimensions, build) {\n  this.dimensions = dimensions;\n  this.visited = 0;\n\n  this.axes = build.axes;\n  this.labels = build.labels;\n\n  this.pivots = build.pivots;\n  this.lefts = build.lefts;\n  this.rights = build.rights;\n\n  this.size = this.labels.length;\n}\n\n/**\n * Method returning the query's nearest neighbor.\n *\n * @param  {array}  query - Query point.\n * @return {any}\n */\nKDTree.prototype.nearestNeighbor = function(query) {\n  var bestDistance = Infinity,\n      best = null;\n\n  var dimensions = this.dimensions,\n      axes = this.axes,\n      pivots = this.pivots,\n      lefts = this.lefts,\n      rights = this.rights;\n\n  var visited = 0;\n\n  function recurse(d, node) {\n    visited++;\n\n    var left = lefts[node],\n        right = rights[node],\n        pivot = pivots[node];\n\n    var dist = squaredDistanceAxes(\n      dimensions,\n      axes,\n      pivot,\n      query\n    );\n\n    if (dist < bestDistance) {\n      best = pivot;\n      bestDistance = dist;\n\n      if (dist === 0)\n        return;\n    }\n\n    var dx = axes[d][pivot] - query[d];\n\n    d = (d + 1) % dimensions;\n\n    // Going the correct way?\n    if (dx > 0) {\n      if (left !== 0)\n        recurse(d, left - 1);\n    }\n    else {\n      if (right !== 0)\n        recurse(d, right - 1);\n    }\n\n    // Going the other way?\n    if (dx * dx < bestDistance) {\n      if (dx > 0) {\n        if (right !== 0)\n          recurse(d, right - 1);\n      }\n      else {\n        if (left !== 0)\n          recurse(d, left - 1);\n      }\n    }\n  }\n\n  recurse(0, 0);\n\n  this.visited = visited;\n  return this.labels[best];\n};\n\nvar KNN_HEAP_COMPARATOR_3 = createTupleComparator(3);\nvar KNN_HEAP_COMPARATOR_2 = createTupleComparator(2);\n\n/**\n * Method returning the query's k nearest neighbors.\n *\n * @param  {number} k     - Number of nearest neighbor to retrieve.\n * @param  {array}  query - Query point.\n * @return {array}\n */\n\n// TODO: can do better by improving upon static-kdtree here\nKDTree.prototype.kNearestNeighbors = function(k, query) {\n  if (k <= 0)\n    throw new Error('mnemonist/kd-tree.kNearestNeighbors: k should be a positive number.');\n\n  k = Math.min(k, this.size);\n\n  if (k === 1)\n    return [this.nearestNeighbor(query)];\n\n  var heap = new FixedReverseHeap(Array, KNN_HEAP_COMPARATOR_3, k);\n\n  var dimensions = this.dimensions,\n      axes = this.axes,\n      pivots = this.pivots,\n      lefts = this.lefts,\n      rights = this.rights;\n\n  var visited = 0;\n\n  function recurse(d, node) {\n    var left = lefts[node],\n        right = rights[node],\n        pivot = pivots[node];\n\n    var dist = squaredDistanceAxes(\n      dimensions,\n      axes,\n      pivot,\n      query\n    );\n\n    heap.push([dist, visited++, pivot]);\n\n    var point = query[d],\n        split = axes[d][pivot],\n        dx = point - split;\n\n    d = (d + 1) % dimensions;\n\n    // Going the correct way?\n    if (point < split) {\n      if (left !== 0) {\n        recurse(d, left - 1);\n      }\n    }\n    else {\n      if (right !== 0) {\n        recurse(d, right - 1);\n      }\n    }\n\n    // Going the other way?\n    if (dx * dx < heap.peek()[0] || heap.size < k) {\n      if (point < split) {\n        if (right !== 0) {\n          recurse(d, right - 1);\n        }\n      }\n      else {\n        if (left !== 0) {\n          recurse(d, left - 1);\n        }\n      }\n    }\n  }\n\n  recurse(0, 0);\n\n  this.visited = visited;\n\n  var best = heap.consume();\n\n  for (var i = 0; i < best.length; i++)\n    best[i] = this.labels[best[i][2]];\n\n  return best;\n};\n\n/**\n * Method returning the query's k nearest neighbors by linear search.\n *\n * @param  {number} k     - Number of nearest neighbor to retrieve.\n * @param  {array}  query - Query point.\n * @return {array}\n */\nKDTree.prototype.linearKNearestNeighbors = function(k, query) {\n  if (k <= 0)\n    throw new Error('mnemonist/kd-tree.kNearestNeighbors: k should be a positive number.');\n\n  k = Math.min(k, this.size);\n\n  var heap = new FixedReverseHeap(Array, KNN_HEAP_COMPARATOR_2, k);\n\n  var i, l, dist;\n\n  for (i = 0, l = this.size; i < l; i++) {\n    dist = squaredDistanceAxes(\n      this.dimensions,\n      this.axes,\n      this.pivots[i],\n      query\n    );\n\n    heap.push([dist, i]);\n  }\n\n  var best = heap.consume();\n\n  for (i = 0; i < best.length; i++)\n    best[i] = this.labels[this.pivots[best[i][1]]];\n\n  return best;\n};\n\n/**\n * Convenience known methods.\n */\nKDTree.prototype.inspect = function() {\n  var dummy = new Map();\n\n  dummy.dimensions = this.dimensions;\n\n  Object.defineProperty(dummy, 'constructor', {\n    value: KDTree,\n    enumerable: false\n  });\n\n  var i, j, point;\n\n  for (i = 0; i < this.size; i++) {\n    point = new Array(this.dimensions);\n\n    for (j = 0; j < this.dimensions; j++)\n      point[j] = this.axes[j][i];\n\n    dummy.set(this.labels[i], point);\n  }\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  KDTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = KDTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {number}   dimensions - Space dimensions.\n * @return {KDTree}\n */\nKDTree.from = function(iterable, dimensions) {\n  var data = iterables.toArray(iterable);\n\n  var reshaped = reshapeIntoAxes(dimensions, data);\n\n  var result = buildTree(dimensions, reshaped.axes, reshaped.ids, reshaped.labels);\n\n  return new KDTree(dimensions, result);\n};\n\n/**\n * Static @.from function building a KDTree from given axes.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {number}   dimensions - Space dimensions.\n * @return {KDTree}\n */\nKDTree.fromAxes = function(axes, labels) {\n  if (!labels)\n    labels = typed.indices(axes[0].length);\n\n  var dimensions = axes.length;\n\n  var result = buildTree(axes.length, axes, typed.indices(labels.length), labels);\n\n  return new KDTree(dimensions, result);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = KDTree;\n","/**\n * Graphology Layout Quality - Neighborhood Preservation\n * ======================================================\n *\n * Function computing the layout quality metric named \"neighborhood preservation\".\n * It is basically the average of overlap coefficient between node neighbors in\n * the graph and equivalent k-nn in the 2d layout space.\n *\n * [Article]:\n * Rahman, Md Khaledur, et al. « BatchLayout: A Batch-Parallel Force-Directed\n * Graph Layout Algorithm in Shared Memory ».\n * http://arxiv.org/abs/2002.08233.\n */\nvar isGraph = require('graphology-utils/is-graph'),\n  KDTree = require('mnemonist/kd-tree'),\n  intersectionSize = require('mnemonist/set').intersectionSize;\n\nmodule.exports = function neighborhoodPreservation(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/layout-quality/neighborhood-preservation: given graph is not a valid graphology instance.'\n    );\n\n  if (graph.order === 0)\n    throw new Error(\n      'graphology-metrics/layout-quality/neighborhood-preservation: cannot compute stress for a null graph.'\n    );\n\n  if (graph.size === 0) return 0;\n\n  var axes = [new Float64Array(graph.order), new Float64Array(graph.order)],\n    i = 0;\n\n  graph.forEachNode(function (node, attr) {\n    axes[0][i] = attr.x;\n    axes[1][i++] = attr.y;\n  });\n\n  var tree = KDTree.fromAxes(axes, graph.nodes());\n\n  var sum = 0;\n\n  graph.forEachNode(function (node, attr) {\n    var neighbors = new Set(graph.neighbors(node));\n\n    // If node has no neighbors or is connected to every other node\n    if (neighbors.size === 0 || neighbors.size === graph.order - 1) {\n      sum += 1;\n      return;\n    }\n\n    var knn = tree.kNearestNeighbors(neighbors.size + 1, [attr.x, attr.y]);\n    knn = new Set(knn.slice(1));\n\n    var I = intersectionSize(neighbors, knn);\n\n    // Computing overlap coefficient\n    sum += I / knn.size;\n  });\n\n  return sum / graph.order;\n};\n","/**\n * Graphology Layout Quality - Stress\n * ===================================\n *\n * Function computing the layout quality metric named \"stress\".\n * It is basically the sum of normalized deltas between graph topology distances\n * and 2d space distances of the layout.\n *\n * [Article]:\n * Rahman, Md Khaledur, et al. « BatchLayout: A Batch-Parallel Force-Directed\n * Graph Layout Algorithm in Shared Memory ».\n * http://arxiv.org/abs/2002.08233.\n */\nvar isGraph = require('graphology-utils/is-graph'),\n  undirectedSingleSourceLength =\n    require('graphology-shortest-path/unweighted').undirectedSingleSourceLength;\n\nfunction euclideanDistance(a, b) {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}\n\nmodule.exports = function stress(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/layout-quality/stress: given graph is not a valid graphology instance.'\n    );\n\n  if (graph.order === 0)\n    throw new Error(\n      'graphology-metrics/layout-quality/stress: cannot compute stress for a null graph.'\n    );\n\n  var nodes = new Array(graph.order),\n    entries = new Array(graph.order),\n    i = 0;\n\n  // We choose an arbitrary large distance for when two nodes cannot be\n  // connected because they belong to different connected components\n  // and because we cannot deal with Infinity in our computations\n  // This is what most papers recommend anyway\n  var maxDistance = graph.order * 4;\n\n  graph.forEachNode(function (node, attr) {\n    nodes[i] = node;\n    entries[i++] = attr;\n  });\n\n  var j, l, p1, p2, shortestPaths, dij, wij, cicj;\n\n  var sum = 0;\n\n  for (i = 0, l = graph.order; i < l; i++) {\n    shortestPaths = undirectedSingleSourceLength(graph, nodes[i]);\n\n    p1 = entries[i];\n\n    for (j = i + 1; j < l; j++) {\n      p2 = entries[j];\n\n      // NOTE: dij should be 0 since we don't consider self-loops\n      dij = shortestPaths[nodes[j]];\n\n      // Target is in another castle\n      if (typeof dij === 'undefined') dij = maxDistance;\n\n      cicj = euclideanDistance(p1, p2);\n      wij = 1 / (dij * dij);\n\n      sum += wij * Math.pow(cicj - dij, 2);\n    }\n  }\n\n  return sum;\n};\n","/**\n * Graphology Weighted Degree\n * ===========================\n *\n * Function computing the weighted degree of nodes. The weighted degree is the\n * sum of a node's edges' weights.\n */\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Defaults.\n */\nvar DEFAULT_WEIGHT_ATTRIBUTE = 'weight';\n\n/**\n * Asbtract function to perform any kind of weighted degree.\n *\n * @param  {string}          name          - Name of the implemented function.\n * @param  {string}          method        - Method of the graph to get the edges.\n * @param  {Graph}           graph         - A graphology instance.\n * @param  {string}          node          - Target node.\n * @param  {string|function} getEdgeWeight - Name of edge weight attribute or getter function.\n *\n * @return {number}\n */\nfunction abstractWeightedDegree(name, method, graph, node, getEdgeWeight) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-metrics/' +\n        name +\n        ': the given graph is not a valid graphology instance.'\n    );\n\n  getEdgeWeight = getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE;\n\n  var d = 0;\n\n  graph[method](node, function (e, a, s, t, sa, ta, u) {\n    var w =\n      typeof getEdgeWeight === 'function'\n        ? getEdgeWeight(e, a, s, t, sa, ta, u)\n        : a[getEdgeWeight];\n\n    if (typeof w !== 'number' || isNaN(w)) w = 1;\n\n    d += w;\n  });\n\n  return d;\n}\n\n/**\n * Exports.\n */\nexports.weightedDegree = abstractWeightedDegree.bind(\n  null,\n  'weightedDegree',\n  'forEachEdge'\n);\nexports.weightedInDegree = abstractWeightedDegree.bind(\n  null,\n  'weightedInDegree',\n  'forEachInEdge'\n);\nexports.weightedOutDegree = abstractWeightedDegree.bind(\n  null,\n  'weightedOutDegree',\n  'forEachOutEdge'\n);\nexports.weightedInboundDegree = abstractWeightedDegree.bind(\n  null,\n  'weightedInboundDegree',\n  'forEachInboundEdge'\n);\nexports.weightedOutboundDegree = abstractWeightedDegree.bind(\n  null,\n  'weightedOutboundDegree',\n  'forEachOutboundEdge'\n);\nexports.weightedUndirectedDegree = abstractWeightedDegree.bind(\n  null,\n  'weightedUndirectedDegree',\n  'forEachUndirectedEdge'\n);\nexports.weightedDirectedDegree = abstractWeightedDegree.bind(\n  null,\n  'weightedDirectedDegree',\n  'forEachDirectedEdge'\n);\n","var wd = require('./weighted-degree.js');\n\nexports.eccentricity = require('./eccentricity.js');\n\nexports.weightedDegree = wd.weightedDegree;\nexports.weightedInDegree = wd.weightedInDegree;\nexports.weightedOutDegree = wd.weightedOutDegree;\nexports.weightedInboundDegree = wd.weightedInboundDegree;\nexports.weightedOutboundDegree = wd.weightedOutboundDegree;\nexports.weightedUndirectedDegree = wd.weightedUndirectedDegree;\nexports.weightedDirectedDegree = wd.weightedDirectedDegree;\n","/**\n * Graphology Metrics\n * ===================\n *\n * Library endpoint.\n */\nexports.centrality = require('./centrality');\nexports.edge = require('./edge');\nexports.graph = require('./graph');\nexports.layoutQuality = require('./layout-quality');\nexports.node = require('./node');\n","module.exports = require('graphology-metrics');\n","/**\n * Graphology Disjoint Union Operator\n * ===================================\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyNode = require('graphology-utils/add-node').copyNode;\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\n\n/**\n * Function returning the disjoint union of two given graphs by giving new keys\n * to nodes & edges.\n *\n * @param  {Graph} G - The first graph.\n * @param  {Graph} H - The second graph.\n * @return {Graph}\n */\nmodule.exports = function disjointUnion(G, H) {\n  if (!isGraph(G) || !isGraph(H))\n    throw new Error('graphology-operators/disjoint-union: invalid graph.');\n\n  if (G.multi !== H.multi)\n    throw new Error(\n      'graphology-operators/disjoint-union: both graph should be simple or multi.'\n    );\n\n  var R = G.nullCopy();\n\n  // TODO: in the spirit of this operator we should probably prefix something\n  R.mergeAttributes(G.getAttributes());\n\n  var labelsG = {};\n  var labelsH = {};\n\n  var i = 0;\n\n  // Adding nodes\n  G.forEachNode(function (key, attr) {\n    labelsG[key] = i;\n\n    copyNode(R, i, attr);\n\n    i++;\n  });\n\n  H.forEachNode(function (key, attr) {\n    labelsH[key] = i;\n\n    copyNode(R, i, attr);\n\n    i++;\n  });\n\n  // Adding edges\n  i = 0;\n\n  G.forEachEdge(function (key, attr, source, target, _s, _t, undirected) {\n    copyEdge(\n      R,\n      undirected,\n      i++,\n      labelsG[source],\n      labelsG[target],\n      target,\n      attr\n    );\n  });\n\n  H.forEachEdge(function (key, attr, source, target, _s, _t, undirected) {\n    copyEdge(\n      R,\n      undirected,\n      i++,\n      labelsH[source],\n      labelsH[target],\n      target,\n      attr\n    );\n  });\n\n  return R;\n};\n","/**\n * Graphology Revers Operator\n * ===========================\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\n\n/**\n * Function reversing the given graph.\n *\n * @param  {Graph} graph - Target graph.\n * @return {Graph}\n */\nmodule.exports = function reverse(graph) {\n  if (!isGraph(graph))\n    throw new Error('graphology-operators/reverse: invalid graph.');\n\n  var reversed = graph.emptyCopy();\n\n  // Importing undirected edges\n  graph.forEachUndirectedEdge(function (key, attr, source, target) {\n    copyEdge(reversed, true, key, source, target, attr);\n  });\n\n  // Reversing directed edges\n  graph.forEachDirectedEdge(function (key, attr, source, target) {\n    copyEdge(reversed, false, key, target, source, attr);\n  });\n\n  return reversed;\n};\n","/**\n * Graphology Sub Graph\n * =====================\n *\n * Function returning the subgraph composed of the nodes passed as parameters.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyNode = require('graphology-utils/add-node').copyNode;\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\n\nmodule.exports = function subgraph(graph, nodes) {\n  if (!isGraph(graph))\n    throw new Error('graphology-operators/subgraph: invalid graph instance.');\n\n  var S = graph.nullCopy();\n\n  var filterNode = nodes;\n\n  if (Array.isArray(nodes)) {\n    if (nodes.length === 0) return S;\n\n    nodes = new Set(nodes);\n  }\n\n  if (nodes instanceof Set) {\n    if (nodes.size === 0) return S;\n\n    filterNode = function (key) {\n      return nodes.has(key);\n    };\n\n    // Ensuring given keys are casted to string\n    var old = nodes;\n    nodes = new Set();\n\n    old.forEach(function (node) {\n      nodes.add('' + node);\n    });\n  }\n\n  if (typeof filterNode !== 'function')\n    throw new Error(\n      'graphology-operators/subgraph: invalid nodes. Expecting an array or a set or a filtering function.'\n    );\n\n  if (typeof nodes === 'function') {\n    graph.forEachNode(function (key, attr) {\n      if (!filterNode(key, attr)) return;\n\n      copyNode(S, key, attr);\n    });\n\n    // Early termination\n    if (S.order === 0) return S;\n  } else {\n    nodes.forEach(function (key) {\n      if (!graph.hasNode(key))\n        throw new Error(\n          'graphology-operators/subgraph: the \"' +\n            key +\n            '\" node was not found in the graph.'\n        );\n\n      copyNode(S, key, graph.getNodeAttributes(key));\n    });\n  }\n\n  graph.forEachEdge(function (\n    key,\n    attr,\n    source,\n    target,\n    sourceAttr,\n    targetAttr,\n    undirected\n  ) {\n    if (!filterNode(source, sourceAttr)) return;\n\n    if (target !== source && !filterNode(target, targetAttr)) return;\n\n    copyEdge(S, undirected, key, source, target, attr);\n  });\n\n  return S;\n};\n","/**\n * Graphology Operators To Directed Caster\n * ========================================\n *\n * Function used to cast any graph to a directed one.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\n\nmodule.exports = function toDirected(graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-operators/to-directed: expecting a valid graphology instance.'\n    );\n\n  if (typeof options === 'function') options = {mergeEdge: options};\n\n  options = options || {};\n\n  var mergeEdge =\n    typeof options.mergeEdge === 'function' ? options.mergeEdge : null;\n\n  if (graph.type === 'directed') return graph.copy();\n\n  var directedGraph = graph.emptyCopy({type: 'directed'});\n\n  // Adding directed edges\n  graph.forEachDirectedEdge(function (edge, attr, source, target) {\n    copyEdge(directedGraph, false, edge, source, target, attr);\n  });\n\n  // Merging undirected edges\n  graph.forEachUndirectedEdge(function (_, attr, source, target) {\n    var existingOutEdge =\n      !graph.multi &&\n      graph.type === 'mixed' &&\n      directedGraph.edge(source, target);\n\n    var existingInEdge =\n      !graph.multi &&\n      graph.type === 'mixed' &&\n      directedGraph.edge(target, source);\n\n    if (existingOutEdge) {\n      directedGraph.replaceEdgeAttributes(\n        existingOutEdge,\n        mergeEdge(directedGraph.getEdgeAttributes(existingOutEdge), attr)\n      );\n    } else {\n      copyEdge(directedGraph, false, null, source, target, attr);\n    }\n\n    // Don't add self-loops twice\n    if (source === target) return;\n\n    if (existingInEdge) {\n      directedGraph.replaceEdgeAttributes(\n        existingInEdge,\n        mergeEdge(directedGraph.getEdgeAttributes(existingInEdge), attr)\n      );\n    } else {\n      copyEdge(directedGraph, false, null, target, source, attr);\n    }\n  });\n\n  return directedGraph;\n};\n","/**\n * Graphology Operators To Mixed Caster\n * =====================================\n *\n * Function used to cast any graph to a mixed one.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\n\nmodule.exports = function toMixed(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-operators/to-mixed: expecting a valid graphology instance.'\n    );\n\n  if (graph.type === 'mixed') return graph.copy();\n\n  var mixedGraph = graph.emptyCopy({type: 'mixed'});\n\n  // TODO: do this faster when #.copy get options arg\n  graph.forEachEdge(function (e, a, s, t, sa, ta, u) {\n    copyEdge(mixedGraph, u, e, s, t, a);\n  });\n\n  return mixedGraph;\n};\n","/**\n * Graphology Operators To Multi Caster\n * =====================================\n *\n * Function used to cast any graph to a multi one.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\n\nmodule.exports = function toMulti(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-operators/to-multi: expecting a valid graphology instance.'\n    );\n\n  if (graph.multi) return graph.copy();\n\n  var multiGraph = graph.emptyCopy({multi: true});\n\n  // TODO: do this faster when #.copy get options arg\n  graph.forEachEdge(function (e, a, s, t, sa, ta, u) {\n    copyEdge(multiGraph, u, e, s, t, a);\n  });\n\n  return multiGraph;\n};\n","/**\n * Graphology Operators To Simple Caster\n * ======================================\n *\n * Function used to cast a multi graph to a simple one.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\n\nmodule.exports = function toSimple(multiGraph) {\n  if (!isGraph(multiGraph))\n    throw new Error(\n      'graphology-operators/to-simple: expecting a valid graphology instance.'\n    );\n\n  // The graph is not multi. We just return a plain copy\n  if (!multiGraph.multi) return multiGraph.copy();\n\n  // Creating a tweaked empty copy\n  var graph = multiGraph.emptyCopy({multi: false});\n\n  // Then we need to process edges\n  multiGraph.forEachDirectedEdge(function (edge, attr, source, target) {\n    if (graph.hasDirectedEdge(source, target)) return;\n\n    copyEdge(graph, false, edge, source, target, attr);\n  });\n\n  multiGraph.forEachUndirectedEdge(function (edge, attr, source, target) {\n    if (graph.hasUndirectedEdge(source, target)) return;\n\n    copyEdge(graph, true, edge, source, target, attr);\n  });\n\n  return graph;\n};\n","/**\n * Graphology Operators To Undirected Caster\n * ==========================================\n *\n * Function used to cast any graph to an undirected one.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar copyEdge = require('graphology-utils/add-edge').copyEdge;\n\nmodule.exports = function toUndirected(graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-operators/to-undirected: expecting a valid graphology instance.'\n    );\n\n  if (typeof options === 'function') options = {mergeEdge: options};\n\n  options = options || {};\n\n  var mergeEdge =\n    typeof options.mergeEdge === 'function' ? options.mergeEdge : null;\n\n  if (graph.type === 'undirected') return graph.copy();\n\n  var undirectedGraph = graph.emptyCopy({type: 'undirected'});\n\n  // Adding undirected edges\n  graph.forEachUndirectedEdge(function (edge, attr, source, target) {\n    copyEdge(undirectedGraph, true, edge, source, target, attr);\n  });\n\n  // Merging directed edges\n  graph.forEachDirectedEdge(function (edge, attr, source, target) {\n    if (!graph.multi) {\n      var existingEdge = undirectedGraph.edge(source, target);\n\n      if (existingEdge) {\n        // We need to merge\n        if (mergeEdge)\n          undirectedGraph.replaceEdgeAttributes(\n            existingEdge,\n            mergeEdge(undirectedGraph.getEdgeAttributes(existingEdge), attr)\n          );\n\n        return;\n      }\n    }\n\n    copyEdge(undirectedGraph, true, null, source, target, attr);\n  });\n\n  return undirectedGraph;\n};\n","/**\n * Graphology Union Operator\n * ==========================\n */\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Function returning the union of two given graphs.\n *\n * @param  {Graph} G - The first graph.\n * @param  {Graph} H - The second graph.\n * @return {Graph}\n */\nmodule.exports = function union(G, H) {\n  if (!isGraph(G) || !isGraph(H))\n    throw new Error('graphology-operators/union: invalid graph.');\n\n  if (G.multi !== H.multi)\n    throw new Error(\n      'graphology-operators/union: both graph should be simple or multi.'\n    );\n\n  var R = G.copy();\n  R.import(H, true);\n\n  return R;\n};\n","/**\n * Graphology Operators\n * =====================\n *\n * Library endpoint.\n */\nexports.disjointUnion = require('./disjoint-union.js');\nexports.reverse = require('./reverse.js');\nexports.subgraph = require('./subgraph.js');\nexports.toDirected = require('./to-directed.js');\nexports.toMixed = require('./to-mixed.js');\nexports.toMulti = require('./to-multi.js');\nexports.toSimple = require('./to-simple.js');\nexports.toUndirected = require('./to-undirected.js');\nexports.union = require('./union.js');\n","module.exports = require('graphology-operators');\n","/**\n * Graphology Shortest Path Utils\n * ===============================\n *\n * Miscellaneous shortest-path helper functions.\n */\nvar returnTrue = function () {\n  return true;\n};\n\nexports.edgePathFromNodePath = function (graph, nodePath) {\n  var l = nodePath.length;\n\n  var i, source, target, edge;\n\n  // Self loops\n  if (l < 2) {\n    source = nodePath[0];\n\n    edge = graph.multi\n      ? graph.findEdge(source, source, returnTrue)\n      : graph.edge(source, source);\n\n    if (edge) return [edge];\n\n    return [];\n  }\n\n  l--;\n\n  var edgePath = new Array(l);\n\n  for (i = 0; i < l; i++) {\n    source = nodePath[i];\n    target = nodePath[i + 1];\n\n    edge = graph.multi\n      ? graph.findOutboundEdge(source, target, returnTrue)\n      : graph.edge(source, target);\n\n    if (edge === undefined)\n      throw new Error(\n        'graphology-shortest-path: given path is impossible in given graph.'\n      );\n\n    edgePath[i] = edge;\n  }\n\n  return edgePath;\n};\n","/**\n * Graphology Dijkstra Shortest Path\n * ==================================\n *\n * Graphology implementation of Dijkstra shortest path for weighted graphs.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar createEdgeWeightGetter =\n  require('graphology-utils/getters').createEdgeWeightGetter;\nvar Heap = require('mnemonist/heap');\n\n/**\n * Defaults & helpers.\n */\nvar DEFAULT_WEIGHT_ATTRIBUTE = 'weight';\n\nfunction DIJKSTRA_HEAP_COMPARATOR(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (a[0] < b[0]) return -1;\n\n  if (a[1] > b[1]) return 1;\n  if (a[1] < b[1]) return -1;\n\n  if (a[2] > b[2]) return 1;\n  if (a[2] < b[2]) return -1;\n\n  return 0;\n}\n\nfunction BRANDES_DIJKSTRA_HEAP_COMPARATOR(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (a[0] < b[0]) return -1;\n\n  if (a[1] > b[1]) return 1;\n  if (a[1] < b[1]) return -1;\n\n  if (a[2] > b[2]) return 1;\n  if (a[2] < b[2]) return -1;\n\n  if (a[3] > b[3]) return 1;\n  if (a[3] < b[3]) return -1;\n\n  return 0;\n}\n\n/**\n * Bidirectional Dijkstra shortest path between source & target node abstract.\n *\n * Note that this implementation was basically copied from networkx.\n *\n * @param  {Graph}  graph         - The graphology instance.\n * @param  {string} source        - Source node.\n * @param  {string} target        - Target node.\n * @param  {string} getEdgeWeight - Name of the weight attribute or getter function.\n * @param  {array}                - The found path if any and its cost.\n */\nfunction abstractBidirectionalDijkstra(graph, source, target, getEdgeWeight) {\n  source = '' + source;\n  target = '' + target;\n\n  // Sanity checks\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: invalid graphology instance.'\n    );\n\n  if (source && !graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  if (target && !graph.hasNode(target))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: the \"' +\n        target +\n        '\" target node does not exist in the given graph.'\n    );\n\n  getEdgeWeight = createEdgeWeightGetter(\n    getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE\n  ).fromMinimalEntry;\n\n  if (source === target) return [0, [source]];\n\n  var distances = [{}, {}],\n    paths = [{}, {}],\n    fringe = [\n      new Heap(DIJKSTRA_HEAP_COMPARATOR),\n      new Heap(DIJKSTRA_HEAP_COMPARATOR)\n    ],\n    seen = [{}, {}];\n\n  paths[0][source] = [source];\n  paths[1][target] = [target];\n\n  seen[0][source] = 0;\n  seen[1][target] = 0;\n\n  var finalPath = [],\n    finalDistance = Infinity;\n\n  var count = 0,\n    dir = 1,\n    item,\n    edges,\n    cost,\n    d,\n    v,\n    u,\n    e,\n    i,\n    l;\n\n  fringe[0].push([0, count++, source]);\n  fringe[1].push([0, count++, target]);\n\n  while (fringe[0].size && fringe[1].size) {\n    // Swapping direction\n    dir = 1 - dir;\n\n    item = fringe[dir].pop();\n    d = item[0];\n    v = item[2];\n\n    if (v in distances[dir]) continue;\n\n    distances[dir][v] = d;\n\n    // Shortest path is found?\n    if (v in distances[1 - dir]) return [finalDistance, finalPath];\n\n    edges = dir === 1 ? graph.inboundEdges(v) : graph.outboundEdges(v);\n\n    for (i = 0, l = edges.length; i < l; i++) {\n      e = edges[i];\n      u = graph.opposite(v, e);\n      cost = distances[dir][v] + getEdgeWeight(e, graph.getEdgeAttributes(e));\n\n      if (u in distances[dir] && cost < distances[dir][u]) {\n        throw Error(\n          'graphology-shortest-path/dijkstra: contradictory paths found. Do some of your edges have a negative weight?'\n        );\n      } else if (!(u in seen[dir]) || cost < seen[dir][u]) {\n        seen[dir][u] = cost;\n        fringe[dir].push([cost, count++, u]);\n        paths[dir][u] = paths[dir][v].concat(u);\n\n        if (u in seen[0] && u in seen[1]) {\n          d = seen[0][u] + seen[1][u];\n\n          if (finalPath.length === 0 || finalDistance > d) {\n            finalDistance = d;\n            finalPath = paths[0][u].concat(paths[1][u].slice(0, -1).reverse());\n          }\n        }\n      }\n    }\n  }\n\n  // No path was found\n  return [Infinity, null];\n}\n\n/**\n * Multisource Dijkstra shortest path abstract function. This function is the\n * basis of the algorithm that every other will use.\n *\n * Note that this implementation was basically copied from networkx.\n * TODO: it might be more performant to use a dedicated objet for the heap's\n * items.\n *\n * @param  {Graph}  graph         - The graphology instance.\n * @param  {array}  sources       - A list of sources.\n * @param  {string} getEdgeWeight - Name of the weight attribute or getter function.\n * @param  {number} cutoff        - Maximum depth of the search.\n * @param  {string} target        - Optional target to reach.\n * @param  {object} paths         - Optional paths object to maintain.\n * @return {object}               - Returns the paths.\n */\nfunction abstractDijkstraMultisource(\n  graph,\n  sources,\n  getEdgeWeight,\n  cutoff,\n  target,\n  paths\n) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: invalid graphology instance.'\n    );\n\n  if (target && !graph.hasNode(target))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: the \"' +\n        target +\n        '\" target node does not exist in the given graph.'\n    );\n\n  getEdgeWeight = createEdgeWeightGetter(\n    getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE\n  ).fromMinimalEntry;\n\n  var distances = {},\n    seen = {},\n    fringe = new Heap(DIJKSTRA_HEAP_COMPARATOR);\n\n  var count = 0,\n    edges,\n    item,\n    cost,\n    v,\n    u,\n    e,\n    d,\n    i,\n    j,\n    l,\n    m;\n\n  for (i = 0, l = sources.length; i < l; i++) {\n    v = sources[i];\n    seen[v] = 0;\n    fringe.push([0, count++, v]);\n\n    if (paths) paths[v] = [v];\n  }\n\n  while (fringe.size) {\n    item = fringe.pop();\n    d = item[0];\n    v = item[2];\n\n    if (v in distances) continue;\n\n    distances[v] = d;\n\n    if (v === target) break;\n\n    edges = graph.outboundEdges(v);\n\n    for (j = 0, m = edges.length; j < m; j++) {\n      e = edges[j];\n      u = graph.opposite(v, e);\n      cost = getEdgeWeight(e, graph.getEdgeAttributes(e)) + distances[v];\n\n      if (cutoff && cost > cutoff) continue;\n\n      if (u in distances && cost < distances[u]) {\n        throw Error(\n          'graphology-shortest-path/dijkstra: contradictory paths found. Do some of your edges have a negative weight?'\n        );\n      } else if (!(u in seen) || cost < seen[u]) {\n        seen[u] = cost;\n        fringe.push([cost, count++, u]);\n\n        if (paths) paths[u] = paths[v].concat(u);\n      }\n    }\n  }\n\n  return distances;\n}\n\n/**\n * Single source Dijkstra shortest path between given node & other nodes in\n * the graph.\n *\n * @param  {Graph}  graph         - The graphology instance.\n * @param  {string} source        - Source node.\n * @param  {string} getEdgeWeight - Name of the weight attribute or getter function.\n * @return {object}               - An object of found paths.\n */\nfunction singleSourceDijkstra(graph, source, getEdgeWeight) {\n  var paths = {};\n\n  abstractDijkstraMultisource(graph, [source], getEdgeWeight, 0, null, paths);\n\n  return paths;\n}\n\nfunction bidirectionalDijkstra(graph, source, target, getEdgeWeight) {\n  return abstractBidirectionalDijkstra(graph, source, target, getEdgeWeight)[1];\n}\n\n/**\n * Function using Ulrik Brandes' method to map single source shortest paths\n * from selected node.\n *\n * [Reference]:\n * Ulrik Brandes: A Faster Algorithm for Betweenness Centrality.\n * Journal of Mathematical Sociology 25(2):163-177, 2001.\n *\n * @param  {Graph}  graph         - Target graph.\n * @param  {any}    source        - Source node.\n * @param  {string} getEdgeWeight - Name of the weight attribute or getter function.\n * @return {array}                - [Stack, Paths, Sigma]\n */\nfunction brandes(graph, source, getEdgeWeight) {\n  source = '' + source;\n\n  getEdgeWeight = createEdgeWeightGetter(\n    getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE\n  ).fromMinimalEntry;\n\n  var S = [],\n    P = {},\n    sigma = {};\n\n  var nodes = graph.nodes(),\n    edges,\n    item,\n    pred,\n    dist,\n    cost,\n    v,\n    w,\n    e,\n    i,\n    l;\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    v = nodes[i];\n    P[v] = [];\n    sigma[v] = 0;\n  }\n\n  var D = {};\n\n  sigma[source] = 1;\n\n  var seen = {};\n  seen[source] = 0;\n\n  var count = 0;\n\n  var Q = new Heap(BRANDES_DIJKSTRA_HEAP_COMPARATOR);\n  Q.push([0, count++, source, source]);\n\n  while (Q.size) {\n    item = Q.pop();\n    dist = item[0];\n    pred = item[2];\n    v = item[3];\n\n    if (v in D) continue;\n\n    sigma[v] += sigma[pred];\n    S.push(v);\n    D[v] = dist;\n\n    edges = graph.outboundEdges(v);\n\n    for (i = 0, l = edges.length; i < l; i++) {\n      e = edges[i];\n      w = graph.opposite(v, e);\n      cost = dist + getEdgeWeight(e, graph.getEdgeAttributes(e));\n\n      if (!(w in D) && (!(w in seen) || cost < seen[w])) {\n        seen[w] = cost;\n        Q.push([cost, count++, v, w]);\n        sigma[w] = 0;\n        P[w] = [v];\n      } else if (cost === seen[w]) {\n        sigma[w] += sigma[v];\n        P[w].push(v);\n      }\n    }\n  }\n\n  return [S, P, sigma];\n}\n\n/**\n * Exporting.\n */\nexports.bidirectional = bidirectionalDijkstra;\nexports.singleSource = singleSourceDijkstra;\nexports.brandes = brandes;\n","/**\n * Graphology Shortest Path\n * =========================\n *\n * Library endpoint.\n */\nvar unweighted = require('./unweighted.js');\nvar utils = require('./utils.js');\n\nexports.unweighted = unweighted;\nexports.dijkstra = require('./dijkstra.js');\n\nexports.bidirectional = unweighted.bidirectional;\nexports.singleSource = unweighted.singleSource;\nexports.singleSourceLength = unweighted.singleSourceLength;\nexports.undirectedSingleSourceLength = unweighted.undirectedSingleSourceLength;\nexports.brandes = unweighted.brandes;\n\nexports.edgePathFromNodePath = utils.edgePathFromNodePath;\n","module.exports = require('graphology-shortest-path');\n","/**\n * Graphology Simple Path\n * =======================\n *\n * Functions related to simple paths to be used with graphology.\n */\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * A StackSet helper class.\n */\nfunction StackSet() {\n  this.set = new Set();\n  this.stack = [];\n  this.size = 0;\n}\n\nStackSet.prototype.has = function (value) {\n  return this.set.has(value);\n};\n\n// NOTE: we don't check earlier existence because we don't need to\nStackSet.prototype.push = function (value) {\n  this.stack.push(value);\n  this.set.add(value);\n  this.size++;\n};\n\nStackSet.prototype.pop = function () {\n  this.set.delete(this.stack.pop());\n  this.size--;\n};\n\nStackSet.prototype.path = function (value) {\n  return this.stack.concat(value);\n};\n\nStackSet.of = function (value) {\n  var set = new StackSet();\n  set.push(value);\n\n  return set;\n};\n\n/**\n * A RecordStackSet helper class.\n */\nfunction RecordStackSet() {\n  this.set = new Set();\n  this.stack = [];\n  this.size = 0;\n}\n\nRecordStackSet.prototype.has = function (value) {\n  return this.set.has(value);\n};\n\n// NOTE: we don't check earlier existence because we don't need to\nRecordStackSet.prototype.push = function (record) {\n  this.stack.push(record);\n  this.set.add(record[1]);\n  this.size++;\n};\n\nRecordStackSet.prototype.pop = function () {\n  this.set.delete(this.stack.pop()[1]);\n  this.size--;\n};\n\nRecordStackSet.prototype.path = function (record) {\n  return this.stack\n    .slice(1)\n    .map(function (r) {\n      return r[0];\n    })\n    .concat([record[0]]);\n};\n\nRecordStackSet.of = function (value) {\n  var set = new RecordStackSet();\n  set.push([null, value]);\n\n  return set;\n};\n\n/**\n * Function returning all the paths between source & target in the graph.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {string} source - Source node.\n * @param  {string} target - Target node.\n * @return {array}         - The found paths.\n */\nfunction allSimplePaths(graph, source, target) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-simple-path.allSimplePaths: expecting a graphology instance.'\n    );\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-simple-path.allSimplePaths: expecting: could not find source node \"' +\n        source +\n        '\" in the graph.'\n    );\n\n  if (!graph.hasNode(target))\n    throw new Error(\n      'graphology-simple-path.allSimplePaths: expecting: could not find target node \"' +\n        target +\n        '\" in the graph.'\n    );\n\n  source = '' + source;\n  target = '' + target;\n\n  var cycle = source === target;\n\n  var stack = [graph.outboundNeighbors(source)];\n  var visited = StackSet.of(cycle ? '§SOURCE§' : source);\n\n  var paths = [],\n    p;\n\n  var children, child;\n\n  while (stack.length !== 0) {\n    children = stack[stack.length - 1];\n    child = children.pop();\n\n    if (!child) {\n      stack.pop();\n      visited.pop();\n    } else {\n      if (visited.has(child)) continue;\n\n      if (child === target) {\n        p = visited.path(child);\n\n        if (cycle) p[0] = source;\n\n        paths.push(p);\n      }\n\n      visited.push(child);\n\n      if (!visited.has(target)) stack.push(graph.outboundNeighbors(child));\n      else visited.pop();\n    }\n  }\n\n  return paths;\n}\n\n/**\n * Helpers used to collect edges with their targets.\n */\nfunction collectEdges(graph, source) {\n  var records = [];\n\n  graph.forEachOutboundEdge(source, function (edge, attr, ext1, ext2) {\n    records.push([edge, source === ext1 ? ext2 : ext1]);\n  });\n\n  return records;\n}\n\nfunction collectMultiEdges(graph, source) {\n  var index = {};\n\n  var target;\n\n  graph.forEachOutboundEdge(source, function (edge, attr, ext1, ext2) {\n    target = source === ext1 ? ext2 : ext1;\n\n    if (!(target in index)) index[target] = [];\n\n    index[target].push(edge);\n  });\n\n  var records = [];\n\n  for (target in index) records.push([index[target], target]);\n\n  return records;\n}\n\n/**\n * Function returning all the edge paths between source & target in the graph.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {string} source - Source node.\n * @param  {string} target - Target node.\n * @return {array}         - The found paths.\n */\nfunction allSimpleEdgePaths(graph, source, target) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-simple-path.allSimpleEdgePaths: expecting a graphology instance.'\n    );\n\n  if (graph.multi)\n    throw new Error(\n      'graphology-simple-path.allSimpleEdgePaths: not implemented for multi graphs.'\n    );\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-simple-path.allSimpleEdgePaths: expecting: could not find source node \"' +\n        source +\n        '\" in the graph.'\n    );\n\n  if (!graph.hasNode(target))\n    throw new Error(\n      'graphology-simple-path.allSimpleEdgePaths: expecting: could not find target node \"' +\n        target +\n        '\" in the graph.'\n    );\n\n  source = '' + source;\n  target = '' + target;\n\n  var cycle = source === target;\n\n  var stack = [collectEdges(graph, source)];\n  var visited = RecordStackSet.of(cycle ? '§SOURCE§' : source);\n\n  var paths = [],\n    p;\n\n  var record, children, child;\n\n  while (stack.length !== 0) {\n    children = stack[stack.length - 1];\n    record = children.pop();\n\n    if (!record) {\n      stack.pop();\n      visited.pop();\n    } else {\n      child = record[1];\n\n      if (visited.has(child)) continue;\n\n      if (child === target) {\n        p = visited.path(record);\n        paths.push(p);\n      }\n\n      visited.push(record);\n\n      if (!visited.has(target)) stack.push(collectEdges(graph, child));\n      else visited.pop();\n    }\n  }\n\n  return paths;\n}\n\n/**\n * Function returning all the compressed edge paths between source & target\n * in the graph.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {string} source - Source node.\n * @param  {string} target - Target node.\n * @return {array}         - The found paths.\n */\nfunction allSimpleEdgeGroupPaths(graph, source, target) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-simple-path.allSimpleEdgeGroupPaths: expecting a graphology instance.'\n    );\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-simple-path.allSimpleEdgeGroupPaths: expecting: could not find source node \"' +\n        source +\n        '\" in the graph.'\n    );\n\n  if (!graph.hasNode(target))\n    throw new Error(\n      'graphology-simple-path.allSimpleEdgeGroupPaths: expecting: could not find target node \"' +\n        target +\n        '\" in the graph.'\n    );\n\n  source = '' + source;\n  target = '' + target;\n\n  var cycle = source === target;\n\n  var stack = [collectMultiEdges(graph, source)];\n  var visited = RecordStackSet.of(cycle ? '§SOURCE§' : source);\n\n  var paths = [],\n    p;\n\n  var record, children, child;\n\n  while (stack.length !== 0) {\n    children = stack[stack.length - 1];\n    record = children.pop();\n\n    if (!record) {\n      stack.pop();\n      visited.pop();\n    } else {\n      child = record[1];\n\n      if (visited.has(child)) continue;\n\n      if (child === target) {\n        p = visited.path(record);\n        paths.push(p);\n      }\n\n      visited.push(record);\n\n      if (!visited.has(target)) stack.push(collectMultiEdges(graph, child));\n      else visited.pop();\n    }\n  }\n\n  return paths;\n}\n\nexports.allSimplePaths = allSimplePaths;\nexports.allSimpleEdgePaths = allSimpleEdgePaths;\nexports.allSimpleEdgeGroupPaths = allSimpleEdgeGroupPaths;\n","/**\n * Graphology isGraph\n * ===================\n *\n * Very simple function aiming at ensuring the given variable is a\n * graphology instance.\n */\n\n/**\n * Checking the value is a graphology instance.\n *\n * @param  {any}     value - Target value.\n * @return {boolean}\n */\nmodule.exports = function isGraph(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\n    typeof value.dropNode === 'function' &&\n    typeof value.multi === 'boolean'\n  );\n};\n","module.exports = require('graphology-simple-path');\n","/**\n * Graphology BFS Queue\n * =====================\n *\n * An experiment to speed up BFS in graphs and connected component detection.\n *\n * It should mostly save memory and not improve theoretical runtime.\n */\nvar FixedDeque = require('mnemonist/fixed-deque');\n\nfunction BFSQueue(order) {\n  this.queue = new FixedDeque(Array, order);\n  this.seen = new Set();\n  this.size = 0;\n}\n\nBFSQueue.prototype.has = function (node) {\n  return this.seen.has(node);\n};\n\nBFSQueue.prototype.push = function (node) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.queue.push(node);\n  this.size++;\n\n  return true;\n};\n\nBFSQueue.prototype.pushWith = function (node, item) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.queue.push(item);\n  this.size++;\n\n  return true;\n};\n\nBFSQueue.prototype.shift = function () {\n  var item = this.queue.shift();\n  this.size = this.queue.size;\n\n  return item;\n};\n\nmodule.exports = BFSQueue;\n","/**\n * Graphology Traversal Utils\n * ===========================\n *\n * Miscellaneous utils used throughout the library.\n */\n\nfunction TraversalRecord(node, attr, depth) {\n  this.node = node;\n  this.attributes = attr;\n  this.depth = depth;\n}\n\nfunction capitalize(string) {\n  return string[0].toUpperCase() + string.slice(1);\n}\n\nexports.TraversalRecord = TraversalRecord;\nexports.capitalize = capitalize;\n","/**\n * Graphology Traversal BFS\n * =========================\n *\n * Breadth-First Search traversal function.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar BFSQueue = require('graphology-indices/bfs-queue');\nvar utils = require('./utils');\n\nvar TraversalRecord = utils.TraversalRecord;\nvar capitalize = utils.capitalize;\n\n/**\n * BFS traversal in the given graph using a callback function\n *\n * @param {Graph}    graph        - Target graph.\n * @param {string}   startingNode - Optional Starting node.\n * @param {function} callback     - Iteration callback.\n * @param {object}   options      - Options:\n * @param {string}     mode         - Traversal mode.\n */\nfunction abstractBfs(graph, startingNode, callback, options) {\n  options = options || {};\n\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-traversal/bfs: expecting a graphology instance.'\n    );\n\n  if (typeof callback !== 'function')\n    throw new Error(\n      'graphology-traversal/bfs: given callback is not a function.'\n    );\n\n  // Early termination\n  if (graph.order === 0) return;\n\n  var forEachNeighbor =\n    graph['forEach' + capitalize(options.mode || 'outbound') + 'Neighbor'].bind(\n      graph\n    );\n\n  var forEachNode;\n\n  if (startingNode === null) {\n    forEachNode = graph.forEachNode.bind(graph);\n  } else {\n    forEachNode = function (fn) {\n      startingNode = '' + startingNode;\n      fn(startingNode, graph.getNodeAttributes(startingNode));\n    };\n  }\n\n  var queue = new BFSQueue(graph.order);\n  var record, stop;\n\n  function visit(neighbor, attr) {\n    queue.pushWith(\n      neighbor,\n      new TraversalRecord(neighbor, attr, record.depth + 1)\n    );\n  }\n\n  forEachNode(function (node, attr) {\n    if (queue.has(node)) return;\n\n    queue.pushWith(node, new TraversalRecord(node, attr, 0));\n\n    while (queue.size !== 0) {\n      record = queue.shift();\n\n      stop = callback(record.node, record.attributes, record.depth);\n\n      if (stop === true) continue;\n\n      forEachNeighbor(record.node, visit);\n    }\n  });\n}\n\nexports.bfs = function (graph, callback, options) {\n  return abstractBfs(graph, null, callback, options);\n};\nexports.bfsFromNode = abstractBfs;\n","/**\n * Graphology Traversal DFS\n * =========================\n *\n * Depth-First Search traversal function.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar DFSStack = require('graphology-indices/dfs-stack');\nvar utils = require('./utils');\n\nvar TraversalRecord = utils.TraversalRecord;\nvar capitalize = utils.capitalize;\n\n/**\n * DFS traversal in the given graph using a callback function\n *\n * @param {Graph}    graph        - Target graph.\n * @param {string}   startingNode - Optional Starting node.\n * @param {function} callback     - Iteration callback.\n * @param {object}   options      - Options:\n * @param {string}     mode         - Traversal mode.\n */\nfunction abstractDfs(graph, startingNode, callback, options) {\n  options = options || {};\n\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-traversal/dfs: expecting a graphology instance.'\n    );\n\n  if (typeof callback !== 'function')\n    throw new Error(\n      'graphology-traversal/dfs: given callback is not a function.'\n    );\n\n  // Early termination\n  if (graph.order === 0) return;\n\n  var forEachNeighbor =\n    graph['forEach' + capitalize(options.mode || 'outbound') + 'Neighbor'].bind(\n      graph\n    );\n\n  var forEachNode;\n\n  if (startingNode === null) {\n    forEachNode = graph.forEachNode.bind(graph);\n  } else {\n    forEachNode = function (fn) {\n      startingNode = '' + startingNode;\n      fn(startingNode, graph.getNodeAttributes(startingNode));\n    };\n  }\n\n  var stack = new DFSStack(graph.order);\n  var record, stop;\n\n  function visit(neighbor, attr) {\n    stack.pushWith(\n      neighbor,\n      new TraversalRecord(neighbor, attr, record.depth + 1)\n    );\n  }\n\n  forEachNode(function (node, attr) {\n    if (stack.has(node)) return;\n\n    stack.pushWith(node, new TraversalRecord(node, attr, 0));\n\n    while (stack.size !== 0) {\n      record = stack.pop();\n\n      stop = callback(record.node, record.attributes, record.depth);\n\n      if (stop === true) continue;\n\n      forEachNeighbor(record.node, visit);\n    }\n  });\n}\n\nexports.dfs = function (graph, callback, options) {\n  return abstractDfs(graph, null, callback, options);\n};\nexports.dfsFromNode = abstractDfs;\n","var bfsModule = require('./bfs.js');\nvar dfsModule = require('./dfs.js');\n\nexports.bfs = bfsModule.bfs;\nexports.bfsFromNode = bfsModule.bfsFromNode;\nexports.dfs = dfsModule.dfs;\nexports.dfsFromNode = dfsModule.dfsFromNode;\n","module.exports = require('graphology-traversal');\n","/**\n * Graphology inferMulti\n * ======================\n *\n * Useful function used to \"guess\" if the given graph is truly multi.\n */\nvar isGraph = require('./is-graph.js');\n\n/**\n * Returning whether the given graph is inferred as multi.\n *\n * @param  {Graph}   graph - Target graph.\n * @return {boolean}\n */\nmodule.exports = function inferMulti(graph) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-utils/infer-multi: expecting a valid graphology instance.'\n    );\n\n  if (!graph.multi || graph.order === 0 || graph.size < 2) return false;\n\n  var multi = false;\n\n  // TODO: improve this with suitable methods\n  var previousSource, previousTarget, wasUndirected, tmp;\n\n  graph.forEachAssymetricAdjacencyEntry(function (s, t, sa, ta, e, ea, u) {\n    if (multi) return; // TODO: we need #.someAdjacencyEntry\n\n    if (u && s > t) {\n      tmp = t;\n      t = s;\n      s = tmp;\n    }\n\n    if (s === previousSource && t === previousTarget && u === wasUndirected) {\n      multi = true;\n      return;\n    }\n\n    previousSource = s;\n    previousTarget = t;\n    wasUndirected = u;\n  });\n\n  return multi;\n};\n","/**\n * Graphology Rename Graph Keys\n * =============================\n *\n * Helpers allowing you to rename (ie. change the key) of nodes & edges .\n */\nvar copyEdge = require('./add-edge.js').copyEdge;\n\nmodule.exports = function renameGraphKeys(\n  graph,\n  nodeKeyMapping,\n  edgeKeyMapping\n) {\n  if (typeof nodeKeyMapping === 'undefined') nodeKeyMapping = {};\n  if (typeof edgeKeyMapping === 'undefined') edgeKeyMapping = {};\n\n  var renamed = graph.nullCopy();\n\n  // Renaming nodes\n  graph.forEachNode(function (key, attr) {\n    var renamedKey = nodeKeyMapping[key];\n\n    if (typeof renamedKey === 'undefined') renamedKey = key;\n\n    renamed.addNode(renamedKey, attr);\n  });\n\n  // Renaming edges\n  var currentSource, currentSourceRenamed;\n\n  graph.forEachAssymetricAdjacencyEntry(function (\n    source,\n    target,\n    _sa,\n    _ta,\n    key,\n    attr,\n    undirected\n  ) {\n    // Leveraging the ordered adjacency to save lookups\n    if (source !== currentSource) {\n      currentSource = source;\n      currentSourceRenamed = nodeKeyMapping[source];\n\n      if (typeof currentSourceRenamed === 'undefined')\n        currentSourceRenamed = source;\n    }\n\n    var targetRenamed = nodeKeyMapping[target];\n\n    if (typeof targetRenamed === 'undefined') targetRenamed = target;\n\n    var renamedKey = edgeKeyMapping[key];\n\n    if (typeof renamedKey === 'undefined') renamedKey = key;\n\n    copyEdge(\n      renamed,\n      undirected,\n      renamedKey,\n      currentSourceRenamed,\n      targetRenamed,\n      attr\n    );\n  });\n\n  return renamed;\n};\n","/**\n * Graphology Update Graph Keys\n * =============================\n *\n * Helpers allowing you to update keys of nodes & edges .\n */\nvar copyEdge = require('./add-edge.js').copyEdge;\n\nmodule.exports = function updateGraphKeys(\n  graph,\n  nodeKeyUpdater,\n  edgeKeyUpdater\n) {\n  var renamed = graph.nullCopy();\n\n  // Renaming nodes\n  graph.forEachNode(function (key, attr) {\n    var renamedKey = nodeKeyUpdater ? nodeKeyUpdater(key, attr) : key;\n    renamed.addNode(renamedKey, attr);\n  });\n\n  // Renaming edges\n  var currentSource, currentSourceRenamed;\n\n  graph.forEachAssymetricAdjacencyEntry(function (\n    source,\n    target,\n    sourceAttr,\n    targetAttr,\n    key,\n    attr,\n    undirected\n  ) {\n    // Leveraging the ordered adjacency to save calls\n    if (source !== currentSource) {\n      currentSource = source;\n      currentSourceRenamed = nodeKeyUpdater\n        ? nodeKeyUpdater(source, sourceAttr)\n        : source;\n    }\n\n    var targetRenamed = nodeKeyUpdater\n      ? nodeKeyUpdater(target, targetAttr)\n      : target;\n\n    var renamedKey = edgeKeyUpdater\n      ? edgeKeyUpdater(\n          key,\n          attr,\n          source,\n          target,\n          sourceAttr,\n          targetAttr,\n          undirected\n        )\n      : key;\n\n    copyEdge(\n      renamed,\n      undirected,\n      renamedKey,\n      currentSourceRenamed,\n      targetRenamed,\n      attr\n    );\n  });\n\n  return renamed;\n};\n","/**\n * Graphology Utils\n * =================\n *\n * Library endpoint.\n */\nexports.inferMulti = require('./infer-multi.js');\nexports.inferType = require('./infer-type.js');\nexports.isGraph = require('./is-graph.js');\nexports.isGraphConstructor = require('./is-graph-constructor.js');\nexports.mergeClique = require('./merge-clique.js');\nexports.mergeCycle = require('./merge-cycle.js');\nexports.mergePath = require('./merge-path.js');\nexports.mergeStar = require('./merge-star.js');\nexports.renameGraphKeys = require('./rename-graph-keys.js');\nexports.updateGraphKeys = require('./update-graph-keys.js');\n","/**\n * Graphology mergeClique\n * =======================\n *\n * Function merging the given clique to the graph.\n */\n\n/**\n * Merging the given clique to the graph.\n *\n * @param  {Graph} graph - Target graph.\n * @param  {array} nodes - Nodes representing the clique to merge.\n */\nmodule.exports = function mergeClique(graph, nodes) {\n  if (nodes.length === 0) return;\n\n  var source, target, i, j, l;\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    source = nodes[i];\n\n    for (j = i + 1; j < l; j++) {\n      target = nodes[j];\n\n      graph.mergeEdge(source, target);\n    }\n  }\n};\n","/**\n * Graphology mergeCycle\n * =====================\n *\n * Function merging the given cycle to the graph.\n */\n\n/**\n * Merging the given cycle to the graph.\n *\n * @param  {Graph} graph - Target graph.\n * @param  {array} nodes - Nodes representing the cycle to merge.\n */\nmodule.exports = function mergeCycle(graph, nodes) {\n  if (nodes.length === 0) return;\n\n  var previousNode, node, i, l;\n\n  graph.mergeNode(nodes[0]);\n\n  if (nodes.length === 1) return;\n\n  for (i = 1, l = nodes.length; i < l; i++) {\n    previousNode = nodes[i - 1];\n    node = nodes[i];\n\n    graph.mergeEdge(previousNode, node);\n  }\n\n  graph.mergeEdge(node, nodes[0]);\n};\n","/**\n * Graphology mergePath\n * =====================\n *\n * Function merging the given path to the graph.\n */\n\n/**\n * Merging the given path to the graph.\n *\n * @param  {Graph} graph - Target graph.\n * @param  {array} nodes - Nodes representing the path to merge.\n */\nmodule.exports = function mergePath(graph, nodes) {\n  if (nodes.length === 0) return;\n\n  var previousNode, node, i, l;\n\n  graph.mergeNode(nodes[0]);\n\n  for (i = 1, l = nodes.length; i < l; i++) {\n    previousNode = nodes[i - 1];\n    node = nodes[i];\n\n    graph.mergeEdge(previousNode, node);\n  }\n};\n","module.exports = require('graphology-utils');\n","/**\n * Graphology Force Layout Iteration\n * ==================================\n *\n * Function describing a single iteration of the force layout.\n */\nconst {\n  createNodeValueGetter,\n  createEdgeValueGetter\n} = require('graphology-utils/getters');\n\n// const EPSILON = -Infinity;\n\n// function isVeryCloseToZero(x) {\n//   return Math.abs(x) < EPSILON;\n// }\n\nmodule.exports = function iterate(graph, nodeStates, params) {\n  const {nodeXAttribute: xKey, nodeYAttribute: yKey} = params;\n  const {attraction, repulsion, gravity, inertia, maxMove} = params.settings;\n\n  let {shouldSkipNode, shouldSkipEdge, isNodeFixed} = params;\n\n  isNodeFixed = createNodeValueGetter(isNodeFixed);\n  shouldSkipNode = createNodeValueGetter(shouldSkipNode, false);\n  shouldSkipEdge = createEdgeValueGetter(shouldSkipEdge, false);\n\n  const nodes = graph.filterNodes((n, attr) => {\n    return !shouldSkipNode.fromEntry(n, attr);\n  });\n\n  const adjustedOrder = nodes.length;\n\n  // Check nodeStatess and inertia\n  for (let i = 0; i < adjustedOrder; i++) {\n    const n = nodes[i];\n    const attr = graph.getNodeAttributes(n);\n    const nodeState = nodeStates[n];\n\n    if (!nodeState)\n      nodeStates[n] = {\n        dx: 0,\n        dy: 0,\n        x: attr[xKey] || 0,\n        y: attr[yKey] || 0\n      };\n    else\n      nodeStates[n] = {\n        dx: nodeState.dx * inertia,\n        dy: nodeState.dy * inertia,\n        x: attr[xKey] || 0,\n        y: attr[yKey] || 0\n      };\n  }\n\n  // Repulsion\n  if (repulsion)\n    for (let i = 0; i < adjustedOrder; i++) {\n      const n1 = nodes[i];\n      const n1State = nodeStates[n1];\n\n      for (let j = i + 1; j < adjustedOrder; j++) {\n        const n2 = nodes[j];\n        const n2State = nodeStates[n2];\n\n        // Compute distance:\n        const dx = n2State.x - n1State.x;\n        const dy = n2State.y - n1State.y;\n        const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n\n        // Repulse nodes relatively to 1 / distance:\n        const repulsionX = (repulsion / distance) * dx;\n        const repulsionY = (repulsion / distance) * dy;\n        n1State.dx -= repulsionX;\n        n1State.dy -= repulsionY;\n        n2State.dx += repulsionX;\n        n2State.dy += repulsionY;\n      }\n    }\n\n  // Attraction\n  if (attraction)\n    graph.forEachEdge(\n      (edge, attr, source, target, sourceAttr, targetAttr, undirected) => {\n        if (source === target) return;\n\n        if (\n          shouldSkipNode.fromEntry(source, sourceAttr) ||\n          shouldSkipNode.fromEntry(target, targetAttr)\n        )\n          return;\n\n        if (\n          shouldSkipEdge.fromEntry(\n            edge,\n            attr,\n            source,\n            target,\n            sourceAttr,\n            targetAttr,\n            undirected\n          )\n        )\n          return;\n\n        const n1State = nodeStates[source];\n        const n2State = nodeStates[target];\n\n        // Compute distance:\n        const dx = n2State.x - n1State.x;\n        const dy = n2State.y - n1State.y;\n\n        const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n\n        // Attract nodes relatively to their distance:\n        const attractionX = attraction * distance * dx;\n        const attractionY = attraction * distance * dy;\n        n1State.dx += attractionX;\n        n1State.dy += attractionY;\n        n2State.dx -= attractionX;\n        n2State.dy -= attractionY;\n      }\n    );\n\n  // Gravity\n  if (gravity)\n    for (let i = 0; i < adjustedOrder; i++) {\n      const n = nodes[i];\n      const nodeState = nodeStates[n];\n\n      // Attract nodes to [0, 0] relatively to the distance:\n      const {x, y} = nodeState;\n      const distance = Math.sqrt(x * x + y * y) || 1;\n      nodeStates[n].dx -= x * gravity * distance;\n      nodeStates[n].dy -= y * gravity * distance;\n    }\n\n  // Apply forces\n  const converged = false;\n\n  for (let i = 0; i < adjustedOrder; i++) {\n    const n = nodes[i];\n    const nodeState = nodeStates[n];\n\n    const distance = Math.sqrt(\n      nodeState.dx * nodeState.dx + nodeState.dy * nodeState.dy\n    );\n\n    if (distance > maxMove) {\n      nodeState.dx *= maxMove / distance;\n      nodeState.dy *= maxMove / distance;\n    }\n\n    // if (!isVeryCloseToZero(nodeState.dx) || !isVeryCloseToZero(nodeState.dy)) {\n    //   converged = false;\n    // }\n\n    if (!isNodeFixed.fromGraph(graph, n)) {\n      nodeState.x += nodeState.dx;\n      nodeState.y += nodeState.dy;\n      nodeState.fixed = false;\n    } else {\n      nodeState.fixed = true;\n    }\n\n    // NOTE: possibility to assign here to save one loop in the future\n  }\n\n  return {converged};\n};\n","/**\n * Graphology Force Layout Helpers\n * ================================\n *\n * Miscellaneous helper functions related to the force layout.\n */\nexports.assignLayoutChanges = function (graph, nodeStates, params) {\n  const {nodeXAttribute: x, nodeYAttribute: y} = params;\n\n  graph.updateEachNodeAttributes(\n    (n, attr) => {\n      const state = nodeStates[n];\n\n      if (!state || state.fixed) return attr;\n\n      attr[x] = state.x;\n      attr[y] = state.y;\n\n      return attr;\n    },\n    {attributes: ['x', 'y']}\n  );\n};\n\nexports.collectLayoutChanges = function (nodeStates) {\n  const mapping = {};\n\n  for (const n in nodeStates) {\n    const state = nodeStates[n];\n\n    mapping[n] = {x: state.x, y: state.y};\n  }\n\n  return mapping;\n};\n","/**\n * Graphology Force Layout Worker\n * ===============================\n *\n * A worker made for running a force layout live.\n *\n * Note that it does not run in a webworker yet but respect animation frames.\n */\nconst isGraph = require('graphology-utils/is-graph');\nconst resolveDefaults = require('graphology-utils/defaults');\n\nconst iterate = require('./iterate.js');\nconst helpers = require('./helpers.js');\nconst DEFAULTS = require('./defaults.js');\n\nfunction ForceSupervisor(graph, params) {\n  // Validation\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-force/worker: the given graph is not a valid graphology instance.'\n    );\n\n  params = resolveDefaults(params, DEFAULTS);\n\n  this.callbacks = {};\n\n  if (params.onConverged) this.callbacks.onConverged = params.onConverged;\n\n  this.graph = graph;\n  this.params = params;\n  this.nodeStates = {};\n  this.frameID = null;\n  this.running = false;\n  this.killed = false;\n\n  // TODO: hook listeners on graph to listen to dropNode, dropEdge, clear, clearEdges\n}\n\nForceSupervisor.prototype.isRunning = function () {\n  return this.running;\n};\n\nForceSupervisor.prototype.runFrame = function () {\n  let {converged} = iterate(this.graph, this.nodeStates, this.params);\n\n  helpers.assignLayoutChanges(this.graph, this.nodeStates, this.params);\n\n  // TODO: figure out convergence\n  converged = false;\n\n  if (converged) {\n    if (this.callbacks.onConverged) this.callbacks.onConverged();\n    this.stop();\n  } else {\n    this.frameID = window.requestAnimationFrame(() => this.runFrame());\n  }\n};\n\nForceSupervisor.prototype.stop = function () {\n  this.running = false;\n\n  if (this.frameID !== null) {\n    window.cancelAnimationFrame(this.frameID);\n    this.frameID = null;\n  }\n\n  return this;\n};\n\nForceSupervisor.prototype.start = function () {\n  if (this.killed)\n    throw new Error('graphology-layout-force/worker.start: layout was killed.');\n\n  if (this.running) return;\n\n  this.running = true;\n  this.runFrame();\n};\n\nForceSupervisor.prototype.kill = function () {\n  this.stop();\n  delete this.nodeStates;\n  this.killed = true;\n\n  // TODO: cleanup events\n};\n\nmodule.exports = ForceSupervisor;\n","/**\n * Graphology Force Layout Defaults\n * =================================\n *\n * Default options & settings used by the library.\n */\nmodule.exports = {\n  nodeXAttribute: 'x',\n  nodeYAttribute: 'y',\n  isNodeFixed: 'fixed',\n  shouldSkipNode: null,\n  shouldSkipEdge: null,\n  settings: {\n    attraction: 0.0005,\n    repulsion: 0.1,\n    gravity: 0.0001,\n    inertia: 0.6,\n    maxMove: 200\n  }\n};\n","/**\n * Graphology ForceAtlas2 Layout Supervisor\n * =========================================\n *\n * Supervisor class able to spawn a web worker to run the FA2 layout in a\n * separate thread not to block UI with heavy synchronous computations.\n */\nvar workerFunction = require('./webworker.js'),\n  isGraph = require('graphology-utils/is-graph'),\n  helpers = require('./helpers.js');\n\nvar DEFAULT_SETTINGS = require('./defaults.js');\n\n/**\n * Class representing a FA2 layout run by a webworker.\n *\n * @constructor\n * @param  {Graph}         graph        - Target graph.\n * @param  {object|number} params       - Parameters:\n * @param  {object}          [settings] - Settings.\n */\nfunction FA2LayoutSupervisor(graph, params) {\n  params = params || {};\n\n  // Validation\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-forceatlas2/worker: the given graph is not a valid graphology instance.'\n    );\n\n  var attributes = params.attributes || {};\n  var weightAttribute = params.weighted ? attributes.weight || 'weight' : null;\n\n  // Validating settings\n  var settings = helpers.assign({}, DEFAULT_SETTINGS, params.settings);\n  var validationError = helpers.validateSettings(settings);\n\n  if (validationError)\n    throw new Error(\n      'graphology-layout-forceatlas2/worker: ' + validationError.message\n    );\n\n  // Properties\n  this.worker = null;\n  this.graph = graph;\n  this.settings = settings;\n  this.weightAttribute = weightAttribute;\n  this.matrices = null;\n  this.running = false;\n  this.killed = false;\n\n  // Binding listeners\n  this.handleMessage = this.handleMessage.bind(this);\n\n  var respawnFrame = undefined;\n  var self = this;\n\n  this.handleGraphUpdate = function () {\n    if (self.worker) self.worker.terminate();\n\n    if (respawnFrame) clearTimeout(respawnFrame);\n\n    respawnFrame = setTimeout(function () {\n      respawnFrame = undefined;\n      self.spawnWorker();\n    }, 0);\n  };\n\n  graph.on('nodeAdded', this.handleGraphUpdate);\n  graph.on('edgeAdded', this.handleGraphUpdate);\n  graph.on('nodeDropped', this.handleGraphUpdate);\n  graph.on('edgeDropped', this.handleGraphUpdate);\n\n  // Spawning worker\n  this.spawnWorker();\n}\n\nFA2LayoutSupervisor.prototype.isRunning = function () {\n  return this.running;\n};\n\n/**\n * Internal method used to spawn the web worker.\n */\nFA2LayoutSupervisor.prototype.spawnWorker = function () {\n  if (this.worker) this.worker.terminate();\n\n  this.worker = helpers.createWorker(workerFunction);\n  this.worker.addEventListener('message', this.handleMessage);\n\n  if (this.running) {\n    this.running = false;\n    this.start();\n  }\n};\n\n/**\n * Internal method used to handle the worker's messages.\n *\n * @param {object} event - Event to handle.\n */\nFA2LayoutSupervisor.prototype.handleMessage = function (event) {\n  if (!this.running) return;\n\n  var matrix = new Float32Array(event.data.nodes);\n\n  helpers.assignLayoutChanges(this.graph, matrix);\n  this.matrices.nodes = matrix;\n\n  // Looping\n  this.askForIterations();\n};\n\n/**\n * Internal method used to ask for iterations from the worker.\n *\n * @param  {boolean} withEdges - Should we send edges along?\n * @return {FA2LayoutSupervisor}\n */\nFA2LayoutSupervisor.prototype.askForIterations = function (withEdges) {\n  var matrices = this.matrices;\n\n  var payload = {\n    settings: this.settings,\n    nodes: matrices.nodes.buffer\n  };\n\n  var buffers = [matrices.nodes.buffer];\n\n  if (withEdges) {\n    payload.edges = matrices.edges.buffer;\n    buffers.push(matrices.edges.buffer);\n  }\n\n  this.worker.postMessage(payload, buffers);\n\n  return this;\n};\n\n/**\n * Method used to start the layout.\n *\n * @return {FA2LayoutSupervisor}\n */\nFA2LayoutSupervisor.prototype.start = function () {\n  if (this.killed)\n    throw new Error(\n      'graphology-layout-forceatlas2/worker.start: layout was killed.'\n    );\n\n  if (this.running) return this;\n\n  // Building matrices\n  this.matrices = helpers.graphToByteArrays(this.graph, this.weightAttribute);\n\n  this.running = true;\n  this.askForIterations(true);\n\n  return this;\n};\n\n/**\n * Method used to stop the layout.\n *\n * @return {FA2LayoutSupervisor}\n */\nFA2LayoutSupervisor.prototype.stop = function () {\n  this.running = false;\n\n  return this;\n};\n\n/**\n * Method used to kill the layout.\n *\n * @return {FA2LayoutSupervisor}\n */\nFA2LayoutSupervisor.prototype.kill = function () {\n  if (this.killed) return this;\n\n  this.running = false;\n  this.killed = true;\n\n  // Clearing memory\n  this.matrices = null;\n\n  // Terminating worker\n  this.worker.terminate();\n\n  // Unbinding listeners\n  this.graph.removeListener('nodeAdded', this.handleGraphUpdate);\n  this.graph.removeListener('edgeAdded', this.handleGraphUpdate);\n  this.graph.removeListener('nodeDropped', this.handleGraphUpdate);\n  this.graph.removeListener('edgeDropped', this.handleGraphUpdate);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FA2LayoutSupervisor;\n","/**\n * Graphology ForceAtlas2 Layout Webworker\n * ========================================\n *\n * Web worker able to run the layout in a separate thread.\n */\nmodule.exports = function worker() {\n  var NODES, EDGES;\n\n  var moduleShim = {};\n\n  (function () {\n    /* eslint no-constant-condition: 0 */\n/**\n * Graphology ForceAtlas2 Iteration\n * =================================\n *\n * Function used to perform a single iteration of the algorithm.\n */\n\n/**\n * Matrices properties accessors.\n */\nvar NODE_X = 0;\nvar NODE_Y = 1;\nvar NODE_DX = 2;\nvar NODE_DY = 3;\nvar NODE_OLD_DX = 4;\nvar NODE_OLD_DY = 5;\nvar NODE_MASS = 6;\nvar NODE_CONVERGENCE = 7;\nvar NODE_SIZE = 8;\nvar NODE_FIXED = 9;\n\nvar EDGE_SOURCE = 0;\nvar EDGE_TARGET = 1;\nvar EDGE_WEIGHT = 2;\n\nvar REGION_NODE = 0;\nvar REGION_CENTER_X = 1;\nvar REGION_CENTER_Y = 2;\nvar REGION_SIZE = 3;\nvar REGION_NEXT_SIBLING = 4;\nvar REGION_FIRST_CHILD = 5;\nvar REGION_MASS = 6;\nvar REGION_MASS_CENTER_X = 7;\nvar REGION_MASS_CENTER_Y = 8;\n\nvar SUBDIVISION_ATTEMPTS = 3;\n\n/**\n * Constants.\n */\nvar PPN = 10;\nvar PPE = 3;\nvar PPR = 9;\n\nvar MAX_FORCE = 10;\n\n/**\n * Function used to perform a single interation of the algorithm.\n *\n * @param  {object}       options    - Layout options.\n * @param  {Float32Array} NodeMatrix - Node data.\n * @param  {Float32Array} EdgeMatrix - Edge data.\n * @return {object}                  - Some metadata.\n */\nmoduleShim.exports = function iterate(options, NodeMatrix, EdgeMatrix) {\n  // Initializing variables\n  var l, r, n, n1, n2, rn, e, w, g, s;\n\n  var order = NodeMatrix.length,\n    size = EdgeMatrix.length;\n\n  var adjustSizes = options.adjustSizes;\n\n  var thetaSquared = options.barnesHutTheta * options.barnesHutTheta;\n\n  var outboundAttCompensation, coefficient, xDist, yDist, ewc, distance, factor;\n\n  var RegionMatrix = [];\n\n  // 1) Initializing layout data\n  //-----------------------------\n\n  // Resetting positions & computing max values\n  for (n = 0; n < order; n += PPN) {\n    NodeMatrix[n + NODE_OLD_DX] = NodeMatrix[n + NODE_DX];\n    NodeMatrix[n + NODE_OLD_DY] = NodeMatrix[n + NODE_DY];\n    NodeMatrix[n + NODE_DX] = 0;\n    NodeMatrix[n + NODE_DY] = 0;\n  }\n\n  // If outbound attraction distribution, compensate\n  if (options.outboundAttractionDistribution) {\n    outboundAttCompensation = 0;\n    for (n = 0; n < order; n += PPN) {\n      outboundAttCompensation += NodeMatrix[n + NODE_MASS];\n    }\n\n    outboundAttCompensation /= order / PPN;\n  }\n\n  // 1.bis) Barnes-Hut computation\n  //------------------------------\n\n  if (options.barnesHutOptimize) {\n    // Setting up\n    var minX = Infinity,\n      maxX = -Infinity,\n      minY = Infinity,\n      maxY = -Infinity,\n      q,\n      q2,\n      subdivisionAttempts;\n\n    // Computing min and max values\n    for (n = 0; n < order; n += PPN) {\n      minX = Math.min(minX, NodeMatrix[n + NODE_X]);\n      maxX = Math.max(maxX, NodeMatrix[n + NODE_X]);\n      minY = Math.min(minY, NodeMatrix[n + NODE_Y]);\n      maxY = Math.max(maxY, NodeMatrix[n + NODE_Y]);\n    }\n\n    // squarify bounds, it's a quadtree\n    var dx = maxX - minX,\n      dy = maxY - minY;\n    if (dx > dy) {\n      minY -= (dx - dy) / 2;\n      maxY = minY + dx;\n    } else {\n      minX -= (dy - dx) / 2;\n      maxX = minX + dy;\n    }\n\n    // Build the Barnes Hut root region\n    RegionMatrix[0 + REGION_NODE] = -1;\n    RegionMatrix[0 + REGION_CENTER_X] = (minX + maxX) / 2;\n    RegionMatrix[0 + REGION_CENTER_Y] = (minY + maxY) / 2;\n    RegionMatrix[0 + REGION_SIZE] = Math.max(maxX - minX, maxY - minY);\n    RegionMatrix[0 + REGION_NEXT_SIBLING] = -1;\n    RegionMatrix[0 + REGION_FIRST_CHILD] = -1;\n    RegionMatrix[0 + REGION_MASS] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_X] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_Y] = 0;\n\n    // Add each node in the tree\n    l = 1;\n    for (n = 0; n < order; n += PPN) {\n      // Current region, starting with root\n      r = 0;\n      subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n\n      while (true) {\n        // Are there sub-regions?\n\n        // We look at first child index\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // There are sub-regions\n\n          // We just iterate to find a \"leaf\" of the tree\n          // that is an empty region or a region with a single node\n          // (see next case)\n\n          // Find the quadrant of n\n          if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD];\n            } else {\n              // Bottom Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n            }\n          } else {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n            } else {\n              // Bottom Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n            }\n          }\n\n          // Update center of mass and mass (we only do it for non-leave regions)\n          RegionMatrix[r + REGION_MASS_CENTER_X] =\n            (RegionMatrix[r + REGION_MASS_CENTER_X] *\n              RegionMatrix[r + REGION_MASS] +\n              NodeMatrix[n + NODE_X] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS_CENTER_Y] =\n            (RegionMatrix[r + REGION_MASS_CENTER_Y] *\n              RegionMatrix[r + REGION_MASS] +\n              NodeMatrix[n + NODE_Y] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS] += NodeMatrix[n + NODE_MASS];\n\n          // Iterate on the right quadrant\n          r = q;\n          continue;\n        } else {\n          // There are no sub-regions: we are in a \"leaf\"\n\n          // Is there a node in this leave?\n          if (RegionMatrix[r + REGION_NODE] < 0) {\n            // There is no node in region:\n            // we record node n and go on\n            RegionMatrix[r + REGION_NODE] = n;\n            break;\n          } else {\n            // There is a node in this region\n\n            // We will need to create sub-regions, stick the two\n            // nodes (the old one r[0] and the new one n) in two\n            // subregions. If they fall in the same quadrant,\n            // we will iterate.\n\n            // Create sub-regions\n            RegionMatrix[r + REGION_FIRST_CHILD] = l * PPR;\n            w = RegionMatrix[r + REGION_SIZE] / 2; // new size (half)\n\n            // NOTE: we use screen coordinates\n            // from Top Left to Bottom Right\n\n            // Top Left sub-region\n            g = RegionMatrix[r + REGION_FIRST_CHILD];\n\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Left sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Top Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] =\n              RegionMatrix[r + REGION_NEXT_SIBLING];\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            l += 4;\n\n            // Now the goal is to find two different sub-regions\n            // for the two nodes: the one previously recorded (r[0])\n            // and the one we want to add (n)\n\n            // Find the quadrant of the old node\n            if (\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X] <\n              RegionMatrix[r + REGION_CENTER_X]\n            ) {\n              if (\n                NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] <\n                RegionMatrix[r + REGION_CENTER_Y]\n              ) {\n                // Top Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else {\n              if (\n                NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] <\n                RegionMatrix[r + REGION_CENTER_Y]\n              ) {\n                // Top Right quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n              } else {\n                // Bottom Right quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n              }\n            }\n\n            // We remove r[0] from the region r, add its mass to r and record it in q\n            RegionMatrix[r + REGION_MASS] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_MASS];\n            RegionMatrix[r + REGION_MASS_CENTER_X] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X];\n            RegionMatrix[r + REGION_MASS_CENTER_Y] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y];\n\n            RegionMatrix[q + REGION_NODE] = RegionMatrix[r + REGION_NODE];\n            RegionMatrix[r + REGION_NODE] = -1;\n\n            // Find the quadrant of n\n            if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Right quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n              } else {\n                // Bottom Right quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n              }\n            }\n\n            if (q === q2) {\n              // If both nodes are in the same quadrant,\n              // we have to try it again on this quadrant\n              if (subdivisionAttempts--) {\n                r = q;\n                continue; // while\n              } else {\n                // we are out of precision here, and we cannot subdivide anymore\n                // but we have to break the loop anyway\n                subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n                break; // while\n              }\n            }\n\n            // If both quadrants are different, we record n\n            // in its quadrant\n            RegionMatrix[q2 + REGION_NODE] = n;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  // 2) Repulsion\n  //--------------\n  // NOTES: adjustSizes = antiCollision & scalingRatio = coefficient\n\n  if (options.barnesHutOptimize) {\n    coefficient = options.scalingRatio;\n\n    // Applying repulsion through regions\n    for (n = 0; n < order; n += PPN) {\n      // Computing leaf quad nodes iteration\n\n      r = 0; // Starting with root region\n      while (true) {\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // The region has sub-regions\n\n          // We run the Barnes Hut test to see if we are at the right distance\n          distance =\n            Math.pow(\n              NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X],\n              2\n            ) +\n            Math.pow(\n              NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y],\n              2\n            );\n\n          s = RegionMatrix[r + REGION_SIZE];\n\n          if ((4 * s * s) / distance < thetaSquared) {\n            // We treat the region as a single body, and we repulse\n\n            xDist =\n              NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X];\n            yDist =\n              NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y];\n\n            if (adjustSizes === true) {\n              //-- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS] *\n                    NodeMatrix[n + NODE_SIZE]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor =\n                  (-coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              //-- Linear Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n\n            // When this is done, we iterate. We have to look at the next sibling.\n            r = RegionMatrix[r + REGION_NEXT_SIBLING];\n            if (r < 0) break; // No next sibling: we have finished the tree\n\n            continue;\n          } else {\n            // The region is too close and we have to look at sub-regions\n            r = RegionMatrix[r + REGION_FIRST_CHILD];\n            continue;\n          }\n        } else {\n          // The region has no sub-region\n          // If there is a node r[0] and it is not n, then repulse\n          rn = RegionMatrix[r + REGION_NODE];\n\n          if (rn >= 0 && rn !== n) {\n            xDist = NodeMatrix[n + NODE_X] - NodeMatrix[rn + NODE_X];\n            yDist = NodeMatrix[n + NODE_Y] - NodeMatrix[rn + NODE_Y];\n\n            distance = xDist * xDist + yDist * yDist;\n\n            if (adjustSizes === true) {\n              //-- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS] *\n                    NodeMatrix[n + NODE_SIZE]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor =\n                  (-coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              //-- Linear Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n          }\n\n          // When this is done, we iterate. We have to look at the next sibling.\n          r = RegionMatrix[r + REGION_NEXT_SIBLING];\n\n          if (r < 0) break; // No next sibling: we have finished the tree\n\n          continue;\n        }\n      }\n    }\n  } else {\n    coefficient = options.scalingRatio;\n\n    // Square iteration\n    for (n1 = 0; n1 < order; n1 += PPN) {\n      for (n2 = 0; n2 < n1; n2 += PPN) {\n        // Common to both methods\n        xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n        yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n        if (adjustSizes === true) {\n          //-- Anticollision Linear Repulsion\n          distance =\n            Math.sqrt(xDist * xDist + yDist * yDist) -\n            NodeMatrix[n1 + NODE_SIZE] -\n            NodeMatrix[n2 + NODE_SIZE];\n\n          if (distance > 0) {\n            factor =\n              (coefficient *\n                NodeMatrix[n1 + NODE_MASS] *\n                NodeMatrix[n2 + NODE_MASS]) /\n              distance /\n              distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] += xDist * factor;\n            NodeMatrix[n2 + NODE_DY] += yDist * factor;\n          } else if (distance < 0) {\n            factor =\n              100 *\n              coefficient *\n              NodeMatrix[n1 + NODE_MASS] *\n              NodeMatrix[n2 + NODE_MASS];\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        } else {\n          //-- Linear Repulsion\n          distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n          if (distance > 0) {\n            factor =\n              (coefficient *\n                NodeMatrix[n1 + NODE_MASS] *\n                NodeMatrix[n2 + NODE_MASS]) /\n              distance /\n              distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        }\n      }\n    }\n  }\n\n  // 3) Gravity\n  //------------\n  g = options.gravity / options.scalingRatio;\n  coefficient = options.scalingRatio;\n  for (n = 0; n < order; n += PPN) {\n    factor = 0;\n\n    // Common to both methods\n    xDist = NodeMatrix[n + NODE_X];\n    yDist = NodeMatrix[n + NODE_Y];\n    distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\n    if (options.strongGravityMode) {\n      //-- Strong gravity\n      if (distance > 0) factor = coefficient * NodeMatrix[n + NODE_MASS] * g;\n    } else {\n      //-- Linear Anti-collision Repulsion n\n      if (distance > 0)\n        factor = (coefficient * NodeMatrix[n + NODE_MASS] * g * NodeMatrix[n + NODE_SIZE]) / distance;\n    }\n\n    // Updating node's dx and dy\n    NodeMatrix[n + NODE_DX] -= xDist * factor;\n    NodeMatrix[n + NODE_DY] -= yDist * factor;\n  }\n\n  // 4) Attraction\n  //---------------\n  coefficient =\n    1 * (options.outboundAttractionDistribution ? outboundAttCompensation : 1);\n\n  // TODO: simplify distance\n  // TODO: coefficient is always used as -c --> optimize?\n  for (e = 0; e < size; e += PPE) {\n    n1 = EdgeMatrix[e + EDGE_SOURCE];\n    n2 = EdgeMatrix[e + EDGE_TARGET];\n    w = EdgeMatrix[e + EDGE_WEIGHT];\n\n    // Edge weight influence\n    ewc = Math.pow(w, options.edgeWeightInfluence);\n\n    // Common measures\n    xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n    yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n    // Applying attraction to nodes\n    if (adjustSizes === true) {\n      distance = Math.sqrt(\n        Math.pow(xDist, 2) +\n          Math.pow(yDist, 2) -\n          NodeMatrix[n1 + NODE_SIZE] -\n          NodeMatrix[n2 + NODE_SIZE]\n      );\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          //-- LinLog Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor =\n              (-coefficient * ewc * Math.log(1 + distance)) /\n              distance /\n              NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- LinLog Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n          }\n        }\n      } else {\n        if (options.outboundAttractionDistribution) {\n          //-- Linear Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- Linear Anti-collision Attraction\n          if (distance > 0) {\n            factor = -coefficient * ewc;\n          }\n        }\n      }\n    } else {\n      distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          //-- LinLog Degree Distributed Attraction\n          if (distance > 0) {\n            factor =\n              (-coefficient * ewc * Math.log(1 + distance)) /\n              distance /\n              NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- LinLog Attraction\n          if (distance > 0)\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n        }\n      } else {\n        if (options.outboundAttractionDistribution) {\n          //-- Linear Attraction Mass Distributed\n          // NOTE: Distance is set to 1 to override next condition\n          distance = 1;\n          factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n        } else {\n          //-- Linear Attraction\n          // NOTE: Distance is set to 1 to override next condition\n          distance = 1;\n          factor = -coefficient * ewc;\n        }\n      }\n    }\n\n    // Updating nodes' dx and dy\n    // TODO: if condition or factor = 1?\n    if (distance > 0) {\n      // Updating nodes' dx and dy\n      NodeMatrix[n1 + NODE_DX] += xDist * factor;\n      NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n      NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n      NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n    }\n  }\n\n  // 5) Apply Forces\n  //-----------------\n  var force, swinging, traction, nodespeed, newX, newY;\n\n  // MATH: sqrt and square distances\n  if (adjustSizes === true) {\n    for (n = 0; n < order; n += PPN) {\n      if (NodeMatrix[n + NODE_FIXED] !== 1) {\n        force = Math.sqrt(\n          Math.pow(NodeMatrix[n + NODE_DX], 2) +\n            Math.pow(NodeMatrix[n + NODE_DY], 2)\n        );\n\n        if (force > MAX_FORCE) {\n          NodeMatrix[n + NODE_DX] =\n            (NodeMatrix[n + NODE_DX] * MAX_FORCE) / force;\n          NodeMatrix[n + NODE_DY] =\n            (NodeMatrix[n + NODE_DY] * MAX_FORCE) / force;\n        }\n\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY])\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY])\n          ) / 2;\n\n        nodespeed = (0.1 * Math.log(1 + traction)) / (1 + Math.sqrt(swinging));\n\n        // Updating node's positon\n        newX =\n          NodeMatrix[n + NODE_X] +\n          NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY =\n          NodeMatrix[n + NODE_Y] +\n          NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  } else {\n    for (n = 0; n < order; n += PPN) {\n      if (NodeMatrix[n + NODE_FIXED] !== 1) {\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY])\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY])\n          ) / 2;\n\n        nodespeed =\n          (NodeMatrix[n + NODE_CONVERGENCE] * Math.log(1 + traction)) /\n          (1 + Math.sqrt(swinging));\n\n        // Updating node convergence\n        NodeMatrix[n + NODE_CONVERGENCE] = Math.min(\n          1,\n          Math.sqrt(\n            (nodespeed *\n              (Math.pow(NodeMatrix[n + NODE_DX], 2) +\n                Math.pow(NodeMatrix[n + NODE_DY], 2))) /\n              (1 + Math.sqrt(swinging))\n          )\n        );\n\n        // Updating node's positon\n        newX =\n          NodeMatrix[n + NODE_X] +\n          NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY =\n          NodeMatrix[n + NODE_Y] +\n          NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  }\n\n  // We return the information about the layout (no need to return the matrices)\n  return {};\n};\n\n  })();\n\n  var iterate = moduleShim.exports;\n\n  self.addEventListener('message', function (event) {\n    var data = event.data;\n\n    NODES = new Float32Array(data.nodes);\n\n    if (data.edges) EDGES = new Float32Array(data.edges);\n\n    // Running the iteration\n    iterate(data.settings, NODES, EDGES);\n\n    // Sending result to supervisor\n    self.postMessage(\n      {\n        nodes: NODES.buffer\n      },\n      [NODES.buffer]\n    );\n  });\n};\n\n","/**\n * Graphology Noverlap Layout Supervisor\n * ======================================\n *\n * Supervisor class able to spawn a web worker to run the Noverlap layout in a\n * separate thread not to block UI with heavy synchronous computations.\n */\nvar workerFunction = require('./webworker.js'),\n  isGraph = require('graphology-utils/is-graph'),\n  helpers = require('./helpers.js');\n\nvar DEFAULT_SETTINGS = require('./defaults.js');\n\n/**\n * Class representing a Noverlap layout run by a webworker.\n *\n * @constructor\n * @param  {Graph}         graph        - Target graph.\n * @param  {object|number} params       - Parameters:\n * @param  {object}          [settings] - Settings.\n */\nfunction NoverlapLayoutSupervisor(graph, params) {\n  params = params || {};\n\n  // Validation\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-noverlap/worker: the given graph is not a valid graphology instance.'\n    );\n\n  // Validating settings\n  var settings = Object.assign({}, DEFAULT_SETTINGS, params.settings),\n    validationError = helpers.validateSettings(settings);\n\n  if (validationError)\n    throw new Error(\n      'graphology-layout-noverlap/worker: ' + validationError.message\n    );\n\n  // Properties\n  this.worker = null;\n  this.graph = graph;\n  this.settings = settings;\n  this.matrices = null;\n  this.running = false;\n  this.killed = false;\n\n  this.inputReducer = params.inputReducer;\n  this.outputReducer = params.outputReducer;\n\n  this.callbacks = {\n    onConverged:\n      typeof params.onConverged === 'function' ? params.onConverged : null\n  };\n\n  // Binding listeners\n  this.handleMessage = this.handleMessage.bind(this);\n\n  var alreadyRespawning = false;\n  var self = this;\n\n  this.handleAddition = function () {\n    if (alreadyRespawning) return;\n\n    alreadyRespawning = true;\n\n    self.spawnWorker();\n    setImmediate(function () {\n      alreadyRespawning = false;\n    });\n  };\n\n  graph.on('nodeAdded', this.handleAddition);\n  graph.on('edgeAdded', this.handleAddition);\n\n  // Spawning worker\n  this.spawnWorker();\n}\n\nNoverlapLayoutSupervisor.prototype.isRunning = function () {\n  return this.running;\n};\n\n/**\n * Internal method used to spawn the web worker.\n */\nNoverlapLayoutSupervisor.prototype.spawnWorker = function () {\n  if (this.worker) this.worker.terminate();\n\n  this.worker = helpers.createWorker(workerFunction);\n  this.worker.addEventListener('message', this.handleMessage);\n\n  if (this.running) {\n    this.running = false;\n    this.start();\n  }\n};\n\n/**\n * Internal method used to handle the worker's messages.\n *\n * @param {object} event - Event to handle.\n */\nNoverlapLayoutSupervisor.prototype.handleMessage = function (event) {\n  if (!this.running) return;\n\n  var matrix = new Float32Array(event.data.nodes);\n\n  helpers.assignLayoutChanges(this.graph, matrix, this.outputReducer);\n  this.matrices.nodes = matrix;\n\n  if (event.data.result.converged) {\n    if (this.callbacks.onConverged) this.callbacks.onConverged();\n\n    this.stop();\n    return;\n  }\n\n  // Looping\n  this.askForIterations();\n};\n\n/**\n * Internal method used to ask for iterations from the worker.\n *\n * @return {NoverlapLayoutSupervisor}\n */\nNoverlapLayoutSupervisor.prototype.askForIterations = function () {\n  var matrices = this.matrices;\n\n  var payload = {\n    settings: this.settings,\n    nodes: matrices.nodes.buffer\n  };\n\n  var buffers = [matrices.nodes.buffer];\n\n  this.worker.postMessage(payload, buffers);\n\n  return this;\n};\n\n/**\n * Method used to start the layout.\n *\n * @return {NoverlapLayoutSupervisor}\n */\nNoverlapLayoutSupervisor.prototype.start = function () {\n  if (this.killed)\n    throw new Error(\n      'graphology-layout-noverlap/worker.start: layout was killed.'\n    );\n\n  if (this.running) return this;\n\n  // Building matrices\n  this.matrices = {\n    nodes: helpers.graphToByteArray(this.graph, this.inputReducer)\n  };\n\n  this.running = true;\n  this.askForIterations();\n\n  return this;\n};\n\n/**\n * Method used to stop the layout.\n *\n * @return {NoverlapLayoutSupervisor}\n */\nNoverlapLayoutSupervisor.prototype.stop = function () {\n  this.running = false;\n\n  return this;\n};\n\n/**\n * Method used to kill the layout.\n *\n * @return {NoverlapLayoutSupervisor}\n */\nNoverlapLayoutSupervisor.prototype.kill = function () {\n  if (this.killed) return this;\n\n  this.running = false;\n  this.killed = true;\n\n  // Clearing memory\n  this.matrices = null;\n\n  // Terminating worker\n  this.worker.terminate();\n\n  // Unbinding listeners\n  this.graph.removeListener('nodeAdded', this.handleAddition);\n  this.graph.removeListener('edgeAdded', this.handleAddition);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = NoverlapLayoutSupervisor;\n","/**\n * Graphology Noverlap Layout Webworker\n * =====================================\n *\n * Web worker able to run the layout in a separate thread.\n */\nmodule.exports = function worker() {\n  var NODES;\n\n  var moduleShim = {};\n\n  (function () {\n    /**\n * Graphology Noverlap Iteration\n * ==============================\n *\n * Function used to perform a single iteration of the algorithm.\n */\n\n/**\n * Matrices properties accessors.\n */\nvar NODE_X = 0,\n  NODE_Y = 1,\n  NODE_SIZE = 2;\n\n/**\n * Constants.\n */\nvar PPN = 3;\n\n/**\n * Helpers.\n */\nfunction hashPair(a, b) {\n  return a + '§' + b;\n}\n\nfunction jitter() {\n  return 0.01 * (0.5 - Math.random());\n}\n\n/**\n * Function used to perform a single interation of the algorithm.\n *\n * @param  {object}       options    - Layout options.\n * @param  {Float32Array} NodeMatrix - Node data.\n * @return {object}                  - Some metadata.\n */\nmoduleShim.exports = function iterate(options, NodeMatrix) {\n  // Caching options\n  var margin = options.margin;\n  var ratio = options.ratio;\n  var expansion = options.expansion;\n  var gridSize = options.gridSize; // TODO: decrease grid size when few nodes?\n  var speed = options.speed;\n\n  // Generic iteration variables\n  var i, j, x, y, l, size;\n  var converged = true;\n\n  var length = NodeMatrix.length;\n  var order = (length / PPN) | 0;\n\n  var deltaX = new Float32Array(order);\n  var deltaY = new Float32Array(order);\n\n  // Finding the extents of our space\n  var xMin = Infinity;\n  var yMin = Infinity;\n  var xMax = -Infinity;\n  var yMax = -Infinity;\n\n  for (i = 0; i < length; i += PPN) {\n    x = NodeMatrix[i + NODE_X];\n    y = NodeMatrix[i + NODE_Y];\n    size = NodeMatrix[i + NODE_SIZE] * ratio + margin;\n\n    xMin = Math.min(xMin, x - size);\n    xMax = Math.max(xMax, x + size);\n    yMin = Math.min(yMin, y - size);\n    yMax = Math.max(yMax, y + size);\n  }\n\n  var width = xMax - xMin;\n  var height = yMax - yMin;\n  var xCenter = (xMin + xMax) / 2;\n  var yCenter = (yMin + yMax) / 2;\n\n  xMin = xCenter - (expansion * width) / 2;\n  xMax = xCenter + (expansion * width) / 2;\n  yMin = yCenter - (expansion * height) / 2;\n  yMax = yCenter + (expansion * height) / 2;\n\n  // Building grid\n  var grid = new Array(gridSize * gridSize),\n    gridLength = grid.length,\n    c;\n\n  for (c = 0; c < gridLength; c++) grid[c] = [];\n\n  var nxMin, nxMax, nyMin, nyMax;\n  var xMinBox, xMaxBox, yMinBox, yMaxBox;\n\n  var col, row;\n\n  for (i = 0; i < length; i += PPN) {\n    x = NodeMatrix[i + NODE_X];\n    y = NodeMatrix[i + NODE_Y];\n    size = NodeMatrix[i + NODE_SIZE] * ratio + margin;\n\n    nxMin = x - size;\n    nxMax = x + size;\n    nyMin = y - size;\n    nyMax = y + size;\n\n    xMinBox = Math.floor((gridSize * (nxMin - xMin)) / (xMax - xMin));\n    xMaxBox = Math.floor((gridSize * (nxMax - xMin)) / (xMax - xMin));\n    yMinBox = Math.floor((gridSize * (nyMin - yMin)) / (yMax - yMin));\n    yMaxBox = Math.floor((gridSize * (nyMax - yMin)) / (yMax - yMin));\n\n    for (col = xMinBox; col <= xMaxBox; col++) {\n      for (row = yMinBox; row <= yMaxBox; row++) {\n        grid[col * gridSize + row].push(i);\n      }\n    }\n  }\n\n  // Computing collisions\n  var cell;\n\n  var collisions = new Set();\n\n  var n1, n2, x1, x2, y1, y2, s1, s2, h;\n\n  var xDist, yDist, dist, collision;\n\n  for (c = 0; c < gridLength; c++) {\n    cell = grid[c];\n\n    for (i = 0, l = cell.length; i < l; i++) {\n      n1 = cell[i];\n\n      x1 = NodeMatrix[n1 + NODE_X];\n      y1 = NodeMatrix[n1 + NODE_Y];\n      s1 = NodeMatrix[n1 + NODE_SIZE];\n\n      for (j = i + 1; j < l; j++) {\n        n2 = cell[j];\n        h = hashPair(n1, n2);\n\n        if (gridLength > 1 && collisions.has(h)) continue;\n\n        if (gridLength > 1) collisions.add(h);\n\n        x2 = NodeMatrix[n2 + NODE_X];\n        y2 = NodeMatrix[n2 + NODE_Y];\n        s2 = NodeMatrix[n2 + NODE_SIZE];\n\n        xDist = x2 - x1;\n        yDist = y2 - y1;\n        dist = Math.sqrt(xDist * xDist + yDist * yDist);\n        collision = dist < s1 * ratio + margin + (s2 * ratio + margin);\n\n        if (collision) {\n          converged = false;\n\n          n2 = (n2 / PPN) | 0;\n\n          if (dist > 0) {\n            deltaX[n2] += (xDist / dist) * (1 + s1);\n            deltaY[n2] += (yDist / dist) * (1 + s1);\n          } else {\n            // Nodes are on the exact same spot, we need to jitter a bit\n            deltaX[n2] += width * jitter();\n            deltaY[n2] += height * jitter();\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0, j = 0; i < length; i += PPN, j++) {\n    NodeMatrix[i + NODE_X] += deltaX[j] * 0.1 * speed;\n    NodeMatrix[i + NODE_Y] += deltaY[j] * 0.1 * speed;\n  }\n\n  return {converged: converged};\n};\n\n  })();\n\n  var iterate = moduleShim.exports;\n\n  self.addEventListener('message', function (event) {\n    var data = event.data;\n\n    NODES = new Float32Array(data.nodes);\n\n    // Running the iteration\n    var result = iterate(data.settings, NODES);\n\n    // Sending result to supervisor\n    self.postMessage(\n      {\n        result: result,\n        nodes: NODES.buffer\n      },\n      [NODES.buffer]\n    );\n  });\n};\n\n","/**\n * Graphology Common GEXF Helpers\n * ===============================\n *\n * Miscellaneous helpers used by both instance of the code.\n */\n\n/**\n * Function used to cast a string value to the desired type.\n *\n * @param  {string} type - Value type.\n * @param  {string} type - String value.\n * @return {any}         - Parsed type.\n */\nexports.cast = function (type, value) {\n  switch (type) {\n    case 'boolean':\n      value = value === 'true';\n      break;\n\n    case 'integer':\n    case 'long':\n    case 'float':\n    case 'double':\n      value = +value;\n      break;\n\n    case 'liststring':\n      value = value ? value.split('|') : [];\n      break;\n\n    default:\n  }\n\n  return value;\n};\n\n/**\n * Function deleting illegal characters from a potential tag name to avoid\n * generating invalid XML.\n *\n * @param  {string} type - Tag name.\n * @return {string}\n */\nvar SANITIZE_PATTERN = /[\"'<>&\\s]/g;\n\nexports.sanitizeTagName = function sanitizeTagName(tagName) {\n  return tagName.replace(SANITIZE_PATTERN, '').trim();\n};\n","/* eslint no-self-compare: 0 */\n/**\n * Graphology Browser GEXF Parser\n * ===============================\n *\n * Browser version of the graphology GEXF parser using DOMParser to function.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\nvar mergeEdge = require('graphology-utils/add-edge').mergeEdge;\nvar toMixed = require('graphology-operators/to-mixed');\nvar toMulti = require('graphology-operators/to-multi');\nvar helpers = require('../common/helpers.js');\n\nvar cast = helpers.cast;\n\n/**\n * Function checking whether the given value is a NaN.\n *\n * @param  {any} value - Value to test.\n * @return {boolean}\n */\nfunction isReallyNaN(value) {\n  return value !== value;\n}\n\n/**\n * Function used to convert a viz:color attribute into a CSS rgba? string.\n *\n * @param  {Node}   element - DOM element.\n * @return {string}\n */\nfunction toRGBString(element) {\n  var a = element.getAttribute('a'),\n    r = element.getAttribute('r'),\n    g = element.getAttribute('g'),\n    b = element.getAttribute('b');\n\n  return a\n    ? 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'\n    : 'rgb(' + r + ',' + g + ',' + b + ')';\n}\n\n/**\n * Function returning the first matching tag of the `viz` namespace matching\n * the desired tag name.\n *\n * @param  {Node}   element - Target DOM element.\n * @param  {string} name    - Tag name.\n * @return {Node}\n */\nfunction getFirstMatchingVizTag(element, name) {\n  var vizElement = element.getElementsByTagName('viz:' + name)[0];\n\n  if (!vizElement) vizElement = element.getElementsByTagNameNS('viz', name)[0];\n\n  if (!vizElement) vizElement = element.getElementsByTagName(name)[0];\n\n  return vizElement;\n}\n\n/**\n * Function used to collect meta information.\n *\n * @param  {Array<Node>} elements - Target DOM element.\n * @return {object}\n */\nfunction collectMeta(elements) {\n  var meta = {},\n    element,\n    value;\n\n  for (var i = 0, l = elements.length; i < l; i++) {\n    element = elements[i];\n\n    if (element.nodeName === '#text') continue;\n\n    value = element.textContent.trim();\n\n    if (value) meta[element.tagName.toLowerCase()] = element.textContent;\n  }\n\n  return meta;\n}\n\n/**\n * Function used to extract the model from the right elements.\n *\n * @param  {Array<Node>} elements - Target DOM elements.\n * @return {array}                - The model & default attributes.\n */\nfunction extractModel(elements) {\n  var model = {},\n    defaults = {},\n    element,\n    defaultElement,\n    id;\n\n  for (var i = 0, l = elements.length; i < l; i++) {\n    element = elements[i];\n    id = element.getAttribute('id') || element.getAttribute('for');\n\n    model[id] = {\n      id: id,\n      type: element.getAttribute('type') || 'string',\n      title: !isReallyNaN(+id) ? element.getAttribute('title') || id : id\n    };\n\n    // Default?\n    defaultElement = element.getElementsByTagName('default')[0];\n\n    if (defaultElement)\n      defaults[model[id].title] = cast(\n        model[id].type,\n        defaultElement.textContent\n      );\n  }\n\n  return [model, defaults];\n}\n\n/**\n * Function used to collect an element's attributes.\n *\n * @param  {object} model    - Data model to use.\n * @param  {object} defaults - Default values.\n * @param  {Node}   element  - Target DOM element.\n * @return {object}          - The collected attributes.\n */\nfunction collectAttributes(model, defaults, element) {\n  var data = {},\n    label = element.getAttribute('label'),\n    weight = element.getAttribute('weight');\n\n  if (label) data.label = label;\n\n  if (weight) data.weight = +weight;\n\n  var valueElements = element.getElementsByTagName('attvalue'),\n    valueElement,\n    id;\n\n  for (var i = 0, l = valueElements.length; i < l; i++) {\n    valueElement = valueElements[i];\n    id = valueElement.getAttribute('id') || valueElement.getAttribute('for');\n\n    data[model[id].title] = cast(\n      model[id].type,\n      valueElement.getAttribute('value')\n    );\n  }\n\n  // Applying default values\n  var k;\n\n  for (k in defaults) {\n    if (!(k in data)) data[k] = defaults[k];\n  }\n\n  // TODO: shortcut here to avoid viz when namespace is not set\n\n  // Attempting to find viz namespace tags\n\n  //-- 1) Color\n  var vizElement = getFirstMatchingVizTag(element, 'color');\n\n  if (vizElement) data.color = toRGBString(vizElement);\n\n  //-- 2) Size\n  vizElement = getFirstMatchingVizTag(element, 'size');\n\n  if (vizElement) data.size = +vizElement.getAttribute('value');\n\n  //-- 3) Position\n  var x, y, z;\n\n  vizElement = getFirstMatchingVizTag(element, 'position');\n\n  if (vizElement) {\n    x = vizElement.getAttribute('x');\n    y = vizElement.getAttribute('y');\n    z = vizElement.getAttribute('z');\n\n    if (x) data.x = +x;\n    if (y) data.y = +y;\n    if (z) data.z = +z;\n  }\n\n  //-- 4) Shape\n  vizElement = getFirstMatchingVizTag(element, 'shape');\n\n  if (vizElement) data.shape = vizElement.getAttribute('value');\n\n  //-- 5) Thickness\n  vizElement = getFirstMatchingVizTag(element, 'thickness');\n\n  if (vizElement) data.thickness = +vizElement.getAttribute('value');\n\n  return data;\n}\n\n/**\n * Factory taking implementations of `DOMParser` & `Document` returning\n * the parser function.\n */\nmodule.exports = function createParserFunction(DOMParser, Document) {\n  /**\n   * Function taking either a string or a document and returning a\n   * graphology instance.\n   *\n   * @param {function}        Graph  - A graphology constructor.\n   * @param {string|Document} source - The source to parse.\n   * @param {object}          options - Parsing options.\n   */\n\n  // TODO: option to map the data to the attributes for customization, nodeModel, edgeModel, nodeReducer, edgeReducer\n  // TODO: option to disable the model mapping heuristic\n  return function parse(Graph, source, options) {\n    options = options || {};\n\n    var addMissingNodes = options.addMissingNodes === true;\n    var mergeResult;\n\n    var xmlDoc = source;\n\n    var element, result, type, attributes, id, s, t, i, l;\n\n    if (!isGraphConstructor(Graph))\n      throw new Error('graphology-gexf/parser: invalid Graph constructor.');\n\n    // If source is a string, we are going to parse it\n    if (typeof source === 'string')\n      xmlDoc = new DOMParser().parseFromString(source, 'application/xml');\n\n    if (!(xmlDoc instanceof Document))\n      throw new Error(\n        'graphology-gexf/parser: source should either be a XML document or a string.'\n      );\n\n    // Finding useful elements\n    var GRAPH_ELEMENT = xmlDoc.getElementsByTagName('graph')[0],\n      META_ELEMENT = xmlDoc.getElementsByTagName('meta')[0],\n      META_ELEMENTS = (META_ELEMENT && META_ELEMENT.childNodes) || [],\n      NODE_ELEMENTS = xmlDoc.getElementsByTagName('node'),\n      EDGE_ELEMENTS = xmlDoc.getElementsByTagName('edge'),\n      MODEL_ELEMENTS = xmlDoc.getElementsByTagName('attributes'),\n      NODE_MODEL_ELEMENTS = [],\n      EDGE_MODEL_ELEMENTS = [];\n\n    for (i = 0, l = MODEL_ELEMENTS.length; i < l; i++) {\n      element = MODEL_ELEMENTS[i];\n\n      if (element.getAttribute('class') === 'node')\n        NODE_MODEL_ELEMENTS = element.getElementsByTagName('attribute');\n      else if (element.getAttribute('class') === 'edge')\n        EDGE_MODEL_ELEMENTS = element.getElementsByTagName('attribute');\n    }\n\n    // Information\n    var DEFAULT_EDGE_TYPE =\n      GRAPH_ELEMENT.getAttribute('defaultedgetype') || 'undirected';\n\n    if (DEFAULT_EDGE_TYPE === 'mutual') DEFAULT_EDGE_TYPE = 'undirected';\n\n    // Computing models\n    result = extractModel(NODE_MODEL_ELEMENTS);\n\n    var NODE_MODEL = result[0],\n      NODE_DEFAULT_ATTRIBUTES = result[1];\n\n    result = extractModel(EDGE_MODEL_ELEMENTS);\n\n    var EDGE_MODEL = result[0],\n      EDGE_DEFAULT_ATTRIBUTES = result[1];\n\n    // Polling the first edge to guess the type of the edges\n    var graphType = EDGE_ELEMENTS[0]\n      ? EDGE_ELEMENTS[0].getAttribute('type') || DEFAULT_EDGE_TYPE\n      : 'mixed';\n\n    // Instantiating our graph\n    var graph = new Graph({\n      type: graphType\n    });\n\n    // Collecting meta\n    var meta = collectMeta(META_ELEMENTS),\n      lastModifiedDate =\n        META_ELEMENT && META_ELEMENT.getAttribute('lastmodifieddate');\n\n    graph.replaceAttributes(meta);\n\n    if (lastModifiedDate)\n      graph.setAttribute('lastModifiedDate', lastModifiedDate);\n\n    // Adding nodes\n    for (i = 0, l = NODE_ELEMENTS.length; i < l; i++) {\n      element = NODE_ELEMENTS[i];\n\n      graph.addNode(\n        element.getAttribute('id'),\n        collectAttributes(NODE_MODEL, NODE_DEFAULT_ATTRIBUTES, element)\n      );\n    }\n\n    // Adding edges\n    for (i = 0, l = EDGE_ELEMENTS.length; i < l; i++) {\n      element = EDGE_ELEMENTS[i];\n\n      id = element.getAttribute('id');\n      type = element.getAttribute('type') || DEFAULT_EDGE_TYPE;\n      s = element.getAttribute('source');\n      t = element.getAttribute('target');\n      attributes = collectAttributes(\n        EDGE_MODEL,\n        EDGE_DEFAULT_ATTRIBUTES,\n        element\n      );\n\n      // If we encountered an edge with a different type, we upgrade the graph\n      if (type !== graph.type && graph.type !== 'mixed') {\n        graph = toMixed(graph);\n      }\n\n      // If we encountered twice the same edge, we upgrade the graph\n      if (\n        !graph.multi &&\n        ((type === 'directed' && graph.hasDirectedEdge(s, t)) ||\n          graph.hasUndirectedEdge(s, t))\n      ) {\n        graph = toMulti(graph);\n      }\n\n      mergeResult = mergeEdge(\n        graph,\n        type !== 'directed',\n        id || null,\n        s,\n        t,\n        attributes\n      );\n\n      if (!addMissingNodes && (mergeResult[2] || mergeResult[3])) {\n        throw new Error(\n          'graphology-gexf/parser: one of your gexf file edges points to an inexisting node. Set the parser `addMissingNodes` option to `true` if you do not care.'\n        );\n      }\n    }\n\n    return graph;\n  };\n};\n","/**\n * Graphology Browser GEXF Parser\n * ===============================\n *\n * Browser version of the graphology GEXF parser.\n */\nvar createParserFunction = require('../common/parser.js');\n\nmodule.exports = createParserFunction(DOMParser, Document);\n","\nfunction isFalse(s) {\n  return typeof s !== 'number' && !s;\n}\n\nfunction strval(s) {\n  if (typeof s == 'string') {\n    return s;\n  }\n  else if (typeof s == 'number') {\n    return s+'';\n  }\n  else if (typeof s == 'function') {\n    return s();\n  }\n  else if (s instanceof XMLWriter) {\n    return s.toString();\n  }\n  else throw Error('Bad Parameter');\n}\n\nfunction XMLWriter(indent, callback) {\n\n    if (!(this instanceof XMLWriter)) {\n        return new XMLWriter();\n    }\n\n    this.name_regex = /[_:A-Za-z][-._:A-Za-z0-9]*/;\n    this.indent = indent ? true : false;\n    this.indentString = this.indent && typeof indent === 'string' ? indent : '    ';\n    this.output = '';\n    this.stack = [];\n    this.tags = 0;\n    this.attributes = 0;\n    this.attribute = 0;\n    this.texts = 0;\n    this.comment = 0;\n    this.dtd = 0;\n    this.root = '';\n    this.pi = 0;\n    this.cdata = 0;\n    this.started_write = false;\n    this.writer;\n    this.writer_encoding = 'UTF-8';\n\n    if (typeof callback == 'function') {\n        this.writer = callback;\n    } else {\n        this.writer = function (s, e) {\n            this.output += s;\n        }\n    }\n}\n\nXMLWriter.prototype = {\n    toString : function () {\n        this.flush();\n        return this.output;\n    },\n\n    indenter : function () {\n      if (this.indent) {\n        this.write('\\n');\n        for (var i = 1; i < this.tags; i++) {\n          this.write(this.indentString);\n        }\n      }\n    },\n\n    write : function () {\n        for (var i = 0; i < arguments.length; i++) {\n            this.writer(arguments[i], this.writer_encoding);\n        }\n    },\n\n\n    flush : function () {\n        for (var i = this.tags; i > 0; i--) {\n            this.endElement();\n        }\n        this.tags = 0;\n    },\n\n    startDocument : function (version, encoding, standalone) {\n        if (this.tags || this.attributes) return this;\n\n        this.startPI('xml');\n        this.startAttribute('version');\n        this.text(typeof version == \"string\" ? version : \"1.0\");\n        this.endAttribute();\n        if (typeof encoding == \"string\") {\n            this.startAttribute('encoding');\n            this.text(encoding);\n            this.endAttribute();\n            this.writer_encoding = encoding;\n        }\n        if (standalone) {\n            this.startAttribute('standalone');\n            this.text(\"yes\");\n            this.endAttribute();\n        }\n        this.endPI();\n        if (!this.indent) {\n          this.write('\\n');\n        }\n        return this;\n    },\n\n    endDocument : function () {\n        if (this.attributes) this.endAttributes();\n        return this;\n    },\n\n    writeElement : function (name, content) {\n        return this.startElement(name).text(content).endElement();\n    },\n\n    writeElementNS : function (prefix, name, uri, content) {\n        if (!content) {\n            content = uri;\n        }\n        return this.startElementNS(prefix, name, uri).text(content).endElement();\n    },\n\n    startElement : function (name) {\n        name = strval(name);\n        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n        if (this.tags === 0 && this.root && this.root !== name) throw Error('Invalid Parameter');\n        if (this.attributes) this.endAttributes();\n        ++this.tags;\n        this.texts = 0;\n        if (this.stack.length > 0)\n          this.stack[this.stack.length-1].containsTag = true;\n\n        this.stack.push({\n            name: name,\n            tags: this.tags\n        });\n        if (this.started_write) this.indenter();\n        this.write('<', name);\n        this.startAttributes();\n        this.started_write = true;\n        return this;\n    },\n    startElementNS : function (prefix, name, uri) {\n        prefix = strval(prefix);\n        name = strval(name);\n\n        if (!prefix.match(this.name_regex)) throw Error('Invalid Parameter');\n        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n        if (this.attributes) this.endAttributes();\n        ++this.tags;\n        this.texts = 0;\n        if (this.stack.length > 0)\n          this.stack[this.stack.length-1].containsTag = true;\n\n        this.stack.push({\n            name: prefix + ':' + name,\n            tags: this.tags\n        });\n        if (this.started_write) this.indenter();\n        this.write('<', prefix + ':' + name);\n        this.startAttributes();\n        this.started_write = true;\n        return this;\n    },\n\n    endElement : function () {\n        if (!this.tags) return this;\n        var t = this.stack.pop();\n        if (this.attributes > 0) {\n            if (this.attribute) {\n                if (this.texts) this.endAttribute();\n                this.endAttribute();\n            }\n            this.write('/');\n            this.endAttributes();\n        } else {\n            if (t.containsTag) this.indenter();\n            this.write('</', t.name, '>');\n        }\n        --this.tags;\n        this.texts = 0;\n        return this;\n    },\n\n    writeAttribute : function (name, content) {\n        if (typeof content == 'function') {\n          content = content();\n        }\n        if (isFalse(content)) {\n           return this;\n        }\n        return this.startAttribute(name).text(content).endAttribute();\n    },\n    writeAttributeNS : function (prefix, name, uri, content) {\n        if (!content) {\n            content = uri;\n        }\n        if (typeof content == 'function') {\n          content = content();\n        }\n        if (isFalse(content)) {\n          return this;\n        }\n        return this.startAttributeNS(prefix, name, uri).text(content).endAttribute();\n    },\n\n    startAttributes : function () {\n        this.attributes = 1;\n        return this;\n    },\n\n    endAttributes : function () {\n        if (!this.attributes) return this;\n        if (this.attribute) this.endAttribute();\n        this.attributes = 0;\n        this.attribute = 0;\n        this.texts = 0;\n        this.write('>');\n        return this;\n    },\n\n    startAttribute : function (name) {\n        name = strval(name);\n        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n        if (!this.attributes && !this.pi) return this;\n        if (this.attribute) return this;\n        this.attribute = 1;\n        this.write(' ', name, '=\"');\n        return this;\n    },\n    startAttributeNS : function (prefix, name, uri) {\n        prefix = strval(prefix);\n        name = strval(name);\n\n        if (!prefix.match(this.name_regex)) throw Error('Invalid Parameter');\n        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n        if (!this.attributes && !this.pi) return this;\n        if (this.attribute) return this;\n        this.attribute = 1;\n        this.write(' ', prefix + ':' + name, '=\"');\n        return this;\n    },\n    endAttribute : function () {\n        if (!this.attribute) return this;\n        this.attribute = 0;\n        this.texts = 0;\n        this.write('\"');\n        return this;\n    },\n\n    text : function (content) {\n        content = strval(content);\n        if (!this.tags && !this.comment && !this.pi && !this.cdata) return this;\n        if (this.attributes && this.attribute) {\n            ++this.texts;\n            this.write(content\n                       .replace(/&/g, '&amp;')\n                       .replace(/</g, '&lt;')\n                       .replace(/\"/g, '&quot;')\n                       .replace(/\\t/g, '&#x9;')\n                       .replace(/\\n/g, '&#xA;')\n                       .replace(/\\r/g, '&#xD;')\n                      );\n            return this;\n        } else if (this.attributes && !this.attribute) {\n            this.endAttributes();\n        }\n        if (this.comment || this.cdata) {\n            this.write(content);\n        }\n        else {\n          this.write(content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'));\n        }\n        ++this.texts;\n        this.started_write = true;\n        return this;\n    },\n\n    writeComment : function (content) {\n        return this.startComment().text(content).endComment();\n    },\n\n    startComment : function () {\n        if (this.comment) return this;\n        if (this.attributes) this.endAttributes();\n        this.indenter();\n        this.write('<!--');\n        this.comment = 1;\n        this.started_write = true;\n        return this;\n    },\n\n    endComment : function () {\n        if (!this.comment) return this;\n        this.write('-->');\n        this.comment = 0;\n        return this;\n    },\n\n    writeDocType : function (name, pubid, sysid, subset) {\n        return this.startDocType(name, pubid, sysid, subset).endDocType()\n    },\n\n    startDocType : function (name, pubid, sysid, subset) {\n        if (this.dtd || this.tags) return this;\n\n        name = strval(name);\n        pubid = pubid ? strval(pubid) : pubid;\n        sysid = sysid ? strval(sysid) : sysid;\n        subset = subset ? strval(subset) : subset;\n\n        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n        if (pubid && !pubid.match(/^[\\w\\-][\\w\\s\\-\\/\\+\\:\\.]*/)) throw Error('Invalid Parameter');\n        if (sysid && !sysid.match(/^[\\w\\.][\\w\\-\\/\\\\\\:\\.]*/)) throw Error('Invalid Parameter');\n        if (subset && !subset.match(/[\\w\\s\\<\\>\\+\\.\\!\\#\\-\\?\\*\\,\\(\\)\\|]*/)) throw Error('Invalid Parameter');\n\n        pubid = pubid ? ' PUBLIC \"' + pubid + '\"' : (sysid) ? ' SYSTEM' : '';\n        sysid = sysid ? ' \"' + sysid + '\"' : '';\n        subset = subset ? ' [' + subset + ']': '';\n\n        if (this.started_write) this.indenter();\n        this.write('<!DOCTYPE ', name, pubid, sysid, subset);\n        this.root = name;\n        this.dtd = 1;\n        this.started_write = true;\n        return this;\n    },\n\n    endDocType : function () {\n        if (!this.dtd) return this;\n        this.write('>');\n        return this;\n    },\n\n    writePI : function (name, content) {\n        return this.startPI(name).text(content).endPI()\n    },\n\n    startPI : function (name) {\n        name = strval(name);\n        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n        if (this.pi) return this;\n        if (this.attributes) this.endAttributes();\n        if (this.started_write) this.indenter();\n        this.write('<?', name);\n        this.pi = 1;\n        this.started_write = true;\n        return this;\n    },\n\n    endPI : function () {\n        if (!this.pi) return this;\n        this.write('?>');\n        this.pi = 0;\n        return this;\n    },\n\n    writeCData : function (content) {\n        return this.startCData().text(content).endCData();\n    },\n\n    startCData : function () {\n        if (this.cdata) return this;\n        if (this.attributes) this.endAttributes();\n        this.indenter();\n        this.write('<![CDATA[');\n        this.cdata = 1;\n        this.started_write = true;\n        return this;\n    },\n\n    endCData : function () {\n        if (!this.cdata) return this;\n        this.write(']]>');\n        this.cdata = 0;\n        return this;\n    },\n\n    writeRaw : function(content) {\n        content = strval(content);\n        if (!this.tags && !this.comment && !this.pi && !this.cdata) return this;\n        if (this.attributes && this.attribute) {\n            ++this.texts;\n            this.write(content.replace('&', '&amp;').replace('\"', '&quot;'));\n            return this;\n        } else if (this.attributes && !this.attribute) {\n            this.endAttributes();\n        }\n        ++this.texts;\n        this.write(content);\n        this.started_write = true;\n        return this;\n    }\n\n}\n\nmodule.exports = XMLWriter;\n","/* eslint no-self-compare: 0 */\n/**\n * Graphology Common GEXF Writer\n * ==============================\n *\n * GEXF writer working for both node.js & the browser.\n */\nvar isGraph = require('graphology-utils/is-graph'),\n  inferType = require('graphology-utils/infer-type'),\n  XMLWriter = require('xml-writer'),\n  sanitizeTagName = require('./helpers.js').sanitizeTagName;\n\n// TODO: handle object in color, position with object for viz\n\n/**\n * Constants.\n */\nvar GEXF_NAMESPACE = 'http://www.gexf.net/1.2draft',\n  GEXF_VIZ_NAMESPACE = 'http:///www.gexf.net/1.1draft/viz';\n\nvar VIZ_RESERVED_NAMES = new Set([\n  'color',\n  'size',\n  'x',\n  'y',\n  'z',\n  'shape',\n  'thickness'\n]);\n\nvar RGBA_TEST = /^\\s*rgba?\\s*\\(/i,\n  RGBA_MATCH =\n    /^\\s*rgba?\\s*\\(\\s*([0-9]*)\\s*,\\s*([0-9]*)\\s*,\\s*([0-9]*)\\s*(?:,\\s*([.0-9]*))?\\)\\s*$/;\n\n/**\n * Function used to transform a CSS color into a RGBA object.\n *\n * @param  {string} value - Target value.\n * @return {object}\n */\nfunction CSSColorToRGBA(value) {\n  if (!value || typeof value !== 'string') return {};\n\n  if (value[0] === '#') {\n    value = value.slice(1);\n\n    return value.length === 3\n      ? {\n          r: parseInt(value[0] + value[0], 16),\n          g: parseInt(value[1] + value[1], 16),\n          b: parseInt(value[2] + value[2], 16)\n        }\n      : {\n          r: parseInt(value[0] + value[1], 16),\n          g: parseInt(value[2] + value[3], 16),\n          b: parseInt(value[4] + value[5], 16)\n        };\n  } else if (RGBA_TEST.test(value)) {\n    var result = {};\n\n    value = value.match(RGBA_MATCH);\n    result.r = +value[1];\n    result.g = +value[2];\n    result.b = +value[3];\n\n    if (value[4]) result.a = +value[4];\n\n    return result;\n  }\n\n  return {};\n}\n\n/**\n * Function used to map an element's attributes to a standardized map of\n * GEXF expected properties (label, viz, attributes).\n *\n * @param  {string} type       - The element's type.\n * @param  {string} key        - The element's key.\n * @param  {object} attributes - The element's attributes.\n * @return {object}\n */\nfunction DEFAULT_ELEMENT_FORMATTER(type, key, attributes) {\n  var output = {},\n    name;\n\n  for (name in attributes) {\n    if (name === 'label') {\n      output.label = attributes.label;\n    } else if (type === 'edge' && name === 'weight') {\n      output.weight = attributes.weight;\n    } else if (VIZ_RESERVED_NAMES.has(name)) {\n      output.viz = output.viz || {};\n      output.viz[name] = attributes[name];\n    } else {\n      output.attributes = output.attributes || {};\n      output.attributes[name] = attributes[name];\n    }\n  }\n\n  return output;\n}\n\nvar DEFAULT_NODE_FORMATTER = DEFAULT_ELEMENT_FORMATTER.bind(null, 'node'),\n  DEFAULT_EDGE_FORMATTER = DEFAULT_ELEMENT_FORMATTER.bind(null, 'edge');\n\n/**\n * Function used to check whether the given integer is 32 bits or not.\n *\n * @param  {number} number - Target number.\n * @return {boolean}\n */\nfunction is32BitInteger(number) {\n  return number <= 0x7fffffff && number >= -0x7fffffff;\n}\n\n/**\n * Function used to check whether the given value is \"empty\".\n *\n * @param  {any} value - Target value.\n * @return {boolean}\n */\nfunction isEmptyValue(value) {\n  return (\n    typeof value === 'undefined' ||\n    value === null ||\n    value === '' ||\n    value !== value\n  );\n}\n\n/**\n * Function used to detect a JavaScript's value type in the GEXF model.\n *\n * @param  {any}    value - Target value.\n * @return {string}\n */\nfunction detectValueType(value) {\n  if (isEmptyValue(value)) return 'empty';\n\n  if (Array.isArray(value)) return 'liststring';\n\n  if (typeof value === 'boolean') return 'boolean';\n\n  if (typeof value === 'object') return 'string';\n\n  // Numbers\n  if (typeof value === 'number') {\n    // Integer\n    if (value === (value | 0)) {\n      // Long (JavaScript integer can go up to 53 bit)?\n      return is32BitInteger(value) ? 'integer' : 'long';\n    }\n\n    // JavaScript numbers are 64 bit float, hence the double\n    return 'double';\n  }\n\n  return 'string';\n}\n\n/**\n * Function used to cast the given value into the given type.\n *\n * @param  {string} type  - Target type.\n * @param  {any}    value - Value to cast.\n * @return {string}\n */\nfunction cast(type, value) {\n  if (type === 'liststring' && Array.isArray(value)) return value.join('|');\n  return '' + value;\n}\n\n/**\n * Function used to collect data from a graph's nodes.\n *\n * @param  {Graph}    graph   - Target graph.\n * @param  {function} format  - Function formatting the nodes attributes.\n * @return {array}\n */\nfunction collectNodeData(graph, format) {\n  var nodes = new Array(graph.order);\n  var i = 0;\n\n  graph.forEachNode(function (node, attr) {\n    var data = format(node, attr);\n    data.key = node;\n    nodes[i++] = data;\n  });\n\n  return nodes;\n}\n\n/**\n * Function used to collect data from a graph's edges.\n *\n * @param  {Graph}    graph   - Target graph.\n * @param  {function} reducer - Function reducing the edges attributes.\n * @return {array}\n */\nfunction collectEdgeData(graph, reducer) {\n  var edges = new Array(graph.size);\n  var i = 0;\n\n  graph.forEachEdge(function (\n    edge,\n    attr,\n    source,\n    target,\n    _sa,\n    _ta,\n    undirected\n  ) {\n    var data = reducer(edge, attr);\n    data.key = edge;\n    data.source = source;\n    data.target = target;\n    data.undirected = undirected;\n    edges[i++] = data;\n  });\n\n  return edges;\n}\n\n/**\n * Function used to infer the model of the graph's nodes or edges.\n *\n * @param  {array} elements - The graph's relevant elements.\n * @return {array}\n */\n\n// TODO: on large graph, we could also sample or let the user indicate the types\nfunction inferModel(elements) {\n  var model = {},\n    attributes,\n    type,\n    k;\n\n  // Testing every attributes\n  for (var i = 0, l = elements.length; i < l; i++) {\n    attributes = elements[i].attributes;\n\n    if (!attributes) continue;\n\n    for (k in attributes) {\n      type = detectValueType(attributes[k]);\n\n      if (type === 'empty') continue;\n\n      if (!model[k]) model[k] = type;\n      else {\n        if (model[k] === 'integer' && type === 'long') model[k] = type;\n        else if (model[k] !== type) model[k] = 'string';\n      }\n    }\n  }\n\n  // TODO: check default values\n  return model;\n}\n\n/**\n * Function used to write a model.\n *\n * @param {XMLWriter} writer     - The writer to use.\n * @param {object}    model      - Model to write.\n * @param {string}    modelClass - Class of the model.\n */\nfunction writeModel(writer, model, modelClass) {\n  var name;\n\n  if (!Object.keys(model).length) return;\n\n  writer.startElement('attributes');\n  writer.writeAttribute('class', modelClass);\n\n  for (name in model) {\n    writer.startElement('attribute');\n    writer.writeAttribute('id', name);\n    writer.writeAttribute('title', name);\n    writer.writeAttribute('type', model[name]);\n    writer.endElement();\n  }\n\n  writer.endElement();\n}\n\nfunction writeElements(writer, type, model, elements) {\n  var emptyModel = !Object.keys(model).length,\n    element,\n    name,\n    color,\n    value,\n    edgeType,\n    attributes,\n    weight,\n    viz,\n    k,\n    i,\n    l;\n\n  writer.startElement(type + 's');\n\n  for (i = 0, l = elements.length; i < l; i++) {\n    element = elements[i];\n    attributes = element.attributes;\n    viz = element.viz;\n\n    writer.startElement(type);\n    writer.writeAttribute('id', element.key);\n\n    if (type === 'edge') {\n      edgeType = element.undirected ? 'undirected' : 'directed';\n\n      if (edgeType !== writer.defaultEdgeType)\n        writer.writeAttribute('type', edgeType);\n\n      writer.writeAttribute('source', element.source);\n      writer.writeAttribute('target', element.target);\n\n      weight = element.weight;\n\n      if (\n        (typeof weight === 'number' && !isNaN(weight)) ||\n        typeof weight === 'string'\n      )\n        writer.writeAttribute('weight', element.weight);\n    }\n\n    if (element.label) writer.writeAttribute('label', element.label);\n\n    if (!emptyModel && attributes) {\n      writer.startElement('attvalues');\n\n      for (name in model) {\n        if (name in attributes) {\n          value = attributes[name];\n\n          if (isEmptyValue(value)) continue;\n\n          writer.startElement('attvalue');\n          writer.writeAttribute('for', name);\n          writer.writeAttribute('value', cast(model[name], value));\n          writer.endElement();\n        }\n      }\n\n      writer.endElement();\n    }\n\n    if (viz) {\n      //-- 1) Color\n      if (viz.color) {\n        color = CSSColorToRGBA(viz.color);\n\n        writer.startElementNS('viz', 'color');\n\n        for (k in color) writer.writeAttribute(k, color[k]);\n\n        writer.endElement();\n      }\n\n      //-- 2) Size\n      if ('size' in viz) {\n        writer.startElementNS('viz', 'size');\n        writer.writeAttribute('value', viz.size);\n        writer.endElement();\n      }\n\n      //-- 3) Position\n      if ('x' in viz || 'y' in viz || 'z' in viz) {\n        writer.startElementNS('viz', 'position');\n\n        if ('x' in viz) writer.writeAttribute('x', viz.x);\n\n        if ('y' in viz) writer.writeAttribute('y', viz.y);\n\n        if ('z' in viz) writer.writeAttribute('z', viz.z);\n\n        writer.endElement();\n      }\n\n      //-- 4) Shape\n      if (viz.shape) {\n        writer.startElementNS('viz', 'shape');\n        writer.writeAttribute('value', viz.shape);\n        writer.endElement();\n      }\n\n      //-- 5) Thickness\n      if ('thickness' in viz) {\n        writer.startElementNS('viz', 'thickness');\n        writer.writeAttribute('value', viz.thickness);\n        writer.endElement();\n      }\n    }\n\n    writer.endElement();\n  }\n\n  writer.endElement();\n}\n\n/**\n * Defaults.\n */\nvar DEFAULTS = {\n  encoding: 'UTF-8',\n  pretty: true,\n  formatNode: DEFAULT_NODE_FORMATTER,\n  formatEdge: DEFAULT_EDGE_FORMATTER\n};\n\n/**\n * Function taking a graphology instance & outputting a gexf string.\n *\n * @param  {Graph}  graph        - Target graphology instance.\n * @param  {object} options      - Options:\n * @param  {string}   [encoding]   - Character encoding.\n * @param  {boolean}  [pretty]     - Whether to pretty print output.\n * @param  {function} [formatNode] - Function formatting nodes' output.\n * @param  {function} [formatEdge] - Function formatting edges' output.\n * @return {string}              - GEXF string.\n */\nmodule.exports = function write(graph, options) {\n  if (!isGraph(graph))\n    throw new Error('graphology-gexf/writer: invalid graphology instance.');\n\n  options = options || {};\n\n  var indent = options.pretty === false ? false : '  ';\n\n  var formatNode = options.formatNode || DEFAULTS.formatNode,\n    formatEdge = options.formatEdge || DEFAULTS.formatEdge;\n\n  var writer = new XMLWriter(indent);\n\n  writer.startDocument('1.0', options.encoding || DEFAULTS.encoding);\n\n  // Starting gexf\n  writer.startElement('gexf');\n  writer.writeAttribute('version', '1.2');\n  writer.writeAttribute('xmlns', GEXF_NAMESPACE);\n  writer.writeAttribute('xmlns:viz', GEXF_VIZ_NAMESPACE);\n\n  // Processing meta\n  writer.startElement('meta');\n  var graphAttributes = graph.getAttributes();\n\n  if (graphAttributes.lastModifiedDate)\n    writer.writeAttribute('lastmodifieddate', graphAttributes.lastModifiedDate);\n\n  var metaTagName;\n\n  for (var k in graphAttributes) {\n    if (k === 'lastModifiedDate') continue;\n\n    metaTagName = sanitizeTagName(k);\n\n    if (!metaTagName) continue;\n\n    writer.writeElement(metaTagName, graphAttributes[k]);\n  }\n\n  writer.endElement();\n  writer.startElement('graph');\n\n  var type = inferType(graph);\n\n  writer.defaultEdgeType = type === 'mixed' ? 'directed' : type;\n\n  writer.writeAttribute('defaultedgetype', writer.defaultEdgeType);\n\n  // Processing model\n  var nodes = collectNodeData(graph, formatNode),\n    edges = collectEdgeData(graph, formatEdge);\n\n  var nodeModel = inferModel(nodes);\n\n  writeModel(writer, nodeModel, 'node');\n\n  var edgeModel = inferModel(edges);\n\n  writeModel(writer, edgeModel, 'edge');\n\n  // Processing nodes\n  writeElements(writer, 'node', nodeModel, nodes);\n\n  // Processing edges\n  writeElements(writer, 'edge', edgeModel, edges);\n\n  return writer.toString();\n};\n","/**\n * Graphology Browser GEXF Endpoint\n * =================================\n *\n * Endpoint gathering both parser & writer for the browser.\n */\nexports.parse = require('./parser.js');\nexports.write = require('../common/writer.js');\n","/**\n * Graphology GRAPHML Defaults\n * ============================\n *\n * Sane defaults for the library.\n */\nfunction byteToHex(b) {\n  return ('0' + (b | 0).toString(16)).slice(-2);\n}\n\nfunction rgbToHex(r, g, b) {\n  return '#' + byteToHex(r) + byteToHex(g) + byteToHex(b);\n}\n\nfunction omitRgb(o) {\n  var t = {};\n\n  for (var k in o) {\n    if (k === 'r' || k === 'g' || k === 'b') continue;\n    t[k] = o[k];\n  }\n\n  return t;\n}\n\nfunction DEFAULT_FORMATTER(attr) {\n  var newAttr;\n\n  // Converting color\n  if (\n    typeof attr.r === 'number' &&\n    typeof attr.g === 'number' &&\n    typeof attr.b === 'number'\n  ) {\n    newAttr = omitRgb(attr);\n    newAttr.color = rgbToHex(attr.r, attr.g, attr.b);\n\n    return newAttr;\n  }\n\n  return attr;\n}\n\nexports.DEFAULT_FORMATTER = DEFAULT_FORMATTER;\n","/**\n * Graphology GRAPHML Parser\n * ==========================\n *\n * graphology GRAPHML parser using DOMParser to function.\n */\nvar isGraphConstructor = require('graphology-utils/is-graph-constructor');\nvar mergeEdge = require('graphology-utils/add-edge').mergeEdge;\n\nvar DEFAULTS = require('./defaults.js');\nvar DEFAULT_FORMATTER = DEFAULTS.DEFAULT_FORMATTER;\n\nfunction numericCaster(v) {\n  return +v;\n}\n\nfunction identity(v) {\n  return v;\n}\n\nvar CASTERS = {\n  boolean: function (v) {\n    return v.toLowerCase() === 'true';\n  },\n  int: numericCaster,\n  long: numericCaster,\n  float: numericCaster,\n  double: numericCaster,\n  string: identity\n};\n\nfunction getGraphDataElements(graphElement) {\n  var children = graphElement.childNodes;\n  var dataElements = [];\n\n  var element;\n\n  for (var i = 0, l = children.length; i < l; i++) {\n    element = children[i];\n\n    if (element.nodeType !== 1) continue;\n\n    if (element.tagName.toLowerCase() !== 'data') break;\n\n    dataElements.push(element);\n  }\n\n  return dataElements;\n}\n\nfunction collectModel(modelElements) {\n  var i, l, m, id, name, type, element, defaultElement, defaultValue;\n\n  var models = {\n    graph: {},\n    node: {},\n    edge: {}\n  };\n\n  var defaults = {\n    graph: {},\n    node: {},\n    edge: {}\n  };\n\n  for (i = 0, l = modelElements.length; i < l; i++) {\n    element = modelElements[i];\n    m = element.getAttribute('for') || 'node';\n    id = element.getAttribute('id');\n    name = element.getAttribute('attr.name');\n    type = element.getAttribute('attr.type') || 'string';\n\n    defaultValue = undefined;\n    defaultElement = element.getElementsByTagName('default');\n\n    if (defaultElement.length !== 0)\n      defaultValue = defaultElement[0].textContent;\n\n    models[m][id] = {\n      name: name,\n      cast: CASTERS[type]\n    };\n\n    if (typeof defaultValue !== 'undefined') defaults[m][name] = defaultValue;\n  }\n\n  return {\n    models: models,\n    defaults: defaults\n  };\n}\n\nfunction collectAttributes(model, defaults, element) {\n  var dataElements = element.getElementsByTagName('data'),\n    dataElement;\n\n  var i, l, key, spec;\n\n  var attr = {};\n\n  for (i = 0, l = dataElements.length; i < l; i++) {\n    dataElement = dataElements[i];\n    key = dataElement.getAttribute('key');\n    spec = model[key];\n\n    if (typeof spec === 'undefined') attr[key] = dataElement.textContent;\n    else attr[spec.name] = spec.cast(dataElement.textContent);\n  }\n\n  for (key in defaults) {\n    if (!(key in attr)) attr[key] = defaults[key];\n  }\n\n  return attr;\n}\n\n/**\n * Factory taking implementations of `DOMParser` & `Document` returning\n * the parser function.\n */\nmodule.exports = function createParserFunction(DOMParser, Document) {\n  /**\n   * Function taking either a string or a document and returning a\n   * graphology instance.\n   *\n   * @param {function}        Graph   - A graphology constructor.\n   * @param {string|Document} source  - The source to parse.\n   * @param {object}          options - Parsing options.\n   */\n  return function parse(Graph, source, options) {\n    options = options || {};\n\n    var addMissingNodes = options.addMissingNodes === true;\n    var mergeResult;\n\n    var xmlDoc = source;\n\n    if (!isGraphConstructor(Graph))\n      throw new Error('graphology-graphml/parser: invalid Graph constructor.');\n\n    // If source is a string, we are going to parse it\n    if (typeof source === 'string')\n      xmlDoc = new DOMParser().parseFromString(source, 'application/xml');\n\n    if (!(xmlDoc instanceof Document))\n      throw new Error(\n        'graphology-gexf/parser: source should either be a XML document or a string.'\n      );\n\n    var GRAPH_ELEMENT = xmlDoc.getElementsByTagName('graph')[0];\n    var GRAPH_DATA_ELEMENTS = getGraphDataElements(GRAPH_ELEMENT);\n    var MODEL_ELEMENTS = xmlDoc.getElementsByTagName('key');\n    var NODE_ELEMENTS = xmlDoc.getElementsByTagName('node');\n    var EDGE_ELEMENTS = xmlDoc.getElementsByTagName('edge');\n    var EDGE_DEFAULT_TYPE =\n      GRAPH_ELEMENT.getAttribute('edgedefault') || 'undirected';\n\n    var MODEL = collectModel(MODEL_ELEMENTS);\n\n    var graph = new Graph({type: EDGE_DEFAULT_TYPE});\n\n    // Graph-level attributes\n    var graphId = GRAPH_ELEMENT.getAttribute('id');\n\n    if (graphId) graph.setAttribute('id', graphId);\n\n    var dummyGraphElement = xmlDoc.createElement('graph');\n    GRAPH_DATA_ELEMENTS.forEach(function (el) {\n      dummyGraphElement.appendChild(el);\n    });\n    var graphAttributes = collectAttributes(\n      MODEL.models.graph,\n      MODEL.defaults.graph,\n      dummyGraphElement\n    );\n\n    graph.mergeAttributes(graphAttributes);\n\n    // Collecting nodes\n    var i, l, nodeElement, id, attr;\n\n    for (i = 0, l = NODE_ELEMENTS.length; i < l; i++) {\n      nodeElement = NODE_ELEMENTS[i];\n      id = nodeElement.getAttribute('id');\n\n      attr = collectAttributes(\n        MODEL.models.node,\n        MODEL.defaults.node,\n        nodeElement\n      );\n      attr = DEFAULT_FORMATTER(attr);\n\n      graph.addNode(id, attr);\n    }\n\n    // Collecting edges\n    var edgeElement, s, t, type;\n\n    for (i = 0, l = EDGE_ELEMENTS.length; i < l; i++) {\n      edgeElement = EDGE_ELEMENTS[i];\n      id = edgeElement.getAttribute('id');\n      s = edgeElement.getAttribute('source');\n      t = edgeElement.getAttribute('target');\n      type =\n        edgeElement.getAttribute('directed') === 'true'\n          ? 'directed'\n          : EDGE_DEFAULT_TYPE;\n\n      attr = collectAttributes(\n        MODEL.models.edge,\n        MODEL.defaults.edge,\n        edgeElement\n      );\n      attr = DEFAULT_FORMATTER(attr);\n\n      // Should we upgrade to a mixed graph?\n      if (!graph.type !== 'mixed' && type !== graph.type)\n        graph.upgradeToMixed();\n\n      // Should we upgrade to a multi graph?\n      if (!graph.multi) {\n        if (type === 'undirected') {\n          if (graph.hasUndirectedEdge(s, t)) graph.upgradeToMulti();\n        } else if (graph.hasDirectedEdge(s, t)) graph.upgradeToMulti();\n      }\n\n      mergeResult = mergeEdge(\n        graph,\n        type === 'undirected',\n        id ? id : null,\n        s,\n        t,\n        attr\n      );\n\n      if (!addMissingNodes && (mergeResult[2] || mergeResult[3])) {\n        throw new Error(\n          'graphology-graphml/parser: one of your graphml file edges points to an inexisting node. Set the parser `addMissingNodes` option to `true` if you do not care.'\n        );\n      }\n    }\n\n    return graph;\n  };\n};\n","/**\n * Graphology Browser GRAPHML Parser\n * ==================================\n *\n * Browser version of the graphology GRAPHML parser.\n */\nvar createParserFunction = require('../common/parser.js');\n\nmodule.exports = createParserFunction(DOMParser, Document);\n","/**\n * Graphology Browser GRAPHML Endpoint\n * ====================================\n *\n * Endpoint gathering both parser & writer for the browser.\n */\nexports.parse = require('./parser.js');\n","/**\n * Graphology Standard Library\n * ============================\n *\n * Library endpoint for the browser.\n */\nexports.assertions = require('./assertions');\nexports.communitiesLouvain = require('./communities-louvain');\nexports.components = require('./components');\nexports.generators = require('./generators');\nexports.layout = require('./layout');\nexports.layoutForce = require('./layout-force');\nexports.layoutForceAtlas2 = require('./layout-forceatlas2');\nexports.layoutNoverlap = require('./layout-noverlap');\nexports.metrics = require('./metrics');\nexports.operators = require('./operators');\nexports.shortestPath = require('./shortest-path');\nexports.simplePath = require('./simple-path');\nexports.traversal = require('./traversal');\nexports.utils = require('./utils');\n\n// Browser specific\nexports.ForceLayout = require('graphology-layout-force/worker');\nexports.FA2Layout = require('graphology-layout-forceatlas2/worker');\nexports.NoverlapLayout = require('graphology-layout-noverlap/worker');\nexports.gexf = require('graphology-gexf/browser');\nexports.graphml = require('graphology-graphml/browser');\n"],"names":["isGraph","value","addUndirectedEdgeWithKey","dropNode","multi","isGraphConstructor","prototype","deepEqual","equal","a","b","constructor","length","i","keys","Array","isArray","Map","size","entries","has","get","Set","ArrayBuffer","isView","RegExp","source","flags","valueOf","Object","toString","hasOwnProperty","call","key","SIZE","Symbol","areUnorderedCollectionsOfAttributesIdentical","a1","a2","o1","o2","j","l1","l2","matches","outside","add","compareNeighborEntries","entries1","entries2","k","countOutEdges","graph","node","c","counts","forEachOutEdge","_e","_ea","_s","target","countAssymetricUndirectedEdges","forEachUndirectedEdge","collectOutEdges","attr","push","collectAssymetricUndirectedEdges","abstractHaveSameNodes","deep","G","H","order","everyNode","hasNode","getNodeAttributes","abstractAreSameGraphs","relaxed","type","allowSelfLoops","directedSize","undirectedSize","sameDirectedEdges","sameUndirectedEdges","aggregationFunction","comparisonFunction","gCounts","hCounts","everyDirectedEdge","hasDirectedEdge","getDirectedEdgeAttributes","everyUndirectedEdge","hasUndirectedEdge","getUndirectedEdgeAttributes","require$$1","require$$2","bind","assertions","require$$0","defaults","resolveDefaults","o","output","existing","def","Date","undefined","inferType","Error","declaredType","Iterator","next","this","iterator","of","args","arguments","l","done","empty","fromSequence","sequence","is","MAX_8BIT_INTEGER","Math","pow","MAX_16BIT_INTEGER","MAX_32BIT_INTEGER","MAX_SIGNED_8BIT_INTEGER","MAX_SIGNED_16BIT_INTEGER","MAX_SIGNED_32BIT_INTEGER","exports","maxIndex","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float64Array","sign","TYPE_PRIORITY","Float32Array","array","getter","p","t","v","maxType","maxPriority","getNumberType","name","set","getPointerArray","SparseMap","Values","ByteArray","dense","sparse","vals","clear","member","index","delete","forEach","callback","scope","item","values","inspect","proxy","defineProperty","enumerable","for","sparseMap","SparseQueueSet","capacity","start","enqueue","dequeue","sparseQueueSet","createRandomIndex","rng","floor","randomIndex","random","randomIndex_1","coerceWeight","isNaN","createEdgeValueGetter","nameOrFunction","defaultValue","coerceToDefault","attributes","returnDefault","fromAttributes","fromGraph","edge","getEdgeAttributes","fromEntry","fromPartialEntry","fromMinimalEntry","extremities","isUndirected","e","s","sa","ta","u","typed","createEdgeWeightGetter","INSPECT","DEFAULTS","getEdgeWeight","keepDendrogram","resolution","UndirectedLouvainIndex","options","selfLoopCount","NeighborhoodPointerArray","NodesPointerArray","WeightsArray","C","M","E","U","level","nodes","neighborhood","weights","loops","starts","belongings","dendrogram","mapping","unused","totalWeights","weight","ids","n","self","forEachNode","undirectedDegreeWithoutSelfLoops","forEachEdge","startSource","startTarget","slice","DirectedLouvainIndex","offsets","totalInWeights","totalOutWeights","outDegreeWithoutSelfLoops","inDegreeWithoutSelfLoops","isolate","degree","currentCommunity","newCommunity","move","targetCommunity","nowEmpty","computeNodeDegree","expensiveIsolate","expensiveMove","ci","zoomOut","m","cj","data","adj","currentLevel","nextLevel","inducedGraph","newLabels","N","internalWeights","modularity","Q","M2","delta","targetCommunityDegree","deltaWithOwnCommunity","fastDelta","targetCommunityTotalWeight","fastDeltaWithOwnCommunity","bounds","project","projection","from","map","collect","assign","prop","setNodeAttribute","inBounds","outBounds","projectIn","projectOut","inDegree","outDegree","computeNodeInDegree","computeNodeOutDegree","offset","out","inAdj","outAdj","targetCommunityTotalInWeight","targetCommunityTotalOutWeight","require$$3","require$$4","require$$5","indices","require$$6","nodeCommunityAttribute","fastLocalMoves","randomWalk","addWeightToCommunity","community","currentWeight","tieBreaker","bestCommunity","bestDelta","abs","undirectedLouvain","detailed","queue","end","ri","localMoves","currentMoves","moveWasMade","localMoveWasMade","communities","deltaComputations","nodesVisited","moves","directedLouvain","louvain","count","NaN","results","fn","communitiesLouvain","addNode","DFSStack","stack","seen","undirected","addUndirectedEdge","addDirectedEdge","addDirectedEdgeWithKey","mergeUndirectedEdge","mergeUndirectedEdgeWithKey","mergeDirectedEdge","mergeDirectedEdgeWithKey","updater","updateUndirectedEdge","updateUndirectedEdgeWithKey","updateDirectedEdge","updateDirectedEdgeWithKey","seenSizeBefore","pushWith","pop","dfsStack","copyNode","copyEdge","forEachConnectedComponent","component","forEachNeighbor","forEachConnectedComponentOrder","largestConnectedComponent","remaining","largestComponent","someNode","edgeFilter","components","S","nullCopy","sourceAttr","targetAttr","vertex","P","preorder","assigned","DFS","neighbor","neighborOrder","neighbors","outboundNeighbors","GraphClass","mergeEdge","addEdge","simpleSize","d","accumulateUndirected","accumulateDirected","forEachUndirectedNeighbor","forEachOutNeighbor","undirectedDensity","directedDensity","mixedDensity","abstractDensity","density","erdosRenyi","probability","approximateSize","w","lp","log","erdosRenyi_1","clusterDensity","clusters","cluster","zOut","pOut","pIn","mergeStar","center","mergeNode","ADJACENCY","EDGES","DATA","CLUB1","club","line","row","column","split","addEdgeWithKey","generators","createRandom","createShuffleInPlace","customRandom","lastIndex","r","shuffleInPlace","shuffle","x","y","hierarchyAttributes","scale","CircleWrap","id","circleWrap","wrappedCircle","children","countChildren","previous","setNode","parentCircle","posMap","circle","hasChildren","enclosesNot","dr","dx","dy","enclosesWeak","enclosesWeakAll","B","encloseBasis2","x1","y1","r1","x2","y2","r2","x21","y21","r21","sqrt","encloseBasis3","x3","y3","r3","a3","b2","b3","c2","c3","d1","d2","d3","ab","xa","xb","ya","yb","A","encloseBasis","extendBasis","score","place","max","intersects","packEnclose","circles","shuffleFunc","aa","ca","sj","sk","pack","safety","circlesLoc","enclose","packHierarchy","packHierarchyAndShift","applyPositionToChildren","genericCirclePackLayout","positions","container","newCircleWrap","parentContainer","getChild","addChild","child","root","circlePackLayout","circlepack","dimensions","genericCircularLayout","tau","PI","assignPosition","cos","sin","updateEachNodeAttributes","_","circularLayout","circular","genericRandomLayout","randomLayout","RAD_CONVERSION","centeredOnZero","degrees","genericRotation","angle","xd","yd","xCenter","yCenter","xMin","Infinity","xMax","yMin","yMax","rotation","rotation_1","layout","layoutForce","PPN","objects","settings","linLogMode","message","outboundAttractionDistribution","adjustSizes","edgeWeightInfluence","scalingRatio","strongGravityMode","gravity","slowDown","barnesHutOptimize","barnesHutTheta","weightAttribute","NodeMatrix","EdgeMatrix","fixed","weightGetter","edges","xURL","window","URL","webkitURL","code","objectUrl","createObjectURL","Blob","worker","Worker","revokeObjectURL","iterate","n1","n2","rn","g","outboundAttCompensation","coefficient","xDist","yDist","ewc","distance","factor","force","swinging","traction","nodespeed","newX","newY","thetaSquared","RegionMatrix","q","q2","subdivisionAttempts","minX","maxX","minY","maxY","min","PPR","helpers","DEFAULT_SETTINGS","abstractSynchronousLayout","params","iterations","weighted","validationError","validateSettings","matrices","graphToByteArrays","collectLayoutChanges","assignLayoutChanges","synchronousLayout","inferSettings","layoutForceatlas2","jitter","gridSize","margin","expansion","ratio","speed","reducer","matrix","pos","mergeNodeAttributes","converged","deltaX","deltaY","width","height","nxMin","nxMax","nyMin","nyMax","xMinBox","xMaxBox","yMinBox","yMaxBox","col","cell","grid","gridLength","s1","s2","h","dist","collisions","maxIterations","graphToByteArray","inputReducer","outputReducer","layoutNoverlap","abstractDegreeCentrality","method","centralityAttribute","nodeCentralityAttribute","getDegree","centralities","degreeCentrality","inDegreeCentrality","outDegreeCentrality","support","ARRAY_BUFFER_SUPPORT","SYMBOL_SUPPORT","foreach","iterable","guessLength","isTypedArray","IndexArray","iterables","FixedDeque","ArrayClass","items","unshift","shift","peekFirst","peekLast","toArray","deque","isArrayLike","fixedDeque","FixedStack","peek","join","toJSON","fixedStack","comparator","comparators","DEFAULT_COMPARATOR","reverseComparator","siftDown","compare","heap","startIndex","parentIndex","parent","siftUp","rightIndex","endIndex","childIndex","lastItem","replace","popped","pushpop","tmp","heapify","consume","Heap","MaxHeap","nsmallest","result","reverseCompare","sort","nlargest","MinHeap","upperBoundPerMethod","NeighborhoodIndex","getNeighbors","upperBound","WeightedNeighborhoodIndex","getEdges","outDegrees","opposite","neighborhoodIndices","BRANDES_DIJKSTRA_HEAP_COMPARATOR","neighborhoodIndex","sigma","D","brandes","sourceIndex","Dv","sigmav","stop","pred","cost","lib","createUnweightedIndexedBrandes","createDijkstraIndexedBrandes","normalized","abstractBetweennessCentrality","outputName","betweennessCentrality","betweenness","SparseSet","wassermanFaust","IndexedBFS","abstractClosenessCentrality","total","closeness","bfs","fromNode","closenessCentrality","tolerance","safeVariadicHypot","abstractEigenvectorCentrality","xLast","norm","iteration","error","eigenvectorCentrality","eigenvector","nodeAuthorityAttribute","nodeHubAttribute","normalize","dict","create","sum","nb","hits","lastHubs","authorities","maxAuthority","maxHub","hubs","outboundEdges","main","hits_1","nodePagerankAttribute","alpha","abstractPagerank","pagerankAttribute","normalizedEdgeWeights","danglingNodes","dangleSum","pagerank","pagerank_1","I","smallestSize","smallestSet","step","isSubset","toRemove","intersectionSize","abstractSimmelianStrength","neighborhoods","strengths","updateEachEdgeAttributes","simmelianStrength","simmelianStrength_1","attribute","concat","Queue","extend","asbtractSingleSourceLength","lengths","singleSourceLength","undirectedSingleSourceLength","getPredecessors","inboundNeighbors","getSuccessors","predecessor","successor","currentFringe","forwardFringe","reverseFringe","found","outer","path","paths","eccentricity","otherNode","pathLength","ecc","getters","getNodeCommunity","undirectedDenseModularity","Aij","didj","weightedDegrees","createNodeValueGetter","collectForUndirectedDense","undirectedEdge","directedDenseModularity","weightedInDegrees","weightedOutDegrees","forEachDirectedEdge","collectForDirectedDense","directedEdge","undirectedSparseModularity","collectCommunitesForUndirected","edgeAttr","sourceCommunity","directedSparseModularity","collectCommunitesForDirected","sparseModularity","trueType","undirectedDelta","communityTotalWeight","nodeDegree","nodeCommunityDegree","directedDelta","communityTotalInWeight","communityTotalOutWeight","nodeInDegree","nodeOutDegree","modularity_1","extent","multiDirectedDensity","multiUndirectedDensity","multiMixedDensity","nodeExtent","edgeExtent","FixedReverseHeap","fixedReverseHeap","LOS","HIS","lo","hi","swap","createTupleComparator","inplaceQuickSortIndices","squaredDistanceAxes","axes","pivot","buildTree","labels","direction","median","PointerArray","pivots","lefts","rights","KDTree","build","visited","nearestNeighbor","query","bestDistance","best","recurse","left","right","KNN_HEAP_COMPARATOR_3","KNN_HEAP_COMPARATOR_2","kNearestNeighbors","point","linearKNearestNeighbors","dummy","reshaped","axis","f","reshapeIntoAxes","fromAxes","edgeLength","avg","stdev","metric","tree","knn","p1","p2","shortestPaths","dij","cicj","maxDistance","abstractWeightedDegree","wd","weightedDegree","weightedInDegree","weightedOutDegree","weightedInboundDegree","weightedOutboundDegree","weightedUndirectedDegree","weightedDirectedDegree","metrics","toMixed","copy","mixedGraph","emptyCopy","toMulti","multiGraph","R","mergeAttributes","getAttributes","labelsG","labelsH","_t","reversed","filterNode","old","directedGraph","existingOutEdge","existingInEdge","replaceEdgeAttributes","undirectedGraph","existingEdge","import","operators","returnTrue","nodePath","findEdge","edgePath","findOutboundEdge","DEFAULT_WEIGHT_ATTRIBUTE","DIJKSTRA_HEAP_COMPARATOR","distances","fringe","finalPath","finalDistance","dir","inboundEdges","reverse","abstractBidirectionalDijkstra","sources","cutoff","abstractDijkstraMultisource","unweighted","utils","bidirectional","singleSource","edgePathFromNodePath","shortestPath","StackSet","RecordStackSet","collectEdges","records","forEachOutboundEdge","ext1","ext2","collectMultiEdges","record","cycle","simplePath","BFSQueue","bfsQueue","depth","string","toUpperCase","TraversalRecord","capitalize","abstractBfs","startingNode","mode","visit","abstractDfs","bfsModule","dfsModule","bfsFromNode","dfs","dfsFromNode","traversal","previousSource","previousTarget","wasUndirected","forEachAssymetricAdjacencyEntry","ea","previousNode","require$$7","nodeKeyMapping","edgeKeyMapping","currentSource","currentSourceRenamed","renamed","renamedKey","_sa","_ta","targetRenamed","nodeKeyUpdater","edgeKeyUpdater","nodeStates","nodeXAttribute","nodeYAttribute","state","xKey","yKey","attraction","repulsion","inertia","maxMove","shouldSkipNode","shouldSkipEdge","isNodeFixed","filterNodes","adjustedOrder","nodeState","n1State","n2State","repulsionX","repulsionY","attractionX","attractionY","ForceSupervisor","callbacks","onConverged","frameID","running","killed","isRunning","runFrame","requestAnimationFrame","cancelAnimationFrame","kill","workerFunction","NODES","moduleShim","addEventListener","event","postMessage","buffer","FA2LayoutSupervisor","handleMessage","respawnFrame","handleGraphUpdate","terminate","clearTimeout","setTimeout","spawnWorker","on","createWorker","askForIterations","withEdges","payload","buffers","removeListener","NoverlapLayoutSupervisor","alreadyRespawning","handleAddition","setImmediate","SANITIZE_PATTERN","tagName","trim","cast","getFirstMatchingVizTag","element","vizElement","getElementsByTagName","getElementsByTagNameNS","extractModel","elements","defaultElement","model","getAttribute","title","textContent","collectAttributes","label","valueElement","valueElements","z","color","toRGBString","shape","thickness","createParserFunction","DOMParser","Document","Graph","mergeResult","addMissingNodes","xmlDoc","parseFromString","GRAPH_ELEMENT","META_ELEMENT","META_ELEMENTS","childNodes","NODE_ELEMENTS","EDGE_ELEMENTS","MODEL_ELEMENTS","NODE_MODEL_ELEMENTS","EDGE_MODEL_ELEMENTS","DEFAULT_EDGE_TYPE","NODE_MODEL","NODE_DEFAULT_ATTRIBUTES","EDGE_MODEL","EDGE_DEFAULT_ATTRIBUTES","meta","nodeName","toLowerCase","collectMeta","lastModifiedDate","replaceAttributes","setAttribute","parser","isFalse","strval","XMLWriter","indent","name_regex","indentString","tags","texts","comment","dtd","pi","cdata","started_write","writer","writer_encoding","flush","indenter","write","endElement","startDocument","version","encoding","standalone","startPI","startAttribute","text","endAttribute","endPI","endDocument","endAttributes","writeElement","content","startElement","writeElementNS","prefix","uri","startElementNS","match","containsTag","startAttributes","writeAttribute","writeAttributeNS","startAttributeNS","writeComment","startComment","endComment","writeDocType","pubid","sysid","subset","startDocType","endDocType","writePI","writeCData","startCData","endCData","writeRaw","sanitizeTagName","VIZ_RESERVED_NAMES","RGBA_TEST","RGBA_MATCH","CSSColorToRGBA","parseInt","test","DEFAULT_ELEMENT_FORMATTER","viz","isEmptyValue","inferModel","number","writeModel","modelClass","writeElements","edgeType","emptyModel","defaultEdgeType","pretty","formatNode","formatEdge","metaTagName","graphAttributes","format","collectNodeData","collectEdgeData","nodeModel","edgeModel","byteToHex","newAttr","omitRgb","DEFAULT_FORMATTER","numericCaster","CASTERS","boolean","int","long","float","double","dataElement","spec","dataElements","GRAPH_DATA_ELEMENTS","graphElement","nodeType","getGraphDataElements","EDGE_DEFAULT_TYPE","MODEL","modelElements","models","collectModel","graphId","dummyGraphElement","createElement","el","appendChild","nodeElement","edgeElement","upgradeToMixed","upgradeToMulti","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18"],"mappings":"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"}